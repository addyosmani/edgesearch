1
00:00:00,000 --> 00:00:05,550

2
00:00:05,550 --> 00:00:06,410
JAKE ARCHIBALD: Good
morning, everyone.

3
00:00:06,410 --> 00:00:11,140
Welcome to the offline
part of the day.

4
00:00:11,140 --> 00:00:14,570
So my involvement with all the
offline stuff started a year

5
00:00:14,570 --> 00:00:16,770
and a half ago when
I joined Lanyard.

6
00:00:16,770 --> 00:00:18,020
And when I joined Lanyard--

7
00:00:18,020 --> 00:00:25,286

8
00:00:25,286 --> 00:00:27,270
so can everyone hear me?

9
00:00:27,270 --> 00:00:27,810
Right, OK.

10
00:00:27,810 --> 00:00:28,730
I'll stay at this level.

11
00:00:28,730 --> 00:00:31,050
So a year and a half ago,
I started at Lanyard.

12
00:00:31,050 --> 00:00:34,450
When I started, they were
building an iPhone app.

13
00:00:34,450 --> 00:00:36,560
And they were doing this mainly
just to get a presence

14
00:00:36,560 --> 00:00:40,080
in the App Store, but also
because it gave them the

15
00:00:40,080 --> 00:00:42,430
opportunity to make data
available offline.

16
00:00:42,430 --> 00:00:45,000
And offline is important to
conference delegates because

17
00:00:45,000 --> 00:00:47,720
you're quite often on a plane
on the way there, so you've

18
00:00:47,720 --> 00:00:49,350
mostly got no connection
there.

19
00:00:49,350 --> 00:00:52,030
Or when you arrive in a foreign
country, you might be

20
00:00:52,030 --> 00:00:53,280
data roaming.

21
00:00:53,280 --> 00:00:56,220
So we don't want you to have to
pay a lot of money just to

22
00:00:56,220 --> 00:00:59,420
find out where the conference
is or what the sessions are.

23
00:00:59,420 --> 00:01:02,510
And even when you're at the
conference, obviously

24
00:01:02,510 --> 00:01:04,400
conferences have Wi-Fi.

25
00:01:04,400 --> 00:01:06,600
But it's a special brand of
Wi-Fi known as conference

26
00:01:06,600 --> 00:01:09,440
Wi-Fi, which is like Wi-Fi,
but it doesn't work.

27
00:01:09,440 --> 00:01:11,000
So you can't rely on
the connection.

28
00:01:11,000 --> 00:01:13,260
But obviously not everyone
has an iPhone.

29
00:01:13,260 --> 00:01:15,950
People have lots of different
kinds of devices.

30
00:01:15,950 --> 00:01:18,390
And we wanted Lanyard to
work on there as well.

31
00:01:18,390 --> 00:01:21,960
But most of these, quite a few
of these don't have an app

32
00:01:21,960 --> 00:01:24,130
platform, and we didn't have the
resource to go and build

33
00:01:24,130 --> 00:01:25,320
apps for all of then either.

34
00:01:25,320 --> 00:01:28,190
So we wanted to make a web
version of the app, and that

35
00:01:28,190 --> 00:01:30,510
was what I was there to do.

36
00:01:30,510 --> 00:01:32,140
And when I was given this task,
I was like, well, I

37
00:01:32,140 --> 00:01:34,590
really want to work offline
work in the

38
00:01:34,590 --> 00:01:35,360
web version as well.

39
00:01:35,360 --> 00:01:38,970
And I had this recollection of
this thing called AppCache.

40
00:01:38,970 --> 00:01:41,500
And I went and did some
preliminary research into it.

41
00:01:41,500 --> 00:01:42,740
And it looked really good.

42
00:01:42,740 --> 00:01:44,890
I could just add a
reference to a

43
00:01:44,890 --> 00:01:46,920
manifest on the HTML elements.

44
00:01:46,920 --> 00:01:49,090
And I could just list
all the stuff that I

45
00:01:49,090 --> 00:01:50,980
want to work offline.

46
00:01:50,980 --> 00:01:52,580
And it works.

47
00:01:52,580 --> 00:01:55,534
And I could also capture a set
of URLs, like everything that

48
00:01:55,534 --> 00:01:58,560
begins with avatars-- images,
avatars-- and then say, well,

49
00:01:58,560 --> 00:02:00,900
if you're offline, I want you
to serve that instead.

50
00:02:00,900 --> 00:02:01,830
And I was like, wow,
this sounds like

51
00:02:01,830 --> 00:02:03,330
a really good solution.

52
00:02:03,330 --> 00:02:07,330
It seemed like the API was this
big, cuddly teddy bear.

53
00:02:07,330 --> 00:02:09,892
And I kind of ran up and I
hugged the teddy bear and

54
00:02:09,892 --> 00:02:12,400
thought, together, we're going
to get through this.

55
00:02:12,400 --> 00:02:15,620
We can make the web
work offline.

56
00:02:15,620 --> 00:02:18,340
Of course it soon became obvious
that the lovely teddy

57
00:02:18,340 --> 00:02:20,520
bear that I was cuddling
was filled with

58
00:02:20,520 --> 00:02:23,970
razor blades and bees.

59
00:02:23,970 --> 00:02:27,055
And I got stung many,
many times.

60
00:02:27,055 --> 00:02:29,080
And the razor blades
dug into my skin.

61
00:02:29,080 --> 00:02:31,800
And I got the whole alphabet
of hepatitis.

62
00:02:31,800 --> 00:02:35,630
And it was a really
nasty experience.

63
00:02:35,630 --> 00:02:39,100
So you hear the word "gotcha"
a lot with AppCache.

64
00:02:39,100 --> 00:02:44,142
And the spec does seem
to do the unexpected.

65
00:02:44,142 --> 00:02:46,100
MALE SPEAKER: I think
your mic is on.

66
00:02:46,100 --> 00:02:46,620
JAKE ARCHIBALD: Ah, yeah.

67
00:02:46,620 --> 00:02:47,160
That would help.

68
00:02:47,160 --> 00:02:49,710
OK.

69
00:02:49,710 --> 00:02:50,820
Oh, that's nicer.

70
00:02:50,820 --> 00:02:55,330
OK, so when something is cached,
it will always come

71
00:02:55,330 --> 00:02:56,240
from the cache.

72
00:02:56,240 --> 00:02:58,890
If the AppCache has something to
give you, it will serve it

73
00:02:58,890 --> 00:02:59,990
straight from the cache.

74
00:02:59,990 --> 00:03:02,580
And so even if you're online,
you're going to get those

75
00:03:02,580 --> 00:03:04,230
cached assets.

76
00:03:04,230 --> 00:03:07,150
And the cache is only updated
if the manifest file itself

77
00:03:07,150 --> 00:03:09,330
changes, just a character
changes, even if that

78
00:03:09,330 --> 00:03:11,610
character is inside a comment.

79
00:03:11,610 --> 00:03:14,490
And the cache only updates if
all of the things you listed

80
00:03:14,490 --> 00:03:15,105
downloads successfully.

81
00:03:15,105 --> 00:03:21,870
If one of them 404s or 500s,
then the whole thing fails.

82
00:03:21,870 --> 00:03:25,290
I started drawing this diagram
to try and make sense of what

83
00:03:25,290 --> 00:03:27,970
AppCache was actually doing,
what the flow of information

84
00:03:27,970 --> 00:03:29,240
was, how it worked.

85
00:03:29,240 --> 00:03:32,130
And I did some talks based on
this, and I'm showing this

86
00:03:32,130 --> 00:03:33,350
diagram, going, look--

87
00:03:33,350 --> 00:03:34,670
look how terrible
that cache is.

88
00:03:34,670 --> 00:03:37,440
Look how complicated it is.

89
00:03:37,440 --> 00:03:39,700
But if you think about some code
you've written recently--

90
00:03:39,700 --> 00:03:41,950
even something fairly simple,
like, I don't know, form

91
00:03:41,950 --> 00:03:43,720
validation--

92
00:03:43,720 --> 00:03:45,940
if you drew it as
a flow chart, it

93
00:03:45,940 --> 00:03:47,160
would look like this.

94
00:03:47,160 --> 00:03:49,330
It would look this complicated,
probably more

95
00:03:49,330 --> 00:03:50,800
complicated.

96
00:03:50,800 --> 00:03:52,260
And that doesn't
make it wrong.

97
00:03:52,260 --> 00:03:54,100
And that doesn't make it
difficult to read.

98
00:03:54,100 --> 00:03:56,820
And that doesn't make
it hard to maintain.

99
00:03:56,820 --> 00:03:59,110
A lot of the gotchas that
AppCache has are actually

100
00:03:59,110 --> 00:04:00,870
quite sensible.

101
00:04:00,870 --> 00:04:03,930
So the cache is used even if
you're online, and that

102
00:04:03,930 --> 00:04:05,985
happens because it's really,
really fast.

103
00:04:05,985 --> 00:04:07,640
The exception is in fallback.

104
00:04:07,640 --> 00:04:10,050
So if it tries to request an
avatar, it's going to go to

105
00:04:10,050 --> 00:04:10,730
the network.

106
00:04:10,730 --> 00:04:12,500
And it's only going to
serve this if the

107
00:04:12,500 --> 00:04:14,950
network request fails.

108
00:04:14,950 --> 00:04:17,975
And that's really quick, in this
case, because you can go

109
00:04:17,975 --> 00:04:19,570
and get the avatar from the
network, and that's going to

110
00:04:19,570 --> 00:04:20,500
be really fast.

111
00:04:20,500 --> 00:04:23,520
It's even faster in this case
because it's going to fail

112
00:04:23,520 --> 00:04:24,840
really, really quickly.

113
00:04:24,840 --> 00:04:26,760
And you'll get the fallback
avatar instead.

114
00:04:26,760 --> 00:04:28,860
The problem case is this,
which I like to

115
00:04:28,860 --> 00:04:30,630
call the real world.

116
00:04:30,630 --> 00:04:36,080
And when your phone's in this
kind of state, it's like a

117
00:04:36,080 --> 00:04:38,670
one-legged dog.

118
00:04:38,670 --> 00:04:44,010
It thinks it can still play
fetch, but it can't.

119
00:04:44,010 --> 00:04:47,790
And you have to watch it drag
itself along the floor with

120
00:04:47,790 --> 00:04:49,750
its one leg.

121
00:04:49,750 --> 00:04:51,160
And it's heartbreaking.

122
00:04:51,160 --> 00:04:52,850
And with your phone it's really,
really irritating.

123
00:04:52,850 --> 00:04:56,800
Because you know that on the
device, on there is the data

124
00:04:56,800 --> 00:04:59,100
that is good enough
for you right now.

125
00:04:59,100 --> 00:05:00,110
But it won't give you it.

126
00:05:00,110 --> 00:05:02,620
It has to wait for minutes
before it decides it really

127
00:05:02,620 --> 00:05:04,630
can't make this connection.

128
00:05:04,630 --> 00:05:06,990
The spec doesn't really mention
offline very much.

129
00:05:06,990 --> 00:05:08,970
It only talks about connections
that succeeded or

130
00:05:08,970 --> 00:05:10,450
failed, all past tense.

131
00:05:10,450 --> 00:05:14,000
It doesn't try and predict
the state of the network.

132
00:05:14,000 --> 00:05:17,540
So cached data at first is good,
because it doesn't have

133
00:05:17,540 --> 00:05:20,730
any expectation of the network,
and that's great.

134
00:05:20,730 --> 00:05:21,660
And that's how apps behave.

135
00:05:21,660 --> 00:05:24,060
If you open Twitter on
your phone, you've

136
00:05:24,060 --> 00:05:25,200
got old data there.

137
00:05:25,200 --> 00:05:27,850
And then it goes and fetches new
data if it can, if there's

138
00:05:27,850 --> 00:05:29,950
a network connection.

139
00:05:29,950 --> 00:05:32,660
So complexity isn't
the problem here.

140
00:05:32,660 --> 00:05:33,340
What is the problem?

141
00:05:33,340 --> 00:05:35,260
Well, what is the AppCache
made of?

142
00:05:35,260 --> 00:05:37,090
There's a request cache.

143
00:05:37,090 --> 00:05:40,160
And we can add, remove, and
update items from this.

144
00:05:40,160 --> 00:05:41,410
And those updates are
transactional.

145
00:05:41,410 --> 00:05:42,060
It's all atomic.

146
00:05:42,060 --> 00:05:44,750
And it's pretty sensible.

147
00:05:44,750 --> 00:05:45,850
There's also a router.

148
00:05:45,850 --> 00:05:48,870
The router takes a network
connection and decides what it

149
00:05:48,870 --> 00:05:50,030
should do with it.

150
00:05:50,030 --> 00:05:52,180
So it can just serve stuff
straight from the cache

151
00:05:52,180 --> 00:05:55,410
without going to network, or
it can go to network, give

152
00:05:55,410 --> 00:05:57,860
that a go, and serve something
from the cache if that fails.

153
00:05:57,860 --> 00:06:00,515
And that's all quite
sensible as well.

154
00:06:00,515 --> 00:06:03,242
But what's our API into this?

155
00:06:03,242 --> 00:06:06,040
Our API is the manifest.

156
00:06:06,040 --> 00:06:08,980
So if I do this, I add
an empty manifest--

157
00:06:08,980 --> 00:06:10,870
well, just with the words
cache manifest--

158
00:06:10,870 --> 00:06:13,360
what this will do is it'll take
index.html and it will

159
00:06:13,360 --> 00:06:15,460
put that into the cache.

160
00:06:15,460 --> 00:06:17,970
And it will set up a routing
rule that says if that page is

161
00:06:17,970 --> 00:06:22,090
requested, serve it straight
from the cache.

162
00:06:22,090 --> 00:06:22,430
Really?

163
00:06:22,430 --> 00:06:24,460
Did I just tell it to
do all that, just

164
00:06:24,460 --> 00:06:27,650
with this empty file?

165
00:06:27,650 --> 00:06:29,910
Here I'm adding a lot more
static routes, and here I'm

166
00:06:29,910 --> 00:06:33,910
saying, hey, with this one line,
take fallback PNG, make

167
00:06:33,910 --> 00:06:35,930
that a cache entry, put
that into the cache.

168
00:06:35,930 --> 00:06:38,910
And if any of these URLs are
requested, set up a routing

169
00:06:38,910 --> 00:06:42,500
rule, try and fetch it from the
network first, and if that

170
00:06:42,500 --> 00:06:46,150
fails, then use this instead,
fallback PNG.

171
00:06:46,150 --> 00:06:49,630
And a failure means any HTTP
status code that starts with

172
00:06:49,630 --> 00:06:53,580
4, 404, anything that starts
with 5, or if there's a

173
00:06:53,580 --> 00:06:57,290
redirect to another domain.

174
00:06:57,290 --> 00:07:00,710
Did I really tell it to do
that with this one line?

175
00:07:00,710 --> 00:07:03,870
That's a lot of assumptions
to make.

176
00:07:03,870 --> 00:07:09,200
And if I, say, have on my HTML
page a link, an image to a

177
00:07:09,200 --> 00:07:15,630
picture of your cat from
Flickr-- do you have a cat?

178
00:07:15,630 --> 00:07:17,480
Who has a cat?

179
00:07:17,480 --> 00:07:19,910
Your cat-- good, Bruce's cat.

180
00:07:19,910 --> 00:07:22,330
What happens to the
image of that cat?

181
00:07:22,330 --> 00:07:25,220
OK, so an index.html file
is a get request.

182
00:07:25,220 --> 00:07:26,780
That's fine.

183
00:07:26,780 --> 00:07:27,960
Is it associated with manifest?

184
00:07:27,960 --> 00:07:28,530
Yes it is.

185
00:07:28,530 --> 00:07:29,670
We're going to use that.

186
00:07:29,670 --> 00:07:30,740
Is the URL AppCached?

187
00:07:30,740 --> 00:07:31,690
Yes it is.

188
00:07:31,690 --> 00:07:33,570
So it comes straight
from the cache.

189
00:07:33,570 --> 00:07:34,140
That's fine.

190
00:07:34,140 --> 00:07:34,820
Is it HTML?

191
00:07:34,820 --> 00:07:35,790
Yes it is.

192
00:07:35,790 --> 00:07:38,150
So for each get request on
the page, we're going

193
00:07:38,150 --> 00:07:38,860
to go back up here.

194
00:07:38,860 --> 00:07:40,810
And that's going to include
the picture of your cat.

195
00:07:40,810 --> 00:07:42,830
So is the URL AppCached?

196
00:07:42,830 --> 00:07:43,840
No.

197
00:07:43,840 --> 00:07:46,660
Is the URL in the network
section of the manifest?

198
00:07:46,660 --> 00:07:47,800
No.

199
00:07:47,800 --> 00:07:49,790
Does the URL match a
fallback prefix?

200
00:07:49,790 --> 00:07:50,490
No.

201
00:07:50,490 --> 00:07:52,100
We've got one for avatars
but not one for

202
00:07:52,100 --> 00:07:54,280
Bruce's cat, so no.

203
00:07:54,280 --> 00:07:56,900
Is there a star in the
network section?

204
00:07:56,900 --> 00:07:58,000
No.

205
00:07:58,000 --> 00:07:59,790
So the image will fail.

206
00:07:59,790 --> 00:08:02,040
And the picture of Bruce's
cat will not appear.

207
00:08:02,040 --> 00:08:03,850
It will appear as if there
was no network.

208
00:08:03,850 --> 00:08:07,470
Even if you're online, the
picture of that cat will fail

209
00:08:07,470 --> 00:08:08,570
to download.

210
00:08:08,570 --> 00:08:12,840
There is nothing here to me that
suggests that picture of

211
00:08:12,840 --> 00:08:15,250
Bruce's cat should not load.

212
00:08:15,250 --> 00:08:18,930
I don't know what the AppCache
has against Bruce's cat, but

213
00:08:18,930 --> 00:08:22,120
even online it's not
going to work.

214
00:08:22,120 --> 00:08:23,620
This is a downfall API.

215
00:08:23,620 --> 00:08:27,660
And by downfall, I don't mean
the shouty Hitler thing.

216
00:08:27,660 --> 00:08:29,670
I'm not suggesting AppCache
is like Hitler--

217
00:08:29,670 --> 00:08:31,820
although it is a bit.

218
00:08:31,820 --> 00:08:33,140
No, I mean the old board game.

219
00:08:33,140 --> 00:08:35,570
I don't know how people have
played this, but this is what

220
00:08:35,570 --> 00:08:37,140
I feel like when I'm dealing
with AppCache.

221
00:08:37,140 --> 00:08:38,510
I know what I'm trying to do.

222
00:08:38,510 --> 00:08:40,539
I'm trying to get my pieces
to the bottom.

223
00:08:40,539 --> 00:08:42,970
And I have a very limited set
of controls for that.

224
00:08:42,970 --> 00:08:46,060
But when I'm doing this, all
kinds of shit's happening in

225
00:08:46,060 --> 00:08:47,270
the background.

226
00:08:47,270 --> 00:08:49,940
And I don't know what's going
on until bits start falling

227
00:08:49,940 --> 00:08:53,020
out of the bottom that
I didn't expect.

228
00:08:53,020 --> 00:08:55,640
And I don't know which of my
actions actually contributed

229
00:08:55,640 --> 00:08:57,000
to that happening.

230
00:08:57,000 --> 00:08:58,400
I know the last one that
happens, but I don't

231
00:08:58,400 --> 00:09:01,790
everything that happened
before that.

232
00:09:01,790 --> 00:09:04,330
The manifest is simple in terms
of the character count,

233
00:09:04,330 --> 00:09:06,450
but there's too much implicit
going on here.

234
00:09:06,450 --> 00:09:10,000
A better API may involve more
typing but might set out

235
00:09:10,000 --> 00:09:11,870
exactly what's supposed
to happen.

236
00:09:11,870 --> 00:09:15,990
What if in your HTML you could
say, I want to register a

237
00:09:15,990 --> 00:09:18,050
JavaScript controller.

238
00:09:18,050 --> 00:09:21,010
This controllers going to take
care of all URLs on the

239
00:09:21,010 --> 00:09:22,590
origin, just slash-star.

240
00:09:22,590 --> 00:09:24,490
And here's my JavaScript file.

241
00:09:24,490 --> 00:09:26,050
And that was going to run
in some kind of worker.

242
00:09:26,050 --> 00:09:29,770
And here I could just say, so
for all these files, when the

243
00:09:29,770 --> 00:09:32,130
cache is supposed to update
itself, I want you to define a

244
00:09:32,130 --> 00:09:34,510
cache called static, and I want
you to cache all of those

245
00:09:34,510 --> 00:09:36,990
static URLs and do
it atomically.

246
00:09:36,990 --> 00:09:40,040
And then when there's a request,
I want you to have a

247
00:09:40,040 --> 00:09:42,970
look and see in the static cache
if there's something

248
00:09:42,970 --> 00:09:44,520
that matches the incoming URL.

249
00:09:44,520 --> 00:09:46,560
And if there is a resource,
prevent default.

250
00:09:46,560 --> 00:09:48,720
Don't do the default
browser action.

251
00:09:48,720 --> 00:09:51,160
Respond with that resource
from the cache.

252
00:09:51,160 --> 00:09:56,075
This is a lot more typing than
the equivalent that you did in

253
00:09:56,075 --> 00:09:58,250
the manifest, but it's
really explicit.

254
00:09:58,250 --> 00:10:01,070
You're setting up exactly
what you want to happen.

255
00:10:01,070 --> 00:10:04,180
There's no magic here.

256
00:10:04,180 --> 00:10:05,960
You can define your own magic.

257
00:10:05,960 --> 00:10:08,950
This is a bring your
own unicorn API.

258
00:10:08,950 --> 00:10:11,580
You do all that stuff
yourself.

259
00:10:11,580 --> 00:10:14,040
What if I could say, OK, I'm
going to set up a route for

260
00:10:14,040 --> 00:10:15,130
get requests.

261
00:10:15,130 --> 00:10:18,670
Anything that starts with
avatars, prevent the default.

262
00:10:18,670 --> 00:10:20,610
I want you to try and get
it from the network.

263
00:10:20,610 --> 00:10:23,860
But on an error, I want you to
see if we've got something,

264
00:10:23,860 --> 00:10:26,220
the fallback PNG in
the resource.

265
00:10:26,220 --> 00:10:27,700
And if there is, I'm
going to serve it.

266
00:10:27,700 --> 00:10:29,200
So that's the equivalent of
your fallback, but you're

267
00:10:29,200 --> 00:10:32,580
telling it exactly what to do.

268
00:10:32,580 --> 00:10:36,000
What if I could listen to
messages from the web page

269
00:10:36,000 --> 00:10:36,640
that's happening?

270
00:10:36,640 --> 00:10:39,210
So imagine something like DFT,
where there's issues.

271
00:10:39,210 --> 00:10:41,760
And the user might have said,
I want to cache this issue.

272
00:10:41,760 --> 00:10:44,140
So he posted a message saying,
cache the issue.

273
00:10:44,140 --> 00:10:44,740
And [INAUDIBLE]

274
00:10:44,740 --> 00:10:47,240
receives that, caches define
issue, and then the issue

275
00:10:47,240 --> 00:10:49,620
number, and the URLs
to cache for that.

276
00:10:49,620 --> 00:10:52,280
And then when those requests
come in, anything that's URL

277
00:10:52,280 --> 00:10:54,440
issue and a number, we're
going to deal with that.

278
00:10:54,440 --> 00:10:57,080
We're going to say get me the
cache for that issue.

279
00:10:57,080 --> 00:11:00,240
If we have that cached and we
have a URL inside that cache

280
00:11:00,240 --> 00:11:02,950
that matches what's being
requested, serve it.

281
00:11:02,950 --> 00:11:05,820
Otherwise, if the request type
is a navigate, as in, someone

282
00:11:05,820 --> 00:11:08,490
is changing page, it's going to
be a full reload, prevent

283
00:11:08,490 --> 00:11:09,220
the default.

284
00:11:09,220 --> 00:11:09,850
Respond--

285
00:11:09,850 --> 00:11:12,570
try and fetch it from the
network as normal.

286
00:11:12,570 --> 00:11:14,820
And if that fails, and the
status code was zero, which

287
00:11:14,820 --> 00:11:18,380
suggests a lack of network
connection, then serve a thing

288
00:11:18,380 --> 00:11:20,880
from the cache saying, no, I'm
afraid you don't have that

289
00:11:20,880 --> 00:11:22,520
issue cached, here's why.

290
00:11:22,520 --> 00:11:25,800
And that's something we can't
do with AppCache now.

291
00:11:25,800 --> 00:11:28,810
Maybe you could do stuff like
get stuff from local storage

292
00:11:28,810 --> 00:11:31,170
and then use Mustache to
render it, or whatever

293
00:11:31,170 --> 00:11:32,840
templating language
you included.

294
00:11:32,840 --> 00:11:35,470
We could just completely build
an app up from this experience

295
00:11:35,470 --> 00:11:37,560
and completely define how
it should behave.

296
00:11:37,560 --> 00:11:39,690
So even someone who is
unfamiliar with the API would

297
00:11:39,690 --> 00:11:41,370
have a good idea of
what it's doing.

298
00:11:41,370 --> 00:11:42,910
They wouldn't have to read a
whole spec to understand

299
00:11:42,910 --> 00:11:43,990
what's going on.

300
00:11:43,990 --> 00:11:46,960
What if we could do that?

301
00:11:46,960 --> 00:11:48,650
And I think that's what we're
going to discuss, or

302
00:11:48,650 --> 00:11:51,840
things around it.

303
00:11:51,840 --> 00:11:53,854
I don't how this transition--
you have to clap.

304
00:11:53,854 --> 00:12:10,270
[APPLAUSE]

305
00:12:10,270 --> 00:12:11,175
JAKE ARCHIBALD: Watch
out, watch out.

306
00:12:11,175 --> 00:12:13,012
I think that's Andrew's
seat, isn't it?

307
00:12:13,012 --> 00:12:21,880

308
00:12:21,880 --> 00:12:24,230
ANDREW BETTIS: Right.

309
00:12:24,230 --> 00:12:28,440
So I realized when Jake started
that I completely

310
00:12:28,440 --> 00:12:30,100
forgot to big up all
the people on the

311
00:12:30,100 --> 00:12:32,150
panel before we started.

312
00:12:32,150 --> 00:12:37,640
So we have Jake, who's obviously
just given his talk.

313
00:12:37,640 --> 00:12:40,000
He's now developed relations
for Google,

314
00:12:40,000 --> 00:12:41,820
formerly from Lanyard.

315
00:12:41,820 --> 00:12:46,090
Mark Christian from Twitter,
who also created one of the

316
00:12:46,090 --> 00:12:49,986
first informative sites about
AppCache, appcachefacts.info.

317
00:12:49,986 --> 00:12:54,860
Alex Russell, also from Google,
who is co-author of

318
00:12:54,860 --> 00:12:58,080
the proposal that Jake was just
talking about, with the

319
00:12:58,080 --> 00:13:00,210
navigation controller.

320
00:13:00,210 --> 00:13:03,350
And Jonas Sicking from Mozilla,
who has very kindly

321
00:13:03,350 --> 00:13:05,310
signed up at the very last
minute to replace [INAUDIBLE]

322
00:13:05,310 --> 00:13:07,850
Tobie Langel, who's
unfortunately unable to make

323
00:13:07,850 --> 00:13:10,020
it because he's ill.

324
00:13:10,020 --> 00:13:11,600
So let's get started.

325
00:13:11,600 --> 00:13:14,430

326
00:13:14,430 --> 00:13:17,980
So we have loads of questions
in moderator about offline.

327
00:13:17,980 --> 00:13:22,590
And I think the most burning
one for me, and I think the

328
00:13:22,590 --> 00:13:28,900
one that's most relevant to
DFT is why is there such a

329
00:13:28,900 --> 00:13:30,830
constraint on what we
can do offline?

330
00:13:30,830 --> 00:13:35,340
Why do we have such tiny limits
on what we can store?

331
00:13:35,340 --> 00:13:38,490
And is this a problem that we
need to solve at the spec

332
00:13:38,490 --> 00:13:44,830
level, or do we need an entire
new technology to solve it?

333
00:13:44,830 --> 00:13:46,520
Jake, why don't you start?

334
00:13:46,520 --> 00:13:50,730
JAKE ARCHIBALD: OK, so if you're
building something,

335
00:13:50,730 --> 00:13:52,490
it's going to be running
on multiple devices.

336
00:13:52,490 --> 00:13:57,040
So you can't make too many
expectations of the amount of

337
00:13:57,040 --> 00:13:59,660
data that you would be able to
store on a particular device.

338
00:13:59,660 --> 00:14:02,260
That said, one of the things
we were looking at is the

339
00:14:02,260 --> 00:14:07,330
ability to request a
permanent cache.

340
00:14:07,330 --> 00:14:08,920
Because one of the problems
we've got with the current

341
00:14:08,920 --> 00:14:12,968
cache is the browser may
object at any point.

342
00:14:12,968 --> 00:14:14,844
Has my microphone
gone off again?

343
00:14:14,844 --> 00:14:15,782
Oh, whatever.

344
00:14:15,782 --> 00:14:18,000
So the browser can just get
rid of it at any point.

345
00:14:18,000 --> 00:14:19,250
Oh, hello.

346
00:14:19,250 --> 00:14:21,680

347
00:14:21,680 --> 00:14:25,920
So what AppCache gives you is
it says, one of these assets

348
00:14:25,920 --> 00:14:27,560
is not going to be ejected
from the cache.

349
00:14:27,560 --> 00:14:29,540
If anything's going to be
ejected, they're all going to

350
00:14:29,540 --> 00:14:30,670
be ejected together.

351
00:14:30,670 --> 00:14:32,620
And the spec doesn't say that
this stuff's going to be

352
00:14:32,620 --> 00:14:33,980
around forever.

353
00:14:33,980 --> 00:14:36,740
So the idea is if we could
make it where you would

354
00:14:36,740 --> 00:14:40,550
request a permanent cache, maybe
of a particular size,

355
00:14:40,550 --> 00:14:42,250
then you could do
that and that.

356
00:14:42,250 --> 00:14:45,340
And because a user would agree
to give you that, they are

357
00:14:45,340 --> 00:14:47,700
also now in control of
uninstalling something.

358
00:14:47,700 --> 00:14:51,210
So if there is a lack of space,
like they run out of

359
00:14:51,210 --> 00:14:54,090
space on their phone, then it's
down to them to decide

360
00:14:54,090 --> 00:14:55,910
what to keep and what to lose.

361
00:14:55,910 --> 00:14:59,930
So they might go and say, well,
this small FT app is

362
00:14:59,930 --> 00:15:02,970
very important to me, whereas
these big game apps are not.

363
00:15:02,970 --> 00:15:05,000
And it's their decision
of what to do?

364
00:15:05,000 --> 00:15:08,870
ANDREW BETTIS: So what's the
limit on what's reasonable?

365
00:15:08,870 --> 00:15:11,490
What's reasonable for an app
to acclaim for its own

366
00:15:11,490 --> 00:15:13,770
exclusive use?

367
00:15:13,770 --> 00:15:14,650
ALE RUSSELL: How is
that a question

368
00:15:14,650 --> 00:15:16,631
for the app to answer?

369
00:15:16,631 --> 00:15:18,940
It's usually a question for
the user to answer.

370
00:15:18,940 --> 00:15:21,950
This is about the user agent
mediating the conversation

371
00:15:21,950 --> 00:15:25,972
between the app developer and
the user, who is the owner of

372
00:15:25,972 --> 00:15:26,880
the device.

373
00:15:26,880 --> 00:15:29,670
And so you're trying to enable
that conversation to happen in

374
00:15:29,670 --> 00:15:31,340
an informed way.

375
00:15:31,340 --> 00:15:32,960
And usually that doesn't
mean, can I

376
00:15:32,960 --> 00:15:35,010
have some bit of storage.

377
00:15:35,010 --> 00:15:37,810
It's usually did I mean
to install this thing?

378
00:15:37,810 --> 00:15:39,810
Did I mean to turn this into
a real thing that's not an

379
00:15:39,810 --> 00:15:42,942
ephemeral page that I happen
to load and unload.

380
00:15:42,942 --> 00:15:46,380
The question is, have my
expectations been violated by

381
00:15:46,380 --> 00:15:48,475
navigating naked
to a web page.

382
00:15:48,475 --> 00:15:50,455
Did that imply that
100 megabytes was

383
00:15:50,455 --> 00:15:53,010
taken on disk per page?

384
00:15:53,010 --> 00:15:55,948
If I'm going to Facebook every
day, maybe it does.

385
00:15:55,948 --> 00:15:57,065
Maybe that's a reasonable
thing to do.

386
00:15:57,065 --> 00:15:59,310
If I go to Twitter and I like
to see all my history, maybe

387
00:15:59,310 --> 00:16:00,680
that's the most reasonable
thing I

388
00:16:00,680 --> 00:16:01,780
could possibly imagine.

389
00:16:01,780 --> 00:16:04,670
But that's a decision that
I as a user should be

390
00:16:04,670 --> 00:16:05,790
at least part of.

391
00:16:05,790 --> 00:16:08,000
And so today we don't have
that way to mediate it.

392
00:16:08,000 --> 00:16:09,810
And so I [INAUDIBLE]

393
00:16:09,810 --> 00:16:14,892
there was an additional proposal
yesterday that Jonas

394
00:16:14,892 --> 00:16:18,625
and others at Mozilla were
working on to layer on top of

395
00:16:18,625 --> 00:16:24,360
this API that we have shown a
little bit of, the idea of a

396
00:16:24,360 --> 00:16:29,550
more declarative manifest that
has more to say about what the

397
00:16:29,550 --> 00:16:32,910
thing is that you would
take an action on.

398
00:16:32,910 --> 00:16:37,300
JONAS SICKING: There's
a few things here.

399
00:16:37,300 --> 00:16:40,131
First of all, you shouldn't
think of the web as being

400
00:16:40,131 --> 00:16:41,600
different from native
applications.

401
00:16:41,600 --> 00:16:44,170
Native applications, once you
install a native application,

402
00:16:44,170 --> 00:16:45,803
it can write as much
as it wants.

403
00:16:45,803 --> 00:16:48,885
Why should the web not be able
to do that, assuming the

404
00:16:48,885 --> 00:16:49,850
user's fine with it.

405
00:16:49,850 --> 00:16:53,852
So we need to have some way of
communicating between the

406
00:16:53,852 --> 00:16:59,540
application and the user that
the user thinks this website

407
00:16:59,540 --> 00:17:05,858
is important and then wants to
enable it to store data on the

408
00:17:05,858 --> 00:17:08,490
local device.

409
00:17:08,490 --> 00:17:13,539
So that is really something
we would need to enable.

410
00:17:13,539 --> 00:17:17,510
Google actually has some
interesting ideas here in the

411
00:17:17,510 --> 00:17:17,970
[INAUDIBLE]

412
00:17:17,970 --> 00:17:21,329
API, where they have this
concept of temporary storage

413
00:17:21,329 --> 00:17:22,609
and permanent storage.

414
00:17:22,609 --> 00:17:25,770
That concept is something we
are working on expanding so

415
00:17:25,770 --> 00:17:29,665
you can use that storage area to
store essentially anything

416
00:17:29,665 --> 00:17:31,915
that you can store locally, you
can choose to [INAUDIBLE]

417
00:17:31,915 --> 00:17:33,650
store permanently
or temporary.

418
00:17:33,650 --> 00:17:35,750
And the user can then
be involved.

419
00:17:35,750 --> 00:17:38,980
And we can also use heuristics
in the browser.

420
00:17:38,980 --> 00:17:42,405
Like, if we know that the user
is using a website a lot, we

421
00:17:42,405 --> 00:17:45,145
can grant that website more
implicit storage, and we can

422
00:17:45,145 --> 00:17:48,250
be more careful about when
we eject that data.

423
00:17:48,250 --> 00:17:51,180
Or we can also enable the
website to say, I want to

424
00:17:51,180 --> 00:17:52,610
really lock this down.

425
00:17:52,610 --> 00:17:56,080
And then once the user's OK with
that, we can guarantee

426
00:17:56,080 --> 00:17:58,014
that certain data is
available offline.

427
00:17:58,014 --> 00:18:01,970
So the goal should really be
that anything that native

428
00:18:01,970 --> 00:18:04,590
applications can do when it
comes to sorting data locally,

429
00:18:04,590 --> 00:18:05,520
the web should be able to do.

430
00:18:05,520 --> 00:18:09,640
And that shouldn't be
hard to accomplish.

431
00:18:09,640 --> 00:18:13,310
ANDREW BETTIS: Is it currently
a problem that a user giving

432
00:18:13,310 --> 00:18:18,170
explicit consent to store
something as an explicit

433
00:18:18,170 --> 00:18:20,090
intention to store, but
then the browser can

434
00:18:20,090 --> 00:18:21,660
implicitly purge it?

435
00:18:21,660 --> 00:18:25,340
Is that a bug, do you think,
currently in implementation?

436
00:18:25,340 --> 00:18:27,900
Should it be the case that
anything that's explicitly

437
00:18:27,900 --> 00:18:31,665
given permission to be stored
should be explicitly removed

438
00:18:31,665 --> 00:18:33,300
by the user?

439
00:18:33,300 --> 00:18:38,280
JONAS SICKING: I think we need
to enable the scenario where

440
00:18:38,280 --> 00:18:41,000
you're guaranteed that
something is wrong.

441
00:18:41,000 --> 00:18:45,940
The only way to guarantee that
something is wrong is to take

442
00:18:45,940 --> 00:18:49,322
up storage on the user's device,
which means taking

443
00:18:49,322 --> 00:18:50,830
resource away from the user.

444
00:18:50,830 --> 00:18:53,180
And so the user needs to be
involved in that decision.

445
00:18:53,180 --> 00:18:56,370
But in many cases, you don't
need that level of guarantee.

446
00:18:56,370 --> 00:19:00,730
And you could probably build
pretty good heuristics so that

447
00:19:00,730 --> 00:19:03,230
things mostly work without
the user being involved.

448
00:19:03,230 --> 00:19:08,760
But I also think that we need
to enable websites to say,

449
00:19:08,760 --> 00:19:10,780
hey, I really want to be able to
guarantee this to the user,

450
00:19:10,780 --> 00:19:13,230
in which case we can
have interaction.

451
00:19:13,230 --> 00:19:15,090
We can have a security
dialogue.

452
00:19:15,090 --> 00:19:18,710
But as long as we make that
flow nice and don't ask--

453
00:19:18,710 --> 00:19:24,340
like Firefox currently does,
asks you three times before it

454
00:19:24,340 --> 00:19:26,400
grants you that permission.

455
00:19:26,400 --> 00:19:29,570
It should be within the control
of the website when to

456
00:19:29,570 --> 00:19:30,420
ask the user.

457
00:19:30,420 --> 00:19:32,250
And it should only
be one question.

458
00:19:32,250 --> 00:19:34,773
The user should just say, yeah,
I'm OK with giving this

459
00:19:34,773 --> 00:19:37,551
website a little bit
more information.

460
00:19:37,551 --> 00:19:41,240
And we shouldn't need to ask
about individual [INAUDIBLE].

461
00:19:41,240 --> 00:19:43,450
ANDREW BETTIS: So can
I just a quick poll?

462
00:19:43,450 --> 00:19:46,130
Who here has run out of space
when they were building an

463
00:19:46,130 --> 00:19:48,840
offline app?

464
00:19:48,840 --> 00:19:51,670
So we have a few
people who've--

465
00:19:51,670 --> 00:19:53,630
OK, interesting.

466
00:19:53,630 --> 00:19:55,880
ALEX RUSSELL: I think it's
also a UX issue.

467
00:19:55,880 --> 00:19:58,670
There's the what is it
that I'm doing here?

468
00:19:58,670 --> 00:20:01,790
Are we going to ask users
honestly to go reason about

469
00:20:01,790 --> 00:20:05,070
their storage independently of
what the application is?

470
00:20:05,070 --> 00:20:07,530
I don't think that people,
generally speaking-- certainly

471
00:20:07,530 --> 00:20:13,220
not the app platform models
that we have today--

472
00:20:13,220 --> 00:20:15,690
I don't think people reason
about them independently.

473
00:20:15,690 --> 00:20:17,390
You have an application, and
that means that you have its

474
00:20:17,390 --> 00:20:19,320
data as well.

475
00:20:19,320 --> 00:20:22,300
And we don't really have a
reified idea of what an

476
00:20:22,300 --> 00:20:23,990
application is.

477
00:20:23,990 --> 00:20:28,180
That's the thing that we don't
have, as a unit of something

478
00:20:28,180 --> 00:20:30,130
that we can communicate
to end users today.

479
00:20:30,130 --> 00:20:32,680
And Mozilla's building an app
platform, and we're building

480
00:20:32,680 --> 00:20:33,480
an app platform.

481
00:20:33,480 --> 00:20:35,990
And they helped unify
that concept.

482
00:20:35,990 --> 00:20:38,420
And it feels to me like
helping to make that

483
00:20:38,420 --> 00:20:41,600
transition from I've got a page
to look, it's also an

484
00:20:41,600 --> 00:20:42,160
application--

485
00:20:42,160 --> 00:20:45,840
I think that's really the big
transition for everyone who's

486
00:20:45,840 --> 00:20:48,060
building apps, both conceptually
as you're

487
00:20:48,060 --> 00:20:51,230
building them and for users
who are consuming them.

488
00:20:51,230 --> 00:20:53,200
I'd like to talk more at some
point about what it means to

489
00:20:53,200 --> 00:20:55,780
transition as a builder thinking
about an app--

490
00:20:55,780 --> 00:20:57,080
ANDREW BETTIS: Well, your
microphone's not working.

491
00:20:57,080 --> 00:20:58,510
So next time you want to speak,
just let me know.

492
00:20:58,510 --> 00:21:01,940
And you can speak into mine.

493
00:21:01,940 --> 00:21:02,850
MALE SPEAKER: His
mic works fine.

494
00:21:02,850 --> 00:21:04,666
But he can't talk over his
shoulder to Andrew.

495
00:21:04,666 --> 00:21:06,940
He's got to talk directly
[INAUDIBLE].

496
00:21:06,940 --> 00:21:07,840
ALEX RUSSELL: Sorry
about that.

497
00:21:07,840 --> 00:21:09,500
MARK CHRISTIAN: So I think that
part of the problem with

498
00:21:09,500 --> 00:21:13,150
the situation right now is that
web applications feel a

499
00:21:13,150 --> 00:21:14,990
little bit different than
websites, but they're all

500
00:21:14,990 --> 00:21:16,440
running in the same universe.

501
00:21:16,440 --> 00:21:18,270
And when you're building an
application, you want to have

502
00:21:18,270 --> 00:21:21,090
quite a bit of control over
how you're storing your

503
00:21:21,090 --> 00:21:23,710
resources and managing the
user data, whereas

504
00:21:23,710 --> 00:21:26,460
historically, web APIs have been
more like suggestions to

505
00:21:26,460 --> 00:21:27,180
the user agent.

506
00:21:27,180 --> 00:21:30,940
It's up to the user agent to
interpret what's going on and

507
00:21:30,940 --> 00:21:32,840
deal with it appropriately.

508
00:21:32,840 --> 00:21:35,230
AppCache demonstrates that
there's a lot of assumptions

509
00:21:35,230 --> 00:21:37,040
built into that that don't
always work, and it makes it

510
00:21:37,040 --> 00:21:38,995
difficult to have a consistent
experience.

511
00:21:38,995 --> 00:21:41,880
So I think part of the problem
is actually philosophical.

512
00:21:41,880 --> 00:21:46,220
As we go forward and build a new
API, how much control do

513
00:21:46,220 --> 00:21:48,300
we want to let these
applications have?

514
00:21:48,300 --> 00:21:50,420
And it's a trust
issue as well.

515
00:21:50,420 --> 00:21:53,610
Going to a random website, how
much trust does that actually

516
00:21:53,610 --> 00:21:55,630
imply that user has?

517
00:21:55,630 --> 00:21:58,120
JAKE ARCHIBALD: I think we could
spend the whole of today

518
00:21:58,120 --> 00:22:00,000
trying to work out what the
difference between a website

519
00:22:00,000 --> 00:22:00,730
and a web app is.

520
00:22:00,730 --> 00:22:04,270
And I think at the end of it,
we'd say, well, does it

521
00:22:04,270 --> 00:22:06,150
actually matter?

522
00:22:06,150 --> 00:22:10,480
Once we've made that decision,
what would we do differently?

523
00:22:10,480 --> 00:22:14,560
So I think this API we're making
now would work fine for

524
00:22:14,560 --> 00:22:18,540
sites and work fine for apps.

525
00:22:18,540 --> 00:22:21,430
What do you see as the
difference between the two?

526
00:22:21,430 --> 00:22:24,130
MARK CHRISTIAN: Probably
persistence of storage and

527
00:22:24,130 --> 00:22:25,600
amount of storage.

528
00:22:25,600 --> 00:22:26,690
Those are the characteristics.

529
00:22:26,690 --> 00:22:29,870
Do you want a random website to
be able to dump a gigabyte

530
00:22:29,870 --> 00:22:31,580
of data onto your hard drive?

531
00:22:31,580 --> 00:22:32,510
JAKE ARCHIBALD: Well, I might
if it's Wikipedia.

532
00:22:32,510 --> 00:22:35,015
I might want to download
Wikipedia as a site.

533
00:22:35,015 --> 00:22:36,060
MARK CHRISTIAN: Yeah,
I might too.

534
00:22:36,060 --> 00:22:39,390
But there's no good model for
letting a user illustrate that

535
00:22:39,390 --> 00:22:40,868
that's actually what
they really wanted.

536
00:22:40,868 --> 00:22:43,485

537
00:22:43,485 --> 00:22:46,680
JONAS SICKING: I think one
problem we have is that

538
00:22:46,680 --> 00:22:51,869
historically websites have been
these things where, as a

539
00:22:51,869 --> 00:22:54,720
browser, we treat them as--
we have no idea if this is

540
00:22:54,720 --> 00:22:56,280
something that the user
actually likes.

541
00:22:56,280 --> 00:22:59,540
It might be just some random
website that the user found

542
00:22:59,540 --> 00:23:01,520
through a link in
a spam email.

543
00:23:01,520 --> 00:23:04,820
And so we have this very
distrusting relationship of

544
00:23:04,820 --> 00:23:05,700
the website.

545
00:23:05,700 --> 00:23:09,915
And as we're trying to expand
the web into being able to do

546
00:23:09,915 --> 00:23:14,810
more things, we have to enable
the user to indicate, I

547
00:23:14,810 --> 00:23:16,510
actually trust this website.

548
00:23:16,510 --> 00:23:18,440
I actually enjoy this website.

549
00:23:18,440 --> 00:23:22,750
I want this website to be able
to do things that [INAUDIBLE]

550
00:23:22,750 --> 00:23:24,160
shouldn't be able to do.

551
00:23:24,160 --> 00:23:28,780
So we need some way, some
UX to enable the user to

552
00:23:28,780 --> 00:23:32,670
communicate to the browser that,
hey, it's OK for this

553
00:23:32,670 --> 00:23:37,550
website to get some extra
capabilities.

554
00:23:37,550 --> 00:23:41,960
So one way of doing this is
app platforms that both

555
00:23:41,960 --> 00:23:47,290
Firefox and Chrome OS is having,
which enables the

556
00:23:47,290 --> 00:23:49,905
users to go through this install
flow, at which point,

557
00:23:49,905 --> 00:23:54,760
you indicated that yeah, I trust
this website enough that

558
00:23:54,760 --> 00:23:56,490
I have installed it.

559
00:23:56,490 --> 00:23:59,560
We should enable those
capabilities not just through

560
00:23:59,560 --> 00:24:02,892
install flow but also through
other means where it's still a

561
00:24:02,892 --> 00:24:07,150
website, UX-wise, but you've
indicated some other way that

562
00:24:07,150 --> 00:24:10,160
it's OK for this guy to
use more resources.

563
00:24:10,160 --> 00:24:14,290
The two things in Firefox OS
that we're giving a website

564
00:24:14,290 --> 00:24:17,535
once it's installed is ability
to use resources and ability

565
00:24:17,535 --> 00:24:18,760
to annoy the user.

566
00:24:18,760 --> 00:24:23,140
So on the web, we built
pop-up blockers.

567
00:24:23,140 --> 00:24:26,400
We tried to disable this ability
of disabling the

568
00:24:26,400 --> 00:24:27,380
context menu.

569
00:24:27,380 --> 00:24:29,790
And a lot of the things that
it's really nice if the good

570
00:24:29,790 --> 00:24:32,120
guys can do but we don't want
the bad guys to do.

571
00:24:32,120 --> 00:24:38,030
And so if we can have some way
to use UX to indicate that

572
00:24:38,030 --> 00:24:41,100
this website should be able to
do things, then we can enable

573
00:24:41,100 --> 00:24:42,650
much more [INAUDIBLE].

574
00:24:42,650 --> 00:24:47,130
ANDREW BETTIS: Do you think that
using app runtimes as a

575
00:24:47,130 --> 00:24:51,230
solution to offline problems
is good enough?

576
00:24:51,230 --> 00:24:53,940
Or do you think that we ought
to be able to solve these

577
00:24:53,940 --> 00:24:56,680
problems without using
app runtime?

578
00:24:56,680 --> 00:24:58,290
JONAS SICKING: I think app
runtimes is a good way for us

579
00:24:58,290 --> 00:25:03,100
to experiment, but
it's an easy out.

580
00:25:03,100 --> 00:25:06,390
We have this traditional sense
of what an application is.

581
00:25:06,390 --> 00:25:11,320
And traditional users know what
it means to install an

582
00:25:11,320 --> 00:25:14,525
application, as far as I know
that this enables this

583
00:25:14,525 --> 00:25:17,120
application to do more things.

584
00:25:17,120 --> 00:25:20,080
I shouldn't install
it if I hate it.

585
00:25:20,080 --> 00:25:23,520
So it gives us an easy
out, but it's

586
00:25:23,520 --> 00:25:25,415
definitely not good enough.

587
00:25:25,415 --> 00:25:29,430
There needs to be a fluid
transition from being a

588
00:25:29,430 --> 00:25:32,760
potentially evil spam website
that the user has navigated to

589
00:25:32,760 --> 00:25:35,100
being a fully-trusted
installed app.

590
00:25:35,100 --> 00:25:36,330
It's a smooth transition.

591
00:25:36,330 --> 00:25:39,580
And the user, as you're slowly
getting more and more familiar

592
00:25:39,580 --> 00:25:41,990
with the website, it shouldn't
be a hard path.

593
00:25:41,990 --> 00:25:44,980
It should be, you trust it more
and more, and it gets

594
00:25:44,980 --> 00:25:47,002
more and more capabilities as
the user gives it more and

595
00:25:47,002 --> 00:25:49,591
more trust.

596
00:25:49,591 --> 00:25:53,430
App runtimes is definitely
not enough of an answer.

597
00:25:53,430 --> 00:25:54,760
JAKE ARCHIBALD: Yeah, we've been
through that same problem

598
00:25:54,760 --> 00:25:56,490
before with Flash.

599
00:25:56,490 --> 00:25:59,060
I mean, we went for so long with
not adding these APIs to

600
00:25:59,060 --> 00:26:01,840
HTML, saying, oh, if you want
those kind of capabilities, do

601
00:26:01,840 --> 00:26:02,900
it in a plug-in.

602
00:26:02,900 --> 00:26:04,970
And we're seeing the same again
with, oh, if you want

603
00:26:04,970 --> 00:26:07,040
those kind of things, just
do it in an app.

604
00:26:07,040 --> 00:26:10,340
We shouldn't let that stop us
making the platform better.

605
00:26:10,340 --> 00:26:14,080
ANDREW BETTIS: Jake and Alex,
you're proposing actually a

606
00:26:14,080 --> 00:26:18,460
controller that gives the
developer a lot of flexibility

607
00:26:18,460 --> 00:26:21,953
over how they respond to
offline situations.

608
00:26:21,953 --> 00:26:24,530

609
00:26:24,530 --> 00:26:27,320
There's a great question in
Moderator which is, how would

610
00:26:27,320 --> 00:26:30,280
you propose to use that
to handle the

611
00:26:30,280 --> 00:26:32,266
one-legged dog scenario?

612
00:26:32,266 --> 00:26:37,910
ALEX RUSSELL: So I think
the answer to this is--

613
00:26:37,910 --> 00:26:40,850
it's a little bit circuitous,
so stick with me.

614
00:26:40,850 --> 00:26:43,100
The way AppCache works,
generally speaking, when it

615
00:26:43,100 --> 00:26:47,500
works, is to help you take the
shell of an application, the

616
00:26:47,500 --> 00:26:49,640
thing that will load content
and then display it to you

617
00:26:49,640 --> 00:26:52,730
while your offline, package that
up, and make it available

618
00:26:52,730 --> 00:26:54,390
to you at all points.

619
00:26:54,390 --> 00:26:56,920
What Jake showed you was a great
way for you to package

620
00:26:56,920 --> 00:27:00,890
up the shell of a content
application using AppCache.

621
00:27:00,890 --> 00:27:04,910
There's a related question,
which is inflated by the API

622
00:27:04,910 --> 00:27:07,520
of AppCache, unfortunately,
which is, how do I then deal

623
00:27:07,520 --> 00:27:10,010
with the content that I'm
loading inside this shell?

624
00:27:10,010 --> 00:27:11,850
Because every app you
load in native

625
00:27:11,850 --> 00:27:12,995
environment has this duality.

626
00:27:12,995 --> 00:27:15,520
I've got shell, and I've got a
library of content that I'm

627
00:27:15,520 --> 00:27:16,400
navigating.

628
00:27:16,400 --> 00:27:17,730
And if you think about the way
you're building things on the

629
00:27:17,730 --> 00:27:19,680
server, you do exactly
the same thing.

630
00:27:19,680 --> 00:27:24,120
You've got this node graph of
content that you're allowing

631
00:27:24,120 --> 00:27:25,890
users to transition through,
and they're

632
00:27:25,890 --> 00:27:27,510
all mapped to URLs.

633
00:27:27,510 --> 00:27:29,400
But you usually take the little
bit of content that's

634
00:27:29,400 --> 00:27:32,670
unique to that URL, and you
smash a gigantic template

635
00:27:32,670 --> 00:27:34,610
thing around it, and you spit
it all out as a string, and

636
00:27:34,610 --> 00:27:37,160
then you rehydrate it
on the client side.

637
00:27:37,160 --> 00:27:39,185
But that isn't what the URL
is really addressing.

638
00:27:39,185 --> 00:27:41,500
The URL addresses that little
bit of content, that unique

639
00:27:41,500 --> 00:27:44,640
bit of indivisible content
that you're

640
00:27:44,640 --> 00:27:45,700
serving at that URL.

641
00:27:45,700 --> 00:27:49,390
And it may be multiple nodes all
joined into one particular

642
00:27:49,390 --> 00:27:50,020
serialization.

643
00:27:50,020 --> 00:27:52,610
But that's sort of the idea.

644
00:27:52,610 --> 00:27:55,530
So the question is, how do
we enable people to build

645
00:27:55,530 --> 00:27:59,650
application architectures
offline, which easily give you

646
00:27:59,650 --> 00:28:03,080
that shell and the ability to
cache resources which you will

647
00:28:03,080 --> 00:28:05,140
load inside that shell, so that
you can discover them, so

648
00:28:05,140 --> 00:28:06,580
you can load them, you can
provide the fallback

649
00:28:06,580 --> 00:28:08,060
experience if you
don't have them.

650
00:28:08,060 --> 00:28:11,560
Today, AppCache rolls them
all into one manifest.

651
00:28:11,560 --> 00:28:14,190
Because today, if you actually
take the AppCache to its

652
00:28:14,190 --> 00:28:16,350
logical conclusion, what you
realize at the end of this

653
00:28:16,350 --> 00:28:18,870
long, painful journey-- which
Jake took, and which the Gmail

654
00:28:18,870 --> 00:28:21,160
team took, and which a lot of
people who have been building

655
00:28:21,160 --> 00:28:23,130
offline apps have taken
independently--

656
00:28:23,130 --> 00:28:24,900
is that AppCache is the
thing that you use

657
00:28:24,900 --> 00:28:26,000
to cache the shell.

658
00:28:26,000 --> 00:28:28,920
And for all other content, which
you would have liked to

659
00:28:28,920 --> 00:28:31,650
have given a nice URL, what you
do is you build an ad hoc

660
00:28:31,650 --> 00:28:34,410
synchronization protocol, you
put it in Web SQL Database or

661
00:28:34,410 --> 00:28:36,120
IndexDB or local storage.

662
00:28:36,120 --> 00:28:38,620
And then every time someone
navigates to that URL, you try

663
00:28:38,620 --> 00:28:41,280
to override what the browser
was going to do to navigate

664
00:28:41,280 --> 00:28:44,120
you, go get it out of the local
storage if you have it,

665
00:28:44,120 --> 00:28:45,600
and then perform your
own synchronization

666
00:28:45,600 --> 00:28:46,450
on that data model.

667
00:28:46,450 --> 00:28:48,930
So you have a data model which
is not represented at those

668
00:28:48,930 --> 00:28:50,100
URLs anymore.

669
00:28:50,100 --> 00:28:53,020
So the default model is
effectively URL hostile.

670
00:28:53,020 --> 00:28:55,730
And the only thing that's helped
by having it at a URL

671
00:28:55,730 --> 00:28:58,040
is loading the initial shell,
which is the least meaningful

672
00:28:58,040 --> 00:29:00,840
thing in terms of URL space.

673
00:29:00,840 --> 00:29:05,330
So what you'd really like to
do in all this is to help

674
00:29:05,330 --> 00:29:08,000
application owners understand
through the API that your

675
00:29:08,000 --> 00:29:10,050
caching two separate
sets of things.

676
00:29:10,050 --> 00:29:13,640
There's a shell, which is your
browser for your content.

677
00:29:13,640 --> 00:29:15,530
There's the browser that
you browse to different

678
00:29:15,530 --> 00:29:16,610
sites and apps with.

679
00:29:16,610 --> 00:29:19,210
But there's the browser that you
build for the content that

680
00:29:19,210 --> 00:29:21,290
you're surfacing inside
your app.

681
00:29:21,290 --> 00:29:23,190
And then there's the
content of the app.

682
00:29:23,190 --> 00:29:24,990
You need to treat them
independently, but you'd like

683
00:29:24,990 --> 00:29:27,490
them both to be cacheable
as HTTP resources.

684
00:29:27,490 --> 00:29:30,710
So the way to get there is
to change expectations.

685
00:29:30,710 --> 00:29:32,480
There's no app that you're
going to build that's

686
00:29:32,480 --> 00:29:35,150
meaningful that's not
offline by default.

687
00:29:35,150 --> 00:29:37,100
AppCache gets you part of the
way there, because it makes

688
00:29:37,100 --> 00:29:40,330
the resources for your app
shell offline by default.

689
00:29:40,330 --> 00:29:43,710
But it doesn't necessarily do
anything particular for the

690
00:29:43,710 --> 00:29:46,400
resources that you would like
to load inside that shell.

691
00:29:46,400 --> 00:29:48,880
So we have to make this
transition in thinking about

692
00:29:48,880 --> 00:29:52,950
building apps in this world,
which is, we're not building a

693
00:29:52,950 --> 00:29:55,500
series of HTML pages that you're
going to serialize at a

694
00:29:55,500 --> 00:30:00,390
URL fully formed from the server
side as strings that

695
00:30:00,390 --> 00:30:01,990
you're going to put back
into the cache.

696
00:30:01,990 --> 00:30:02,900
It's nonsensical.

697
00:30:02,900 --> 00:30:04,110
It doesn't work.

698
00:30:04,110 --> 00:30:05,570
Instead what you're going to do
is you're going to assume

699
00:30:05,570 --> 00:30:07,720
that there's a shell that's
booted, and you're moving

700
00:30:07,720 --> 00:30:10,110
between the cached resources,
and if you can get to them,

701
00:30:10,110 --> 00:30:11,820
the uncached ones.

702
00:30:11,820 --> 00:30:14,260
And that means that you're
always working from this local

703
00:30:14,260 --> 00:30:17,900
store of your shell and your
content in order to do

704
00:30:17,900 --> 00:30:18,690
everything.

705
00:30:18,690 --> 00:30:22,300
And that's the big transition
that has been conflated with

706
00:30:22,300 --> 00:30:25,330
the use of AppCache over time.

707
00:30:25,330 --> 00:30:27,970
And everyone discovers that
that's what AppCache implies,

708
00:30:27,970 --> 00:30:29,710
but it's not clear.

709
00:30:29,710 --> 00:30:31,370
And it's not clear that that's
how you have to build your

710
00:30:31,370 --> 00:30:32,940
application to be successful.

711
00:30:32,940 --> 00:30:35,850
JAKE ARCHIBALD: So I would see
the model working if you

712
00:30:35,850 --> 00:30:36,600
imagine an app--

713
00:30:36,600 --> 00:30:37,490
I think I'm all right.

714
00:30:37,490 --> 00:30:40,710
If you imagine an app--
no, I'm not.

715
00:30:40,710 --> 00:30:44,410
If you imagine an app where it's
a series of messages from

716
00:30:44,410 --> 00:30:45,750
people you're subscribed to--

717
00:30:45,750 --> 00:30:47,440
basically Twitter--

718
00:30:47,440 --> 00:30:49,230
if you visit the page and you
don't have a controller

719
00:30:49,230 --> 00:30:51,200
installed, and you don't have
JavaScript, the server is

720
00:30:51,200 --> 00:30:52,690
going to construct all
of this stuff.

721
00:30:52,690 --> 00:30:54,520
You'll have to wait for a
network who responds, and

722
00:30:54,520 --> 00:30:58,490
you'll get it how internet
should work today.

723
00:30:58,490 --> 00:31:00,860
If you have a controller
installed, it's going to

724
00:31:00,860 --> 00:31:04,710
respond with an empty content
shell of the UI, it's going to

725
00:31:04,710 --> 00:31:08,730
kick off an XHR or request on
your page, but it's going to

726
00:31:08,730 --> 00:31:10,980
have a header or query
strings saying, I'm

727
00:31:10,980 --> 00:31:12,280
OK with cached data.

728
00:31:12,280 --> 00:31:15,112
The controller is going to
see that and return the

729
00:31:15,112 --> 00:31:16,300
last data you saw.

730
00:31:16,300 --> 00:31:17,500
You're going to build
up the page.

731
00:31:17,500 --> 00:31:19,270
And that's going to
happen instantly.

732
00:31:19,270 --> 00:31:21,710
But then it will set off another
XHR, something in a

733
00:31:21,710 --> 00:31:25,370
query string, saying, I want
this data to come from online.

734
00:31:25,370 --> 00:31:28,600
And that connection will either
succeed, in which case

735
00:31:28,600 --> 00:31:31,120
you'll replace the content on
the screen with the new stuff,

736
00:31:31,120 --> 00:31:32,865
or it will fail, and you'll
fail silently.

737
00:31:32,865 --> 00:31:35,900
And that's your offline
experience.

738
00:31:35,900 --> 00:31:37,730
ANDREW BETTIS: Can I pick up--

739
00:31:37,730 --> 00:31:40,960
you were talking about the
failure scenario of trying to

740
00:31:40,960 --> 00:31:43,750
load content and then it failing
and falling back to

741
00:31:43,750 --> 00:31:44,940
content from cache.

742
00:31:44,940 --> 00:31:47,140
So the biggest problem we have
with AppCache with the

743
00:31:47,140 --> 00:31:49,840
fallback is that you can't
control that timeout.

744
00:31:49,840 --> 00:31:51,850
You can't determine how long
that's going to be, and it's

745
00:31:51,850 --> 00:31:53,990
usually longer than a user
is prepared to wait.

746
00:31:53,990 --> 00:31:56,230
So in the scenario of using a
navigation controller, in

747
00:31:56,230 --> 00:31:58,750
which you'd be able to configure
what that timeout

748
00:31:58,750 --> 00:32:00,376
is, how long are you
prepared to wait?

749
00:32:00,376 --> 00:32:03,520

750
00:32:03,520 --> 00:32:04,550
ALEX RUSSELL: You have explicit
control under the

751
00:32:04,550 --> 00:32:07,700
controller scenario over
the loading process.

752
00:32:07,700 --> 00:32:11,730
So you are able to make
a decision when you're

753
00:32:11,730 --> 00:32:14,180
dispatching the request in the
first place, do I know that

754
00:32:14,180 --> 00:32:15,000
I'm offline?

755
00:32:15,000 --> 00:32:16,480
The only thing that we can
actually tell you from the

756
00:32:16,480 --> 00:32:19,020
browser's perspective about
your online versus offline

757
00:32:19,020 --> 00:32:21,460
state is that you are
definitively not connected to

758
00:32:21,460 --> 00:32:22,280
any network.

759
00:32:22,280 --> 00:32:24,150
We can't tell you whether or not
you can hit your server.

760
00:32:24,150 --> 00:32:25,900
We can't tell you anything about
what's reasonable in

761
00:32:25,900 --> 00:32:27,830
terms of expectation for
hitting your server.

762
00:32:27,830 --> 00:32:29,800
We can tell you if you're behind
a hostile proxy or

763
00:32:29,800 --> 00:32:33,080
inside of a captive portal
from some Wi-Fi thing.

764
00:32:33,080 --> 00:32:34,330
We can't tell you any of that.

765
00:32:34,330 --> 00:32:35,740
That's going to be up to
your application to

766
00:32:35,740 --> 00:32:36,690
have to figure out.

767
00:32:36,690 --> 00:32:39,080
And the way you do that is by
making one these requests and

768
00:32:39,080 --> 00:32:40,550
then watching what happens.

769
00:32:40,550 --> 00:32:45,450
So yes, you'll be able to cancel
the request and respond

770
00:32:45,450 --> 00:32:48,040
with I have no idea
what's going on.

771
00:32:48,040 --> 00:32:50,410
And it's going to be explicitly
under your control,

772
00:32:50,410 --> 00:32:52,550
which is to say that you'll
explicitly have to provide

773
00:32:52,550 --> 00:32:53,630
that functionality.

774
00:32:53,630 --> 00:32:57,030
But that's a damn sight better
than trying to have to figure

775
00:32:57,030 --> 00:33:00,360
out a way to make AppCache
do it right now.

776
00:33:00,360 --> 00:33:02,040
ANDREW BETTIS: And here's
another quick

777
00:33:02,040 --> 00:33:04,520
question from Moderator.

778
00:33:04,520 --> 00:33:08,100
Is there scope for a standard
way of synchronizing content

779
00:33:08,100 --> 00:33:12,710
from server to client
and vice versa?

780
00:33:12,710 --> 00:33:12,800
JONAS SICKING: So

781
00:33:12,800 --> 00:33:14,920
synchronization is really hard.

782
00:33:14,920 --> 00:33:17,205
Once you get into two-way
synchronization, which is what

783
00:33:17,205 --> 00:33:21,970
you often get into, there's
no standard way of

784
00:33:21,970 --> 00:33:23,080
synchronizing data.

785
00:33:23,080 --> 00:33:27,750
It's very, very application
specific, how you deal with

786
00:33:27,750 --> 00:33:29,000
merged conflicts.

787
00:33:29,000 --> 00:33:30,930

788
00:33:30,930 --> 00:33:36,050
So one answer is simply no,
we can't solve this.

789
00:33:36,050 --> 00:33:39,020
There are some interesting
approaches that may work.

790
00:33:39,020 --> 00:33:42,016
So Couch, for example, does this
thing where it allows you

791
00:33:42,016 --> 00:33:44,170
to synchronize data, but
it doesn't actually

792
00:33:44,170 --> 00:33:44,990
deal with the merging.

793
00:33:44,990 --> 00:33:48,770
So you can pull down data, and
the local data that you end up

794
00:33:48,770 --> 00:33:52,460
with explicitly contains
the conflict.

795
00:33:52,460 --> 00:33:56,810
And then after the fact, once
you run code, then you can

796
00:33:56,810 --> 00:33:57,770
deal with that conflict.

797
00:33:57,770 --> 00:34:00,220
And so potentially we can build

798
00:34:00,220 --> 00:34:03,270
something around that model.

799
00:34:03,270 --> 00:34:06,255
But I think dealing with
synchronization is really,

800
00:34:06,255 --> 00:34:06,940
really hard.

801
00:34:06,940 --> 00:34:09,409
I think in the beginning
we need to just.

802
00:34:09,409 --> 00:34:10,980
ANDREW BETTIS: Are we just
asking for trouble here?

803
00:34:10,980 --> 00:34:13,030
I mean, are we just asking
to build something that

804
00:34:13,030 --> 00:34:15,610
developers will say, that
doesn't quite work the way I

805
00:34:15,610 --> 00:34:17,380
want it to, so I'm going
to build my own?

806
00:34:17,380 --> 00:34:20,909
ALEX RUSSELL: I think the thing
that will get you in

807
00:34:20,909 --> 00:34:23,449
trouble is making assumptions
about the developers' data

808
00:34:23,449 --> 00:34:25,239
model, which were not
collaborative.

809
00:34:25,239 --> 00:34:31,280
So if we provide developers a
data model which we constrain

810
00:34:31,280 --> 00:34:34,760
tightly, like, if we provide
a straight transition chart

811
00:34:34,760 --> 00:34:39,239
system that you can then speak
in high-level terms about the

812
00:34:39,239 --> 00:34:41,330
changes between the states of
your applications, and then we

813
00:34:41,330 --> 00:34:45,139
can watch those in a way that,
say, a SQL database watches

814
00:34:45,139 --> 00:34:47,469
the SQL queries that come in and
the transactions and the

815
00:34:47,469 --> 00:34:49,830
commits and you can then make a
binary log of them, then you

816
00:34:49,830 --> 00:34:51,370
can start to do something about
the synchronization of

817
00:34:51,370 --> 00:34:53,150
the high-level application
semantics.

818
00:34:53,150 --> 00:34:57,090
But as much as people would like
to pretend that HTML is

819
00:34:57,090 --> 00:34:59,450
semantic, it ain't.

820
00:34:59,450 --> 00:35:02,040
HTML today, in most of its use
cases, ain't semantic.

821
00:35:02,040 --> 00:35:04,690
You're not saying anything more
meaningful than div, div,

822
00:35:04,690 --> 00:35:06,290
div, div, div.

823
00:35:06,290 --> 00:35:09,320
And your mutations of HTML are
no more meaningful that show

824
00:35:09,320 --> 00:35:10,950
or hide this particular
piece of UI.

825
00:35:10,950 --> 00:35:13,700
They don't relate specifically,
in most cases,

826
00:35:13,700 --> 00:35:16,960
except in a tangential way, to
I'm changing this particular

827
00:35:16,960 --> 00:35:20,530
piece of state in my data model,
which is what you're

828
00:35:20,530 --> 00:35:21,540
trying to synchronize.

829
00:35:21,540 --> 00:35:24,390
And so we don't have a local
idea of a data model.

830
00:35:24,390 --> 00:35:26,670
Therefore we can't really cons
up the idea of a local

831
00:35:26,670 --> 00:35:28,090
synchronization store.

832
00:35:28,090 --> 00:35:31,530
I think that the next iteration
of the library wars

833
00:35:31,530 --> 00:35:34,610
will be about data models
locally and synchronization.

834
00:35:34,610 --> 00:35:36,470
My guess is that people are
going to start doing

835
00:35:36,470 --> 00:35:38,900
operational transform libraries
out of the woodwork.

836
00:35:38,900 --> 00:35:40,010
It's going to be amazing.

837
00:35:40,010 --> 00:35:42,720
We're starting to see this a
little bit with Meteor and

838
00:35:42,720 --> 00:35:45,360
some other libraries that are
starting to apply some good

839
00:35:45,360 --> 00:35:48,200
computer science to the
question of how do I

840
00:35:48,200 --> 00:35:50,590
differentiate what's happening
when I change it?

841
00:35:50,590 --> 00:35:53,230
How do I prevent merge conflicts
in the first place,

842
00:35:53,230 --> 00:35:56,090
by dealing in high-level
operations, and not in, oh

843
00:35:56,090 --> 00:35:58,770
look, some field was
added or removed?

844
00:35:58,770 --> 00:36:01,070
And we're starting to add good
support for being able to

845
00:36:01,070 --> 00:36:04,020
build these libraries into both
the language and the DOM.

846
00:36:04,020 --> 00:36:06,260
There's something called
object.observe and mutation

847
00:36:06,260 --> 00:36:08,740
observers, which are way of
observing those changes as

848
00:36:08,740 --> 00:36:11,600
they happen and responding to
high-level events and not the

849
00:36:11,600 --> 00:36:14,150
low-level primitives changing
out from underneath you.

850
00:36:14,150 --> 00:36:17,060
But we've got a very long way
collectively to go to get to

851
00:36:17,060 --> 00:36:20,410
an agreement whereby we as
browser vendors would feel, I

852
00:36:20,410 --> 00:36:24,460
think, reasonably comfortable
in blessing one particulars

853
00:36:24,460 --> 00:36:27,740
strategy for describing your
data and then another strategy

854
00:36:27,740 --> 00:36:31,100
for synchronizing it.

855
00:36:31,100 --> 00:36:33,550
ANDREW BETTIS: So has anyone
here implemented any kind of

856
00:36:33,550 --> 00:36:36,250
offline sync, any kind
of ability to

857
00:36:36,250 --> 00:36:38,530
synchronize data to browser?

858
00:36:38,530 --> 00:36:38,910
MALE SPEAKER: Yeah.

859
00:36:38,910 --> 00:36:41,090
ANDREW BETTIS: OK, so what's
your use case?

860
00:36:41,090 --> 00:36:50,480

861
00:36:50,480 --> 00:36:54,560
MALE SPEAKER: It's exactly how
you just described it.

862
00:36:54,560 --> 00:36:58,920
The AppCache hosts the shell,
and everything else comes from

863
00:36:58,920 --> 00:37:00,070
local storage.

864
00:37:00,070 --> 00:37:04,470
So local storage is the user
data, AppCache is the shell.

865
00:37:04,470 --> 00:37:06,910
And it assumes from the
beginning that the user is

866
00:37:06,910 --> 00:37:12,760
going to have no data and then
tries to fetch over an AJAX

867
00:37:12,760 --> 00:37:15,625
request and feeds into
local storage.

868
00:37:15,625 --> 00:37:18,910

869
00:37:18,910 --> 00:37:20,110
MARK CHRISTIAN: I think most
of the problems with

870
00:37:20,110 --> 00:37:24,830
synchronization are less data
model than we would think.

871
00:37:24,830 --> 00:37:28,260
I feel like it's actually
a feasible problem.

872
00:37:28,260 --> 00:37:30,980
If you look at stuff like
iCloud, you can offer a couple

873
00:37:30,980 --> 00:37:33,360
of pretty basic data
strategies.

874
00:37:33,360 --> 00:37:35,115
Like, I've got a key value
store, or I've

875
00:37:35,115 --> 00:37:36,260
got a record store.

876
00:37:36,260 --> 00:37:39,840
You don't need to build up
particularly complex models in

877
00:37:39,840 --> 00:37:42,170
the browser to actually
be able to support--

878
00:37:42,170 --> 00:37:47,160
there's this thing, it has a
GUID, and you can say whatever

879
00:37:47,160 --> 00:37:50,050
the most recent changed
version is works.

880
00:37:50,050 --> 00:37:52,640
ALEX RUSSELL: So you're positing
that one default

881
00:37:52,640 --> 00:37:55,880
strategy across multi-tenant
synchronization will work,

882
00:37:55,880 --> 00:37:58,090
that there's only a single user,
and that user's last

883
00:37:58,090 --> 00:37:59,970
change is going to be
synchronized and timed

884
00:37:59,970 --> 00:38:02,100
correctly across multiple
systems.

885
00:38:02,100 --> 00:38:04,840
And you're saying that there's
a closed form over the

886
00:38:04,840 --> 00:38:06,250
operations that I can take.

887
00:38:06,250 --> 00:38:08,990
You do need the closed form, but
you need the ability for

888
00:38:08,990 --> 00:38:11,440
applications to specify the
operations that they will

889
00:38:11,440 --> 00:38:14,420
allow on their data and what it
means for them to change a

890
00:38:14,420 --> 00:38:16,610
piece of data.

891
00:38:16,610 --> 00:38:20,980
Yes, you can bring users down to
one model of mutating data

892
00:38:20,980 --> 00:38:24,180
and what that semantic
is for mutation.

893
00:38:24,180 --> 00:38:27,230
And you can constrain the set of
things that they will then

894
00:38:27,230 --> 00:38:29,680
reasonably be able to do in
the app without hitting

895
00:38:29,680 --> 00:38:31,970
synchronization issues
based on this policy.

896
00:38:31,970 --> 00:38:35,710
You could do that, but I don't
feel like it's our job as a

897
00:38:35,710 --> 00:38:39,570
platform right now to make that
kind of a call in quite

898
00:38:39,570 --> 00:38:40,280
such a closed way.

899
00:38:40,280 --> 00:38:41,930
Because I don't think that we've
got the experience in

900
00:38:41,930 --> 00:38:43,730
our community for that's
the right thing to do.

901
00:38:43,730 --> 00:38:46,055
I can tell you right now that
that would not work for Gmail.

902
00:38:46,055 --> 00:38:47,880
It honestly would not
work for Gmail.

903
00:38:47,880 --> 00:38:48,850
It wouldn't work for Sync.

904
00:38:48,850 --> 00:38:50,050
It wouldn't have worked
for Wave.

905
00:38:50,050 --> 00:38:51,420
It doesn't work for Plus.

906
00:38:51,420 --> 00:38:53,120
It won't fly.

907
00:38:53,120 --> 00:38:55,220
ANDREW BETTIS: Mark, can you
tell us why Twitter doesn't

908
00:38:55,220 --> 00:38:57,770
currently use offline?

909
00:38:57,770 --> 00:38:59,974
MARK CHRISTIAN: Well, Twitter's
web platform is in a

910
00:38:59,974 --> 00:39:01,320
bit of flux.

911
00:39:01,320 --> 00:39:03,660
We're moving towards
a server as the

912
00:39:03,660 --> 00:39:04,660
ultimate source of truth.

913
00:39:04,660 --> 00:39:07,730
So we actually don't do any
client side rendering at all.

914
00:39:07,730 --> 00:39:11,400
So any navigation event, even
though it's happening AJAXly,

915
00:39:11,400 --> 00:39:14,090
is actually just injecting a
response from the server.

916
00:39:14,090 --> 00:39:18,070
So you can't really cache that
nearly as efficiently as you

917
00:39:18,070 --> 00:39:20,550
could a series of JSON
responses, for example,

918
00:39:20,550 --> 00:39:22,460
because they're full-page
responses.

919
00:39:22,460 --> 00:39:26,630
So not every AJAX model is going
to work as well with

920
00:39:26,630 --> 00:39:29,480
that sort of a strategy.

921
00:39:29,480 --> 00:39:31,280
Whether that changes
in the future, TBD.

922
00:39:31,280 --> 00:39:35,670
But basically, two competing
styles of how you want to have

923
00:39:35,670 --> 00:39:37,780
a fast responsive app, you have
something that lives on

924
00:39:37,780 --> 00:39:39,940
the server, something that lives
entirely on the client.

925
00:39:39,940 --> 00:39:43,790
And having something that can
react to both is actually a

926
00:39:43,790 --> 00:39:45,420
messy, terrible proposition
right now.

927
00:39:45,420 --> 00:39:48,270

928
00:39:48,270 --> 00:39:51,090
JAKE ARCHIBALD: The way we did
that at Lanyard was we were

929
00:39:51,090 --> 00:39:55,590
rendering on the server with
Mustache and some data.

930
00:39:55,590 --> 00:39:57,320
And then when we were doing the
same on the client with

931
00:39:57,320 --> 00:40:00,170
offline, we were using the same
Mustache templates, and

932
00:40:00,170 --> 00:40:04,180
we were caching the same data
model in local storage, the

933
00:40:04,180 --> 00:40:04,870
same as you were.

934
00:40:04,870 --> 00:40:07,850
And obviously we'd rather be
doing that in AppCache.

935
00:40:07,850 --> 00:40:12,170
So yeah, you can still do the
progressive enhancement thing

936
00:40:12,170 --> 00:40:14,650
and have a client-based
app, and you're not

937
00:40:14,650 --> 00:40:16,260
duplicating too much data.

938
00:40:16,260 --> 00:40:21,940
And did anyone see the "B&B"
article recently where they

939
00:40:21,940 --> 00:40:25,270
were talking about, hey, we've
decided to try this new,

940
00:40:25,270 --> 00:40:26,150
exciting idea.

941
00:40:26,150 --> 00:40:27,900
And what we're going to do is
we're going to render content

942
00:40:27,900 --> 00:40:30,810
on the server, and we're
going to send out an

943
00:40:30,810 --> 00:40:33,170
HTML string of content.

944
00:40:33,170 --> 00:40:34,710
And it's amazingly fast.

945
00:40:34,710 --> 00:40:35,960
You guys should all
be doing this.

946
00:40:35,960 --> 00:40:38,470

947
00:40:38,470 --> 00:40:41,320
Yeah, we've been calling that
progressive enhancement.

948
00:40:41,320 --> 00:40:43,340
MARK CHRISTIAN: Well, that's
sort of our model too.

949
00:40:43,340 --> 00:40:46,145
Twitter's famously, remember,
the hashbang website a couple

950
00:40:46,145 --> 00:40:47,010
of years ago.

951
00:40:47,010 --> 00:40:49,750
It was actually pretty speedy
if you were on a MacBook Pro

952
00:40:49,750 --> 00:40:50,940
with the latest version
of Chrome.

953
00:40:50,940 --> 00:40:55,335
But if you were using IE7 in
Bangalore, it was actually an

954
00:40:55,335 --> 00:40:56,310
atrocious experience.

955
00:40:56,310 --> 00:40:58,600
And so the server side model
ends up working a lot better

956
00:40:58,600 --> 00:40:59,700
on the low end.

957
00:40:59,700 --> 00:41:03,080
And the problem with having two
rendering stacks, even if

958
00:41:03,080 --> 00:41:06,120
they're sharing templates, is
that you've got quirks between

959
00:41:06,120 --> 00:41:07,380
your view implementation.

960
00:41:07,380 --> 00:41:09,700
And that is a great way to kill
yourself with 1,000 paper

961
00:41:09,700 --> 00:41:12,210
cuts, especially if you're on
a large dev team with a few

962
00:41:12,210 --> 00:41:15,006
dozen developers trying to
keep it all in sync.

963
00:41:15,006 --> 00:41:16,210
JAKE ARCHIBALD: No, I completely
agree with that.

964
00:41:16,210 --> 00:41:18,190
Because we were using Mustache,
and we ended up

965
00:41:18,190 --> 00:41:22,610
pretty much owning, or making
massive contributions to about

966
00:41:22,610 --> 00:41:24,950
four different implementations
of Mustache the Python one,

967
00:41:24,950 --> 00:41:30,150
the Java one, the IOS one,
and the JavaScript one.

968
00:41:30,150 --> 00:41:31,090
MARK CHRISTIAN: There's one
developer at Twitter who's

969
00:41:31,090 --> 00:41:33,180
single-handedly written
two from scratch--

970
00:41:33,180 --> 00:41:34,590
Hogan and Eckersley--

971
00:41:34,590 --> 00:41:37,310
just because most of the
implementations had

972
00:41:37,310 --> 00:41:38,240
some sort of issue.

973
00:41:38,240 --> 00:41:39,910
ANDREW BETTIS: So are you
saying, then, that the only

974
00:41:39,910 --> 00:41:42,150
real use case for offline
technologies is when you

975
00:41:42,150 --> 00:41:44,320
actually want to build an
offline app rather than to

976
00:41:44,320 --> 00:41:45,970
improve the performance
of your app?

977
00:41:45,970 --> 00:41:48,220
MARK CHRISTIAN: Well,
application versus website--

978
00:41:48,220 --> 00:41:51,210
it's the same thing I
mentioned earlier.

979
00:41:51,210 --> 00:41:53,060
I feel like the offline
technologies are really good

980
00:41:53,060 --> 00:41:55,410
for building an app, like
the Lanyard thing.

981
00:41:55,410 --> 00:41:58,530
But they don't really map very
well towards a Twitter or even

982
00:41:58,530 --> 00:42:00,490
a Wikipedia kind of example.

983
00:42:00,490 --> 00:42:02,140
They just don't feel like a very
good fit for something

984
00:42:02,140 --> 00:42:04,840
where you're always pulling
in new data, and it's an

985
00:42:04,840 --> 00:42:06,990
unbounded amount of content
that you might

986
00:42:06,990 --> 00:42:08,300
want to pull in.

987
00:42:08,300 --> 00:42:09,270
JAKE ARCHIBALD: If you're
just looking to improve

988
00:42:09,270 --> 00:42:12,860
performance, that's what
the HTTP cache is for.

989
00:42:12,860 --> 00:42:16,740
The application cache is for
caching applications--

990
00:42:16,740 --> 00:42:19,630
it's for making it
work offline.

991
00:42:19,630 --> 00:42:22,160
If you can get a performance
benefit out of using it, then

992
00:42:22,160 --> 00:42:22,800
fair enough.

993
00:42:22,800 --> 00:42:28,822
But you are buying into making
an offline-first experience.

994
00:42:28,822 --> 00:42:31,960
ALEX RUSSELL: To be clear,
though, the new proposal would

995
00:42:31,960 --> 00:42:33,720
be a reasonable accelerator.

996
00:42:33,720 --> 00:42:35,870
If you don't ever handle any
navigation events but only

997
00:42:35,870 --> 00:42:40,130
resources, you could certainly
build a local high performance

998
00:42:40,130 --> 00:42:44,260
cache system to improve website
performance without

999
00:42:44,260 --> 00:42:47,240
biting off any offline
capability at all.

1000
00:42:47,240 --> 00:42:48,680
ANDREW BETTIS: In what situation
would you want to do

1001
00:42:48,680 --> 00:42:52,790
that versus using
the HTTP cache?

1002
00:42:52,790 --> 00:42:54,410
ALEX RUSSELL: We've had good
input from the folks at

1003
00:42:54,410 --> 00:42:57,610
Facebook that this is their core
use case for AppCache, is

1004
00:42:57,610 --> 00:42:59,015
actually making things--

1005
00:42:59,015 --> 00:42:59,880
or not a core.

1006
00:42:59,880 --> 00:43:02,430
One of their most important use
cases was making things

1007
00:43:02,430 --> 00:43:05,090
available faster.

1008
00:43:05,090 --> 00:43:10,570
And at Google, I know that our
global teams have had similar

1009
00:43:10,570 --> 00:43:12,660
needs, and AppCache
hasn't met them.

1010
00:43:12,660 --> 00:43:15,505
So hopefully this new API
will meet those two.

1011
00:43:15,505 --> 00:43:18,610
JONAS SICKING: Yeah, I think the
mental model that I've had

1012
00:43:18,610 --> 00:43:23,340
recently is that it would be
great if we can make it work

1013
00:43:23,340 --> 00:43:26,640
so that the online case
is very similar

1014
00:43:26,640 --> 00:43:28,640
to the offline case.

1015
00:43:28,640 --> 00:43:33,830
It's more a difference between
are you seeing controller

1016
00:43:33,830 --> 00:43:36,710
slash app cache or you're not.

1017
00:43:36,710 --> 00:43:40,950
So if we can make it so that
when you are using these new

1018
00:43:40,950 --> 00:43:44,710
features for enabling offline
but you happen to be online,

1019
00:43:44,710 --> 00:43:49,310
you can still download the data
and just download the

1020
00:43:49,310 --> 00:43:53,300
data part and not the template
and the static content and use

1021
00:43:53,300 --> 00:43:56,160
that cached version of that
increase performance.

1022
00:43:56,160 --> 00:44:00,040
I'm definitely hoping that that
is a model we can get to,

1023
00:44:00,040 --> 00:44:03,770
to basically make the online
application experience be more

1024
00:44:03,770 --> 00:44:06,740
competitive with native--
where on native you're

1025
00:44:06,740 --> 00:44:09,220
downloading your shell once.

1026
00:44:09,220 --> 00:44:11,610
And then as you're using it,
you're just downloading the

1027
00:44:11,610 --> 00:44:13,140
incremental data.

1028
00:44:13,140 --> 00:44:15,920
We should be able to make the
same thing possible on the web

1029
00:44:15,920 --> 00:44:17,170
to increase performance.

1030
00:44:17,170 --> 00:44:19,220

1031
00:44:19,220 --> 00:44:21,840
JAKE ARCHIBALD: So the HTTP
cache is like this really busy

1032
00:44:21,840 --> 00:44:23,700
room, and everyone's in there.

1033
00:44:23,700 --> 00:44:26,840
And the browser's having to be
the bouncer at the door.

1034
00:44:26,840 --> 00:44:30,430
And when other people want into
the room, the bouncer's

1035
00:44:30,430 --> 00:44:34,020
going, look, you've had
too much to drink.

1036
00:44:34,020 --> 00:44:35,220
You should get out.

1037
00:44:35,220 --> 00:44:38,670
And then what Facebook have done
is gone, ah, but there's

1038
00:44:38,670 --> 00:44:41,580
this quieter bar around
the corner.

1039
00:44:41,580 --> 00:44:43,160
We're going to go there.

1040
00:44:43,160 --> 00:44:45,920
But the thing is, if everyone
starts doing that, then that

1041
00:44:45,920 --> 00:44:47,920
bar is going to have to hire a
bouncer, and they're going to

1042
00:44:47,920 --> 00:44:50,000
start kicking people
out as well.

1043
00:44:50,000 --> 00:44:52,260
It seems like a nice performance
enhancement now.

1044
00:44:52,260 --> 00:44:53,922
But I think if everyone started
using it, we're going

1045
00:44:53,922 --> 00:44:56,180
to get the same issues where if
everyone's stuffing fonts

1046
00:44:56,180 --> 00:44:59,080
and images into local storage,
there's going to have to be a

1047
00:44:59,080 --> 00:45:02,630
bouncer there that kicks
people out-- unless the

1048
00:45:02,630 --> 00:45:04,190
website asked for a
permanent cache.

1049
00:45:04,190 --> 00:45:07,030
But I don't think we want a
web where you just visit

1050
00:45:07,030 --> 00:45:08,570
Facebook because you want to
look at a thing, and it's

1051
00:45:08,570 --> 00:45:11,370
saying, Facebook wants to
install 5 megabytes worth of

1052
00:45:11,370 --> 00:45:13,330
stuff just so you can see it.

1053
00:45:13,330 --> 00:45:15,630
It's not for an offline
experience, it's just to look

1054
00:45:15,630 --> 00:45:16,710
at the site.

1055
00:45:16,710 --> 00:45:17,750
MARK CHRISTIAN: The interesting
characteristic

1056
00:45:17,750 --> 00:45:21,330
about using AppCache for storing
the outer shell is

1057
00:45:21,330 --> 00:45:24,640
that it lets you have a cache
where it's totally happy to

1058
00:45:24,640 --> 00:45:26,680
start rendering the page with
the old version, without even

1059
00:45:26,680 --> 00:45:28,140
going to see if there's
a new one.

1060
00:45:28,140 --> 00:45:30,890
And that's something that HTTP
caching could theoretically be

1061
00:45:30,890 --> 00:45:33,150
modified to have but doesn't.

1062
00:45:33,150 --> 00:45:35,740
And it's an interesting
characteristic all its own.

1063
00:45:35,740 --> 00:45:39,750
HTTP caching in general is best
described as bewildering.

1064
00:45:39,750 --> 00:45:41,940
There's just so many options,
and it never quite does what

1065
00:45:41,940 --> 00:45:42,910
you expect.

1066
00:45:42,910 --> 00:45:45,340
And with all of AppCache's
problems, one thing that we

1067
00:45:45,340 --> 00:45:47,790
can say is at least we can
expect that the data will be

1068
00:45:47,790 --> 00:45:49,394
there when we ask
for it again.

1069
00:45:49,394 --> 00:45:54,010

1070
00:45:54,010 --> 00:45:55,510
JONAS SICKING: I don't think the
bar around the corner is

1071
00:45:55,510 --> 00:45:58,350
necessarily going to get
as packed as the

1072
00:45:58,350 --> 00:46:01,210
initial HTTP cache bar.

1073
00:46:01,210 --> 00:46:05,770
Because if we are good enough
at building the heuristics

1074
00:46:05,770 --> 00:46:08,470
where maybe we don't download
AppCache the first time you

1075
00:46:08,470 --> 00:46:09,250
visit a website.

1076
00:46:09,250 --> 00:46:13,000
But if we see that you visit a
website every day, then we'll

1077
00:46:13,000 --> 00:46:16,260
download the AppCache and we'll
keep it more tightly.

1078
00:46:16,260 --> 00:46:20,820
So I think if we're more clever
than we are with HTTP

1079
00:46:20,820 --> 00:46:24,840
cache, then I think we
can keep the good

1080
00:46:24,840 --> 00:46:25,950
people in that bar.

1081
00:46:25,950 --> 00:46:28,110
ANDREW BETTIS: Why do we need
another bar at all?

1082
00:46:28,110 --> 00:46:31,800
Just hypothetically, why do we
not just have an extra cache

1083
00:46:31,800 --> 00:46:34,450
control directive that gives
enhanced persistence within

1084
00:46:34,450 --> 00:46:35,970
the HTTP cache?

1085
00:46:35,970 --> 00:46:38,735
ALEX RUSSELL: I try to rephrase
this as, why is there

1086
00:46:38,735 --> 00:46:39,985
no priority system?

1087
00:46:39,985 --> 00:46:42,630
Why is their no user expressible
and collaborative

1088
00:46:42,630 --> 00:46:43,770
priority system?

1089
00:46:43,770 --> 00:46:46,730
So many of the cases where we
wind up fighting the browser

1090
00:46:46,730 --> 00:46:50,590
as developers are cases where if
we could express our intent

1091
00:46:50,590 --> 00:46:53,120
more clearly to the browser, the
browser could collaborate

1092
00:46:53,120 --> 00:46:55,150
with the user to have
a better experience

1093
00:46:55,150 --> 00:46:57,010
provided in many cases.

1094
00:46:57,010 --> 00:47:00,180
We could then use the browser
to help express to the user,

1095
00:47:00,180 --> 00:47:01,850
hey, this is what we're
trying to do here.

1096
00:47:01,850 --> 00:47:05,460
And if you say to the browser,
listen, these resources are

1097
00:47:05,460 --> 00:47:07,720
really dear to me, these are
slightly less dear, and these

1098
00:47:07,720 --> 00:47:11,800
are totally ephemeral, I don't
really need them--

1099
00:47:11,800 --> 00:47:19,160
the work that the folks are
doing on Quota API for the

1100
00:47:19,160 --> 00:47:22,370
file system points in this
direction, where you're

1101
00:47:22,370 --> 00:47:24,300
getting to a point where you can
start to collaborate with

1102
00:47:24,300 --> 00:47:26,300
the system and say listen, these
are really important to

1103
00:47:26,300 --> 00:47:27,515
me, these are less important.

1104
00:47:27,515 --> 00:47:30,190
And I don't think we need to
back ourselves into hard

1105
00:47:30,190 --> 00:47:33,780
guarantees, as long as we're
able to say that, by default,

1106
00:47:33,780 --> 00:47:37,910
you're in the less privileged
group until you ask for a

1107
00:47:37,910 --> 00:47:40,600
privilege, in which case you
take on responsibility to

1108
00:47:40,600 --> 00:47:41,840
collaborate.

1109
00:47:41,840 --> 00:47:42,690
You might be evicted.

1110
00:47:42,690 --> 00:47:44,520
You might get events about
whether or not eviction is

1111
00:47:44,520 --> 00:47:46,620
about to happen, and maybe you
should offer up some other

1112
00:47:46,620 --> 00:47:49,050
thing to remove or try to remove
stuff for yourself.

1113
00:47:49,050 --> 00:47:51,430
This is a well-worn path in
a lot of other operating

1114
00:47:51,430 --> 00:47:55,330
systems, where you'll say,
hey, dear plug-in or dear

1115
00:47:55,330 --> 00:47:57,240
application, we're running
low on storage.

1116
00:47:57,240 --> 00:47:59,010
Can you please clean
some stuff up?

1117
00:47:59,010 --> 00:48:02,570
Or where the OS tries to clean
things up for you if it winds

1118
00:48:02,570 --> 00:48:03,710
up under pressure.

1119
00:48:03,710 --> 00:48:05,250
At that point, you have to
have a conversation.

1120
00:48:05,250 --> 00:48:07,480
And today we have no way to
have that conversation.

1121
00:48:07,480 --> 00:48:09,620
So it's not that we necessarily
need a different

1122
00:48:09,620 --> 00:48:12,420
bar or a different bouncer, but
I think those are just one

1123
00:48:12,420 --> 00:48:15,070
way of saying we need multiple
levels of collaboration and

1124
00:48:15,070 --> 00:48:17,520
cooperation, and we don't have
any of that right now.

1125
00:48:17,520 --> 00:48:20,900
MARK CHRISTIAN: This goes to the
philosophical web idea of

1126
00:48:20,900 --> 00:48:22,070
the user agent knows best.

1127
00:48:22,070 --> 00:48:24,110
Even when we talk about some
of the new ideas, there's

1128
00:48:24,110 --> 00:48:25,960
these heuristics on caching.

1129
00:48:25,960 --> 00:48:28,780
And we've never really decided
to empower the app developer

1130
00:48:28,780 --> 00:48:30,240
to have much of a say in this.

1131
00:48:30,240 --> 00:48:31,145
ALEX RUSSELL: Well,
let's be clear.

1132
00:48:31,145 --> 00:48:33,640
The user agent is in control.

1133
00:48:33,640 --> 00:48:35,930
It may not know best, but it's
certainly in control, because

1134
00:48:35,930 --> 00:48:38,400
we're putting users in control
of their system and their

1135
00:48:38,400 --> 00:48:39,150
experience.

1136
00:48:39,150 --> 00:48:44,250
So the imperative for the user
agent to have the last say is

1137
00:48:44,250 --> 00:48:45,980
all about giving users
the last say.

1138
00:48:45,980 --> 00:48:49,660
And so that's an inviolable
principle of a safe web.

1139
00:48:49,660 --> 00:48:52,210
The answer was, well, shouldn't
we just count on

1140
00:48:52,210 --> 00:48:53,030
everyone being nice?

1141
00:48:53,030 --> 00:48:54,992
And the answer is,
no, advertisers.

1142
00:48:54,992 --> 00:48:57,770
Duh.

1143
00:48:57,770 --> 00:48:59,520
MARK CHRISTIAN: It's still a
very different model than

1144
00:48:59,520 --> 00:49:00,500
native apps, though.

1145
00:49:00,500 --> 00:49:02,940
And I'm not saying it's a
bad model, but it's just

1146
00:49:02,940 --> 00:49:05,040
interesting that native apps
don't have the same set of

1147
00:49:05,040 --> 00:49:05,700
constraints on them.

1148
00:49:05,700 --> 00:49:08,500
Once they're on the app, then
they can do all of these

1149
00:49:08,500 --> 00:49:09,510
things within the sandbox.

1150
00:49:09,510 --> 00:49:11,520
And in general, the sandbox that
you'll get on a native

1151
00:49:11,520 --> 00:49:15,030
platform is very much wider than
the sandbox that you'll

1152
00:49:15,030 --> 00:49:16,830
get as a random website.

1153
00:49:16,830 --> 00:49:19,240
JONAS SICKING: Yeah, but there's
still a very big

1154
00:49:19,240 --> 00:49:21,770
difference from a random website
and a native app.

1155
00:49:21,770 --> 00:49:25,630
Within a native app, the user
has made a decision that I

1156
00:49:25,630 --> 00:49:30,410
care about this app, at the very
least enough to bother

1157
00:49:30,410 --> 00:49:32,300
with download time.

1158
00:49:32,300 --> 00:49:36,220
But it's even more to the point
that the user has said,

1159
00:49:36,220 --> 00:49:40,560
I trust this website to
do a lot of things.

1160
00:49:40,560 --> 00:49:42,640
Most native apps can take
over your system.

1161
00:49:42,640 --> 00:49:45,970
So the user has clearly
indicated that there's some

1162
00:49:45,970 --> 00:49:46,460
amount of trust.

1163
00:49:46,460 --> 00:49:50,560
And so we can't really ever give
the random website that

1164
00:49:50,560 --> 00:49:53,390
the user's visiting the first
time the same amount of trust

1165
00:49:53,390 --> 00:49:54,830
as a native app has.

1166
00:49:54,830 --> 00:49:58,570
But this is where I think this
smooth transition from going

1167
00:49:58,570 --> 00:50:01,790
from untrusted to trusted
needs to happen.

1168
00:50:01,790 --> 00:50:03,380
ANDREW BETTIS: Is it ever
reasonable that you could

1169
00:50:03,380 --> 00:50:05,410
visit a random website and it
could prompt you saying, this

1170
00:50:05,410 --> 00:50:07,350
website wants to completely take
over your computer, do

1171
00:50:07,350 --> 00:50:08,360
you want to allow this?

1172
00:50:08,360 --> 00:50:10,880
ALEX RUSSELL: Sure, we
have that today.

1173
00:50:10,880 --> 00:50:16,370
JONAS SICKING: I don't think we
should have the question to

1174
00:50:16,370 --> 00:50:19,450
the user, click the yes button
if you want your system

1175
00:50:19,450 --> 00:50:21,340
entirely taken over, click
the no button if not.

1176
00:50:21,340 --> 00:50:24,520
Because some people will click
the yes button not knowing

1177
00:50:24,520 --> 00:50:25,010
what their doing.

1178
00:50:25,010 --> 00:50:28,520
So we need to be more
careful than that.

1179
00:50:28,520 --> 00:50:30,840
ALEX RUSSELL: I like to think
about this as what are you

1180
00:50:30,840 --> 00:50:32,050
getting back for friction?

1181
00:50:32,050 --> 00:50:35,350
So in native apps, there's
much more friction to

1182
00:50:35,350 --> 00:50:37,120
discovery and use.

1183
00:50:37,120 --> 00:50:40,360
I have to know that I want it
or be told that I want it or

1184
00:50:40,360 --> 00:50:44,120
be advertised to as something I
should want and then go buy

1185
00:50:44,120 --> 00:50:46,140
it off the friction of
finding this thing.

1186
00:50:46,140 --> 00:50:48,370
Whereas the web has this amazing
model where there's a

1187
00:50:48,370 --> 00:50:52,490
zero friction to navigate
and use a new thing.

1188
00:50:52,490 --> 00:50:53,590
Identity is a problem.

1189
00:50:53,590 --> 00:50:55,920
We've got a lot of other things
which add incidental

1190
00:50:55,920 --> 00:50:58,700
friction over time, but
generally speaking, we have

1191
00:50:58,700 --> 00:51:03,020
paid application developers back
1,000 fold for putting

1192
00:51:03,020 --> 00:51:05,480
something on the web by reducing
the friction to using

1193
00:51:05,480 --> 00:51:07,090
to almost nothing.

1194
00:51:07,090 --> 00:51:09,310
And native app models induce
this friction.

1195
00:51:09,310 --> 00:51:12,850
And I think that Jonas is
entirely correct that that

1196
00:51:12,850 --> 00:51:15,620
smooth transition needs to get
you to a point where in order

1197
00:51:15,620 --> 00:51:17,520
to get the same capabilities
that you would give to a

1198
00:51:17,520 --> 00:51:19,560
native app, you have to have
the same level of friction.

1199
00:51:19,560 --> 00:51:24,020
Because the constraints that you
impose at those points are

1200
00:51:24,020 --> 00:51:28,010
reasonable, and both sets of
system authors have made

1201
00:51:28,010 --> 00:51:29,810
choices about which constraints
are going to

1202
00:51:29,810 --> 00:51:34,190
impose at each level of friction
under all the same

1203
00:51:34,190 --> 00:51:35,070
considerations.

1204
00:51:35,070 --> 00:51:38,990
They're saying, if you browse to
an ephemeral web page, then

1205
00:51:38,990 --> 00:51:41,120
you get whatever level
of effort you put

1206
00:51:41,120 --> 00:51:42,220
into browsing there.

1207
00:51:42,220 --> 00:51:45,630
And if you install something,
you get maybe more privilege

1208
00:51:45,630 --> 00:51:47,970
and more process available
to you.

1209
00:51:47,970 --> 00:51:49,360
And I think that's
the right model.

1210
00:51:49,360 --> 00:51:52,210
And so yeah, I think that's
going to be the endpoint, is

1211
00:51:52,210 --> 00:51:53,760
well, it will have that
much friction.

1212
00:51:53,760 --> 00:51:55,820
And having that much friction
will get you that much.

1213
00:51:55,820 --> 00:51:56,850
MARK CHRISTIAN: The smooth
gradient's a really

1214
00:51:56,850 --> 00:51:57,660
interesting model.

1215
00:51:57,660 --> 00:52:00,620
But I just think that as we're
designing new APIs, we should

1216
00:52:00,620 --> 00:52:03,780
make sure that we actually try
to figure out, what does that

1217
00:52:03,780 --> 00:52:04,750
smooth gradient look like?

1218
00:52:04,750 --> 00:52:07,980
And how can we make the APIs
flexible enough to have a

1219
00:52:07,980 --> 00:52:10,210
difference between it's either
working completely or it

1220
00:52:10,210 --> 00:52:12,010
doesn't work at all?

1221
00:52:12,010 --> 00:52:13,840
ANDREW BETTIS: I think we should
probably move on and

1222
00:52:13,840 --> 00:52:16,190
talk about what we can do today
rather than what we

1223
00:52:16,190 --> 00:52:16,990
should be doing tomorrow.

1224
00:52:16,990 --> 00:52:22,030
So one of the most popular
questions we have is--

1225
00:52:22,030 --> 00:52:24,730
a lot of people are stuffing
fonts, images, and JavaScript

1226
00:52:24,730 --> 00:52:26,660
in local storage for
fasting loading.

1227
00:52:26,660 --> 00:52:31,590
Should we be discouraging
this, which is something

1228
00:52:31,590 --> 00:52:32,160
[INAUDIBLE]

1229
00:52:32,160 --> 00:52:33,460
was saying at [INAUDIBLE]

1230
00:52:33,460 --> 00:52:34,810
and us as well.

1231
00:52:34,810 --> 00:52:38,340
So what would you say
to that, Alex?

1232
00:52:38,340 --> 00:52:39,400
ALEX RUSSELL: Is it
working for you?

1233
00:52:39,400 --> 00:52:42,410
If so, go for it.

1234
00:52:42,410 --> 00:52:44,750
I mean, I come from a dirty
JavaScript hacker background.

1235
00:52:44,750 --> 00:52:47,170
Man, if it works, run.

1236
00:52:47,170 --> 00:52:48,100
Run with it as far as it goes.

1237
00:52:48,100 --> 00:52:48,590
But measure.

1238
00:52:48,590 --> 00:52:49,390
Measure, measure, measure.

1239
00:52:49,390 --> 00:52:52,030
If it's actually faster,
heck yes.

1240
00:52:52,030 --> 00:52:52,890
Make the web faster.

1241
00:52:52,890 --> 00:52:54,600
Go, do it.

1242
00:52:54,600 --> 00:52:57,020
ANDREW BETTIS: So do we need
to be aware of what pain

1243
00:52:57,020 --> 00:52:58,620
that's storing up for
us in the future?

1244
00:52:58,620 --> 00:53:01,850
And how much pain is that
storing up for us in future?

1245
00:53:01,850 --> 00:53:02,280
ALEX RUSSELL: A lot.

1246
00:53:02,280 --> 00:53:07,490
So let me tell you
all about it.

1247
00:53:07,490 --> 00:53:11,630
So you'll notice if you're
stuffing a lot of stuff into

1248
00:53:11,630 --> 00:53:14,960
local storage that you'll see
some really strange behavioral

1249
00:53:14,960 --> 00:53:19,110
differences between IE9 and 10,
and Firefox and Chrome,

1250
00:53:19,110 --> 00:53:23,100
with regards to potentially
getting out of sync across

1251
00:53:23,100 --> 00:53:26,050
tabs or across Windows with
regards to try to communicate

1252
00:53:26,050 --> 00:53:27,120
over a local storage.

1253
00:53:27,120 --> 00:53:28,300
Well, why is that?

1254
00:53:28,300 --> 00:53:30,460
Local storage is a
synchronous API.

1255
00:53:30,460 --> 00:53:33,510
This is generally speaking in
terms of web API design a

1256
00:53:33,510 --> 00:53:34,960
terrible, terrible thing.

1257
00:53:34,960 --> 00:53:36,010
This is a bad thing.

1258
00:53:36,010 --> 00:53:39,450
It's the reason that IndexDB
is coming along--

1259
00:53:39,450 --> 00:53:41,790
which is available, I think, in
IE10 and it's available in

1260
00:53:41,790 --> 00:53:44,187
Chrome and it's coming along
in other places, too.

1261
00:53:44,187 --> 00:53:45,350
JAKE ARCHIBALD: Another
terrible, terrible thing.

1262
00:53:45,350 --> 00:53:45,660
ALEX RUSSELL: I know.

1263
00:53:45,660 --> 00:53:48,230
It's harder to use, right?

1264
00:53:48,230 --> 00:53:49,310
So that was the pain.

1265
00:53:49,310 --> 00:53:55,190
So that pain generated this new
system which isn't widely

1266
00:53:55,190 --> 00:53:56,860
enough deployed yet.

1267
00:53:56,860 --> 00:54:02,090
And so folks find out that
there's an implicit cross tab

1268
00:54:02,090 --> 00:54:05,765
synchronization issue with local
storage because the API

1269
00:54:05,765 --> 00:54:07,890
is synchronous for all the tabs
that can see the same

1270
00:54:07,890 --> 00:54:08,740
local store.

1271
00:54:08,740 --> 00:54:09,730
This isn't great.

1272
00:54:09,730 --> 00:54:11,010
This is actually relatively
terrible.

1273
00:54:11,010 --> 00:54:12,920
So we need an asynchronous
version of local storage.

1274
00:54:12,920 --> 00:54:14,720
So one of these you're biting
off is a huge performance

1275
00:54:14,720 --> 00:54:17,420
issue because you'll start
loading your web page, you'll

1276
00:54:17,420 --> 00:54:20,900
ask local storage early in the
document load to go grab you

1277
00:54:20,900 --> 00:54:22,770
some resource, and you
think it's fast.

1278
00:54:22,770 --> 00:54:25,040
Except we're brand
new to this.

1279
00:54:25,040 --> 00:54:27,630
We might have put this in a
SQLite database on a per local

1280
00:54:27,630 --> 00:54:29,540
store or per origin basis.

1281
00:54:29,540 --> 00:54:32,350
We have to go do synchronize IO
to go load that database,

1282
00:54:32,350 --> 00:54:34,790
block that web page, by the way,
while we're doing this,

1283
00:54:34,790 --> 00:54:38,250
block the main thread, go do a
bunch of IO, and then give you

1284
00:54:38,250 --> 00:54:39,780
the answer.

1285
00:54:39,780 --> 00:54:41,040
This is terrible for
performance.

1286
00:54:41,040 --> 00:54:41,910
ANDREW BETTIS: OK, so I get it.

1287
00:54:41,910 --> 00:54:42,195
I get it.

1288
00:54:42,195 --> 00:54:42,690
It's painful.

1289
00:54:42,690 --> 00:54:46,030
So should we just not do it
and wait for this amazing

1290
00:54:46,030 --> 00:54:47,450
navigation controller
to appear?

1291
00:54:47,450 --> 00:54:48,590
ALEX RUSSELL: No, you
should measure.

1292
00:54:48,590 --> 00:54:49,920
You should measure,
measure, measure.

1293
00:54:49,920 --> 00:54:51,950
And once you've measured, you'll
have an answer about

1294
00:54:51,950 --> 00:54:52,960
whether or not it's
better or worse.

1295
00:54:52,960 --> 00:54:54,210
But you won't until
you measure.

1296
00:54:54,210 --> 00:54:57,550

1297
00:54:57,550 --> 00:54:59,390
JONAS SICKING: So I
think there's two

1298
00:54:59,390 --> 00:55:01,430
separate questions here.

1299
00:55:01,430 --> 00:55:05,010
Taking resources and storing
them locally on the client

1300
00:55:05,010 --> 00:55:09,790
side, I think, it's a good
workaround to do until we get

1301
00:55:09,790 --> 00:55:14,990
things like this controller
thing, until we fix AppCache,

1302
00:55:14,990 --> 00:55:17,800
until we get other mechanisms in
place that actually make it

1303
00:55:17,800 --> 00:55:20,610
a pleasurable experience to
develop these solutions.

1304
00:55:20,610 --> 00:55:25,970

1305
00:55:25,970 --> 00:55:30,850
So the local storage issue of
being asynchronous API--

1306
00:55:30,850 --> 00:55:32,840
please to measure it, but it's
actually really, really hard

1307
00:55:32,840 --> 00:55:33,230
to measure.

1308
00:55:33,230 --> 00:55:39,030
The problem is that what a lot
of asynchronous IO, which A,

1309
00:55:39,030 --> 00:55:41,320
is very, very dependent
on a device.

1310
00:55:41,320 --> 00:55:42,460
You can't measure it locally.

1311
00:55:42,460 --> 00:55:46,700
You need to measure it on
your users' devices.

1312
00:55:46,700 --> 00:55:51,850
The other problem is that it's
not a performance hit that

1313
00:55:51,850 --> 00:55:54,100
happens every time you
use local storage.

1314
00:55:54,100 --> 00:55:57,650
It happens probably the
first time you see it.

1315
00:55:57,650 --> 00:55:59,370
And even just like calling--

1316
00:55:59,370 --> 00:56:01,270
we've had some benchmarks that
the first thing it does, it

1317
00:56:01,270 --> 00:56:03,480
calls localStorage.clear
and then it

1318
00:56:03,480 --> 00:56:04,875
starts using local storage.

1319
00:56:04,875 --> 00:56:07,020
But at the time you called the
localStorage.clear, that's

1320
00:56:07,020 --> 00:56:08,920
actually when the performance
hit happens.

1321
00:56:08,920 --> 00:56:11,030
Local storage, I would say,
is hard enough to measure

1322
00:56:11,030 --> 00:56:12,970
performance of that
you probably

1323
00:56:12,970 --> 00:56:13,940
will not get it right.

1324
00:56:13,940 --> 00:56:18,540
What we're doing in Firefox at
22, 21 or something is we're

1325
00:56:18,540 --> 00:56:20,880
actually going to pre-load local
storage before we're

1326
00:56:20,880 --> 00:56:22,310
even running scripts.

1327
00:56:22,310 --> 00:56:23,790
So that performance hit
is not something

1328
00:56:23,790 --> 00:56:25,410
you can't even measure.

1329
00:56:25,410 --> 00:56:28,320
And the reason we're doing that
is because hopefully in

1330
00:56:28,320 --> 00:56:31,800
those cases, we can do this
IO before we're even

1331
00:56:31,800 --> 00:56:34,200
attempting to use it.

1332
00:56:34,200 --> 00:56:39,130
It does have the effect that
we're going to do more IO for

1333
00:56:39,130 --> 00:56:43,330
each and every page on your
website as soon as you use

1334
00:56:43,330 --> 00:56:44,540
local storage.

1335
00:56:44,540 --> 00:56:49,860
But that's to avoid halting
the thread and having your

1336
00:56:49,860 --> 00:56:52,700
site look up while you're
doing this IO.

1337
00:56:52,700 --> 00:56:55,890
So local storage's performance
is really, really tricky.

1338
00:56:55,890 --> 00:57:00,350
So IndexDB has issues.

1339
00:57:00,350 --> 00:57:02,040
Those are, in big
part, my fault.

1340
00:57:02,040 --> 00:57:05,130
I'm one of the editors
for that spec.

1341
00:57:05,130 --> 00:57:07,650
We do need something like
asynchronous local storage,

1342
00:57:07,650 --> 00:57:10,520
which is as simple as local
storage but doesn't have the

1343
00:57:10,520 --> 00:57:12,190
synchronous problem.

1344
00:57:12,190 --> 00:57:15,480
So that hopefully
will come soon.

1345
00:57:15,480 --> 00:57:18,600
ALEX RUSSELL: I'm hoping
for that, too.

1346
00:57:18,600 --> 00:57:23,260
ANDREW BETTIS: OK, so in the
meantime, do you think that

1347
00:57:23,260 --> 00:57:28,380
the fact that developers love
local storage and don't like

1348
00:57:28,380 --> 00:57:32,730
APIs like IndexDB is an
indication that we need to

1349
00:57:32,730 --> 00:57:39,035
simplify IndexDB and Web SQL
and those sort of APIs?

1350
00:57:39,035 --> 00:57:40,010
ALEX RUSSELL: Yes, absolutely.

1351
00:57:40,010 --> 00:57:42,800
So one of the things that I've
been working on over the last

1352
00:57:42,800 --> 00:57:46,540
couple of months is to add
a futures primitive.

1353
00:57:46,540 --> 00:57:48,740
So you might have promises
in your libraries.

1354
00:57:48,740 --> 00:57:50,980
We're just going to ignore the
fight over what it means to

1355
00:57:50,980 --> 00:57:51,530
have a promise.

1356
00:57:51,530 --> 00:57:52,490
We're going to call
it a future.

1357
00:57:52,490 --> 00:57:53,410
It's a different thing.

1358
00:57:53,410 --> 00:57:54,160
Same API.

1359
00:57:54,160 --> 00:57:57,010
.then, and then you can add
whatever callbacks you want to

1360
00:57:57,010 --> 00:57:59,520
success and failure,
accept or reject.

1361
00:57:59,520 --> 00:58:00,060
OK, cool.

1362
00:58:00,060 --> 00:58:03,010
So we're building a spec for
futures for DOM, so we can

1363
00:58:03,010 --> 00:58:06,460
start to reinterpret a lot of
these asynchronous things in a

1364
00:58:06,460 --> 00:58:07,490
more unified way.

1365
00:58:07,490 --> 00:58:09,760
Because events aren't really the
right model for something

1366
00:58:09,760 --> 00:58:12,170
that is a single request.

1367
00:58:12,170 --> 00:58:14,390
If I get one thing out of local
storage, I'm only asking

1368
00:58:14,390 --> 00:58:15,040
for one thing back.

1369
00:58:15,040 --> 00:58:17,940
I'm not asking for a potential
stream of things to happen

1370
00:58:17,940 --> 00:58:19,750
zero or more times in
the future, which

1371
00:58:19,750 --> 00:58:20,540
is the event model.

1372
00:58:20,540 --> 00:58:25,370
So I have hope that we'll be
able to build a saner version

1373
00:58:25,370 --> 00:58:28,090
of a lot of these APIs to stop
using events and stop using

1374
00:58:28,090 --> 00:58:32,810
implicit asynchronicity and end
of term behavior and make

1375
00:58:32,810 --> 00:58:36,440
it much more explicit in the
APIs, do an asynchronous local

1376
00:58:36,440 --> 00:58:40,820
storage on top of something like
this, and then Web Crypto

1377
00:58:40,820 --> 00:58:45,700
and IndexDB, I think all these
APIs can be retrofitted with

1378
00:58:45,700 --> 00:58:48,240
this model so that we get a
much more rational API.

1379
00:58:48,240 --> 00:58:51,620
I think a lot of this is down to
the APIs not really having

1380
00:58:51,620 --> 00:58:53,090
great idioms baked into them.

1381
00:58:53,090 --> 00:58:55,330
And it's one of these
traditional DOM versus the

1382
00:58:55,330 --> 00:58:58,000
rest of the JavaScript world
discussions, which I'm happy

1383
00:58:58,000 --> 00:59:00,440
to talk to you about over
beer endlessly.

1384
00:59:00,440 --> 00:59:01,840
ANDREW BETTIS: So how long
until we get navigation

1385
00:59:01,840 --> 00:59:03,090
controller?

1386
00:59:03,090 --> 00:59:07,510

1387
00:59:07,510 --> 00:59:09,770
JAKE ARCHIBALD: I'm not taking
responsibility for that.

1388
00:59:09,770 --> 00:59:14,510
JONAS SICKING: So the space of
fixing the AppCache where

1389
00:59:14,510 --> 00:59:19,770
navigation controller is a very
interesting proposal is

1390
00:59:19,770 --> 00:59:24,200
something that for some reason
we had a very, very hard time

1391
00:59:24,200 --> 00:59:26,940
actually getting to the point
of having proposals.

1392
00:59:26,940 --> 00:59:29,810
I would say we've been working
on this for well over a year

1393
00:59:29,810 --> 00:59:33,390
and a half, probably two years,
on just people ranting

1394
00:59:33,390 --> 00:59:35,820
about how much AppCache
sucks, but there has

1395
00:59:35,820 --> 00:59:36,870
not been any proposals.

1396
00:59:36,870 --> 00:59:38,180
There are now two proposals.

1397
00:59:38,180 --> 00:59:39,700
There's the controller thing.

1398
00:59:39,700 --> 00:59:42,760
Mozilla also has a proposal that
we're hopefully going to

1399
00:59:42,760 --> 00:59:45,660
present very soon.

1400
00:59:45,660 --> 00:59:47,930
And I think that's an enormously
good first step.

1401
00:59:47,930 --> 00:59:52,550
What we need to do once we have
these proposals is to get

1402
00:59:52,550 --> 00:59:54,370
feedback from everyone
that has been

1403
00:59:54,370 --> 00:59:55,620
complaining about AppCache.

1404
00:59:55,620 --> 00:59:59,180

1405
00:59:59,180 --> 01:00:01,810
The two proposals are actually
very complementary, so they

1406
01:00:01,810 --> 01:00:04,980
actually combine very well.

1407
01:00:04,980 --> 01:00:06,530
If you had these two
things, would

1408
01:00:06,530 --> 01:00:07,930
that solve your problems?

1409
01:00:07,930 --> 01:00:11,670
Or would this just be
a less sucky way?

1410
01:00:11,670 --> 01:00:15,080
So we have a very
good first step.

1411
01:00:15,080 --> 01:00:17,930
It will take a little bit to
get this stuff implemented,

1412
01:00:17,930 --> 01:00:22,530
but I think it'll take a lot
less than the well over a year

1413
01:00:22,530 --> 01:00:26,050
that we've been complaining
about AppCache.

1414
01:00:26,050 --> 01:00:29,470
JAKE ARCHIBALD: So on the
simple APIs, do we build

1415
01:00:29,470 --> 01:00:32,060
something really low level and
maybe a bit more complicated

1416
01:00:32,060 --> 01:00:33,475
to deal with, or do
we just try and go

1417
01:00:33,475 --> 01:00:35,660
as simple as possible?

1418
01:00:35,660 --> 01:00:38,850
We want something as simple
as possible, but look what

1419
01:00:38,850 --> 01:00:39,950
happened to AppCache.

1420
01:00:39,950 --> 01:00:42,440
They made something that was
really, really simple, but

1421
01:00:42,440 --> 01:00:44,830
they didn't know what people
really wanted to do with it,

1422
01:00:44,830 --> 01:00:46,295
so they made some things
simple and useless.

1423
01:00:46,295 --> 01:00:48,980

1424
01:00:48,980 --> 01:00:52,847
Whereas with local storage, that
was the simple and easy

1425
01:00:52,847 --> 01:00:55,290
to use but had massive
performance problems.

1426
01:00:55,290 --> 01:00:58,150
So I like the world where you
might have something like

1427
01:00:58,150 --> 01:01:01,130
IndexDB, where it's what you can
do with it-- there's loads

1428
01:01:01,130 --> 01:01:02,090
you can do with it--

1429
01:01:02,090 --> 01:01:04,000
but then have a look at what
the use cases are.

1430
01:01:04,000 --> 01:01:06,570
See what code you see people
repeating over and over.

1431
01:01:06,570 --> 01:01:08,790
What are people using libraries
for, and how can we

1432
01:01:08,790 --> 01:01:09,910
get that into the problem?

1433
01:01:09,910 --> 01:01:11,730
You see that happening
with the DOM now.

1434
01:01:11,730 --> 01:01:13,960
querySelectorAll was one
of those things.

1435
01:01:13,960 --> 01:01:15,010
We see jQuery doing it.

1436
01:01:15,010 --> 01:01:17,930
We can make jQuery faster by
having that on the platform,

1437
01:01:17,930 --> 01:01:20,370
and people maybe wouldn't
have to use jQuery

1438
01:01:20,370 --> 01:01:21,570
if that's the case.

1439
01:01:21,570 --> 01:01:24,580
So that's what I see going
with the navigation

1440
01:01:24,580 --> 01:01:25,290
controller.

1441
01:01:25,290 --> 01:01:28,920
Some of the code that I showed
on there was stuff I made up.

1442
01:01:28,920 --> 01:01:31,460
There was a routing function,
which is something that

1443
01:01:31,460 --> 01:01:33,800
probably won't be there in the
initial spec, but it's

1444
01:01:33,800 --> 01:01:36,420
something you can create
yourself or something a

1445
01:01:36,420 --> 01:01:39,380
library can give you.

1446
01:01:39,380 --> 01:01:43,110
And we'll be able to see what
people are doing and if

1447
01:01:43,110 --> 01:01:45,950
there's common patterns or a lot
of repeated code, then we

1448
01:01:45,950 --> 01:01:49,150
can put that in the platform and
make it quicker and make

1449
01:01:49,150 --> 01:01:50,406
it less typing.

1450
01:01:50,406 --> 01:01:52,600
MARK CHRISTIAN: Yeah, we can
trust that libraries will come

1451
01:01:52,600 --> 01:01:52,790
into existence.

1452
01:01:52,790 --> 01:01:54,920
It's something that we can
rely on on the web.

1453
01:01:54,920 --> 01:01:58,310
So we should build for
flexibility instead of stupid

1454
01:01:58,310 --> 01:02:00,600
simplicity.

1455
01:02:00,600 --> 01:02:01,760
ANDREW BETTIS: Well,
we're out of time.

1456
01:02:01,760 --> 01:02:03,000
So thanks, everyone.

1457
01:02:03,000 --> 01:02:03,900
And that's the end
of the panel.

1458
01:02:03,900 --> 01:02:10,500
[APPLAUSE]

1459
01:02:10,500 --> 01:02:13,233

1
00:00:00,000 --> 00:00:05,880

2
00:00:05,880 --> 00:00:07,080
IVAN ZUZAK: Hey, everyone.

3
00:00:07,080 --> 00:00:11,170
So I noticed on Moderator that
someone said, why do we have

4
00:00:11,170 --> 00:00:13,870
testing and tooling
in the same panel?

5
00:00:13,870 --> 00:00:17,470
So we will try to cover
both topics equally.

6
00:00:17,470 --> 00:00:23,060
And with that, please join me
in welcoming Simon Stewart.

7
00:00:23,060 --> 00:00:26,720
He works at Facebook, and he is
known for creating Selenium

8
00:00:26,720 --> 00:00:28,890
and WebDriver.

9
00:00:28,890 --> 00:00:34,070
Next to him is Remy Sharp, who
is the creator of JS Bin, JS

10
00:00:34,070 --> 00:00:38,720
Console, and he curates the
Full Frontal conference.

11
00:00:38,720 --> 00:00:41,530
David Blooman from BBC
News, who is the

12
00:00:41,530 --> 00:00:43,180
testing superhero there.

13
00:00:43,180 --> 00:00:46,030
And next to him is Paul Irish,
who is our opener.

14
00:00:46,030 --> 00:00:50,510
He is a guru on the Chrome
Developer Relations team.

15
00:00:50,510 --> 00:00:55,360
And he's also known for many,
many developer tools, such as

16
00:00:55,360 --> 00:00:58,240
Modernizr, Yeoman, et
cetera, et cetera.

17
00:00:58,240 --> 00:01:03,400
So I will invite Paul to give
an excellent introduction.

18
00:01:03,400 --> 00:01:09,040
[APPLAUSE]

19
00:01:09,040 --> 00:01:11,370
PAUL IRISH: All right.

20
00:01:11,370 --> 00:01:13,290
I'm going to go fast on this.

21
00:01:13,290 --> 00:01:16,040
And I apologize, because I'm
speaking with an accent, for

22
00:01:16,040 --> 00:01:17,896
probably most of you.

23
00:01:17,896 --> 00:01:19,520
But we're going to go quick.

24
00:01:19,520 --> 00:01:21,410
First, I'm going to give
a lay of the land

25
00:01:21,410 --> 00:01:22,730
of the tooling ecosystem.

26
00:01:22,730 --> 00:01:26,330
And then I'm going to give a few
demos showcasing some of

27
00:01:26,330 --> 00:01:29,570
the cool stuff that's emerging
or things you might have not

28
00:01:29,570 --> 00:01:31,670
seen in this area.

29
00:01:31,670 --> 00:01:34,490
So first, it's hard to
conceptualize as far as all

30
00:01:34,490 --> 00:01:36,790
the things that are captured
by tooling.

31
00:01:36,790 --> 00:01:37,980
This is one approach--

32
00:01:37,980 --> 00:01:39,650
Addy Osmani and I
worked on this--

33
00:01:39,650 --> 00:01:42,480
kind of laying out a bunch of
the tools as far as the life

34
00:01:42,480 --> 00:01:45,280
cycle of a project, from
boilerplate to abstractions,

35
00:01:45,280 --> 00:01:48,130
the application stack, and then
into workflow performance

36
00:01:48,130 --> 00:01:49,440
and builds.

37
00:01:49,440 --> 00:01:53,040
But then we in the group here
were thinking about something

38
00:01:53,040 --> 00:01:54,220
along these lines, too--

39
00:01:54,220 --> 00:01:56,330
this is very much in
the tooling vein--

40
00:01:56,330 --> 00:01:59,970
the package and dependency
management of my application

41
00:01:59,970 --> 00:02:01,010
source code.

42
00:02:01,010 --> 00:02:03,260
What my editing experience is
like, what the tools that the

43
00:02:03,260 --> 00:02:05,790
browser actually provides is.

44
00:02:05,790 --> 00:02:07,820
When it comes to testing, both
unit testing, integration

45
00:02:07,820 --> 00:02:08,979
testing, CSS testing.

46
00:02:08,979 --> 00:02:10,860
I'm going to show a demo
of some of that.

47
00:02:10,860 --> 00:02:13,340
Then build and deployment, how
I'm automating browsers.

48
00:02:13,340 --> 00:02:15,190
I'm probably going to be doing
that inside Continuous

49
00:02:15,190 --> 00:02:16,290
Integration.

50
00:02:16,290 --> 00:02:17,700
And then there's a lot
inside mobile.

51
00:02:17,700 --> 00:02:20,690
So handling mobile devices,
whether they're local or in

52
00:02:20,690 --> 00:02:23,000
the cloud, there's a lot.

53
00:02:23,000 --> 00:02:24,520
So I want to dive into
a few things.

54
00:02:24,520 --> 00:02:29,730
So CSS testing, this is a
fantastic slide deck and site

55
00:02:29,730 --> 00:02:31,870
put together by Simon Madine.

56
00:02:31,870 --> 00:02:34,040
This is focused on
four styles.

57
00:02:34,040 --> 00:02:36,620
How can we better have
a feel for if we're

58
00:02:36,620 --> 00:02:37,810
screwing up or not?

59
00:02:37,810 --> 00:02:40,310
One of the projects that's
listed here--

60
00:02:40,310 --> 00:02:44,560
a number of these are pretty
young projects, but this one,

61
00:02:44,560 --> 00:02:46,480
called Fighting Layout Bugs,
has been around for about

62
00:02:46,480 --> 00:02:48,420
three years.

63
00:02:48,420 --> 00:02:51,230
And it's actually offered
in Java, mostly

64
00:02:51,230 --> 00:02:52,910
for use with Maven.

65
00:02:52,910 --> 00:02:55,040
And it does things like
these five tests here.

66
00:02:55,040 --> 00:02:56,260
One of them is DetectTextNearOr

67
00:02:56,260 --> 00:02:57,510
OverlappingVerticalEdge.

68
00:02:57,510 --> 00:03:01,970

69
00:03:01,970 --> 00:03:04,670
But what you'll end up
is this sort of test.

70
00:03:04,670 --> 00:03:07,210
So it can actually detect when
you have text that's running

71
00:03:07,210 --> 00:03:09,380
up against something
like an image or

72
00:03:09,380 --> 00:03:11,150
even overflowing here.

73
00:03:11,150 --> 00:03:13,610
And this is completely
automated, so on every commit,

74
00:03:13,610 --> 00:03:16,300
Finding Layout Bugs is going to
make sure that you do not

75
00:03:16,300 --> 00:03:19,370
have one of these problems
in your target browsers.

76
00:03:19,370 --> 00:03:22,110
Pretty cool.

77
00:03:22,110 --> 00:03:24,045
So you might be running this
inside Continuous Integration,

78
00:03:24,045 --> 00:03:26,280
and I've seen a lot of movement
here recently.

79
00:03:26,280 --> 00:03:28,850
Travis has kind of opened up
everyone's eyes in the open

80
00:03:28,850 --> 00:03:32,750
source world, as far as
what can be done here.

81
00:03:32,750 --> 00:03:37,920
This here is Travis running
the new Dojo 2 tests.

82
00:03:37,920 --> 00:03:43,050
And so actually, Travis pulled
down the latest Dojo 2 source,

83
00:03:43,050 --> 00:03:46,590
built out what it needed, and
then it connected up to Sauce

84
00:03:46,590 --> 00:03:50,210
Labs, and opened up a bunch of
desktop and mobile browsers,

85
00:03:50,210 --> 00:03:54,190
and ran the test suite of
Dojo 2 on all of them.

86
00:03:54,190 --> 00:03:56,700
Reported back, and now for every
single commit and every

87
00:03:56,700 --> 00:04:00,270
single pull request, we know
if we are looking good and

88
00:04:00,270 --> 00:04:01,520
green or not.

89
00:04:01,520 --> 00:04:03,950

90
00:04:03,950 --> 00:04:05,930
Telemetry was mentioned
a little bit before.

91
00:04:05,930 --> 00:04:09,860
And I just wanted to give a
better idea of what it does

92
00:04:09,860 --> 00:04:10,950
and how it works.

93
00:04:10,950 --> 00:04:15,210
Unfortunately, it requires a
check out of the Chromium code

94
00:04:15,210 --> 00:04:17,200
base, which is about five gigs,
and I didn't want to

95
00:04:17,200 --> 00:04:18,279
pull that down on the Wi-Fi.

96
00:04:18,279 --> 00:04:21,149
So let me just talk it out.

97
00:04:21,149 --> 00:04:22,830
Telemetry would take something
like this page.

98
00:04:22,830 --> 00:04:25,290
Now, it's going to do something
like scroll the page

99
00:04:25,290 --> 00:04:27,950
down, and it's going
to pop back up and

100
00:04:27,950 --> 00:04:29,240
scroll it down again.

101
00:04:29,240 --> 00:04:31,570
While it did those two things,
it's going to be extracting a

102
00:04:31,570 --> 00:04:33,070
bunch of metrics from
the browser.

103
00:04:33,070 --> 00:04:34,110
Like what was the paint rate?

104
00:04:34,110 --> 00:04:37,240
How many million pixels per
second are being painted?

105
00:04:37,240 --> 00:04:39,260
What was the FPS?

106
00:04:39,260 --> 00:04:41,120
And now it's going to take all
these metrics and provide them

107
00:04:41,120 --> 00:04:41,730
to me in a nice way.

108
00:04:41,730 --> 00:04:44,300
And then I can take this and
plot it out against time or

109
00:04:44,300 --> 00:04:46,870
against all my commits and
see, are my performance

110
00:04:46,870 --> 00:04:49,010
thresholds being met
as the project is

111
00:04:49,010 --> 00:04:50,550
growing and as it's living?

112
00:04:50,550 --> 00:04:54,010
Or are me and my teammate adding
things to it that kill

113
00:04:54,010 --> 00:04:56,050
the visual performance?

114
00:04:56,050 --> 00:04:57,770
So there's a lot
of power here.

115
00:04:57,770 --> 00:04:59,940
Another project from
the Chromium

116
00:04:59,940 --> 00:05:01,990
team is called Endure.

117
00:05:01,990 --> 00:05:04,220
This is something where you
can write a test like, OK,

118
00:05:04,220 --> 00:05:06,410
open up Gmail, start
composing.

119
00:05:06,410 --> 00:05:07,890
Now discard.

120
00:05:07,890 --> 00:05:08,660
Start composing again.

121
00:05:08,660 --> 00:05:09,510
Discard.

122
00:05:09,510 --> 00:05:11,990
Repeat this for six hours.

123
00:05:11,990 --> 00:05:14,370
Now tell me what's up.

124
00:05:14,370 --> 00:05:17,420
So Endure will take this and
just handle the browser

125
00:05:17,420 --> 00:05:19,550
automation for you.

126
00:05:19,550 --> 00:05:22,370
And then it will give you back
some really fantastic insight

127
00:05:22,370 --> 00:05:26,320
on the memory consumption of
this application over time

128
00:05:26,320 --> 00:05:28,080
across a number of
different axes.

129
00:05:28,080 --> 00:05:31,610
So you're able to understand
if you're increasing in an

130
00:05:31,610 --> 00:05:34,840
uncontrollable way in your
memory situation.

131
00:05:34,840 --> 00:05:35,860
All right.

132
00:05:35,860 --> 00:05:39,620
Now, we've seen a lot of new
advancements when it comes to

133
00:05:39,620 --> 00:05:41,420
mobile and cross-device
testing.

134
00:05:41,420 --> 00:05:44,290
This was a project I bet a
number of you have seen called

135
00:05:44,290 --> 00:05:49,630
Remote Preview, where I can
navigate to a URL here on my

136
00:05:49,630 --> 00:05:53,150
machine, and all the browsers
follow my navigation.

137
00:05:53,150 --> 00:05:56,350
Adobe Edge Inspect also has
a similar functionality.

138
00:05:56,350 --> 00:05:57,020
And so it's cool.

139
00:05:57,020 --> 00:05:59,650
I got all these phones right
here, and they're just

140
00:05:59,650 --> 00:06:00,540
following me around.

141
00:06:00,540 --> 00:06:01,850
It's pretty fantastic.

142
00:06:01,850 --> 00:06:04,060
Mixture is another project.

143
00:06:04,060 --> 00:06:05,030
Does some fantastic things.

144
00:06:05,030 --> 00:06:07,720
It also does the same
thing, but on top of

145
00:06:07,720 --> 00:06:08,740
this, it will add--

146
00:06:08,740 --> 00:06:10,430
let's say there's a button.

147
00:06:10,430 --> 00:06:11,210
I click it.

148
00:06:11,210 --> 00:06:13,800
It pops up a dialogue, and
I close that dialogue.

149
00:06:13,800 --> 00:06:17,560
Mixture will do the same stuff
but actually repeat those same

150
00:06:17,560 --> 00:06:20,610
actions on all of these
devices as well.

151
00:06:20,610 --> 00:06:25,050
So not just navigation but
actual click events so you can

152
00:06:25,050 --> 00:06:27,640
see and verify that things are
occurring the way that you

153
00:06:27,640 --> 00:06:29,690
would expect.

154
00:06:29,690 --> 00:06:33,450
Now, I think it's cool to have
all this on devices that are

155
00:06:33,450 --> 00:06:33,990
next to you.

156
00:06:33,990 --> 00:06:37,070
But not everyone can afford all
the devices that you need

157
00:06:37,070 --> 00:06:38,450
to actually support.

158
00:06:38,450 --> 00:06:41,460
So we've been seeing things like
cloud browser testing.

159
00:06:41,460 --> 00:06:44,830
BrowserStack is one I think most
people are familiar with.

160
00:06:44,830 --> 00:06:50,650
And for mobile, they use
emulators, which is cool.

161
00:06:50,650 --> 00:06:53,560
DeviceAnywhere actually features
real devices, which

162
00:06:53,560 --> 00:06:54,290
is pretty cool.

163
00:06:54,290 --> 00:06:55,140
It's a paid service, though.

164
00:06:55,140 --> 00:06:58,760
They did just recently offer
this free service.

165
00:06:58,760 --> 00:07:03,640
So I'm opening up
an iPhone 4S.

166
00:07:03,640 --> 00:07:06,860
So this is actually a real
device, and I'm able to kind

167
00:07:06,860 --> 00:07:08,480
of play around with it--

168
00:07:08,480 --> 00:07:08,910
[INAUDIBLE]

169
00:07:08,910 --> 00:07:10,410
Google News--

170
00:07:10,410 --> 00:07:11,440
and click around.

171
00:07:11,440 --> 00:07:13,560
I can also do--

172
00:07:13,560 --> 00:07:18,790
let's see, I can mimic
a swipe and see that.

173
00:07:18,790 --> 00:07:21,560
And you can see that the
performance here is actually

174
00:07:21,560 --> 00:07:22,670
pretty good.

175
00:07:22,670 --> 00:07:25,350
It's telling me that
my latency is OK.

176
00:07:25,350 --> 00:07:28,010
And so this could actually even
get quite a bit better.

177
00:07:28,010 --> 00:07:30,570
But it's pretty fantastic to
connect to an actual device

178
00:07:30,570 --> 00:07:33,350
and get a better idea of
what my performance

179
00:07:33,350 --> 00:07:36,760
situation is on that.

180
00:07:36,760 --> 00:07:39,150
This is a project that is
totally alpha and has never

181
00:07:39,150 --> 00:07:42,180
really been shown at all.

182
00:07:42,180 --> 00:07:43,130
So I just want to FYI.

183
00:07:43,130 --> 00:07:45,205
It's got some rough edges,
but it's pretty cool.

184
00:07:45,205 --> 00:07:47,410
It's a project from some
engineers at Google.

185
00:07:47,410 --> 00:07:49,250
It's called Tracing Framework.

186
00:07:49,250 --> 00:07:54,120
And it's a bunch of analyses
for smoothness

187
00:07:54,120 --> 00:07:56,160
inside of the browser.

188
00:07:56,160 --> 00:07:58,670
And so the cool thing about it
is the instrumentation is

189
00:07:58,670 --> 00:08:01,200
written completely in
JavaScript, which means it

190
00:08:01,200 --> 00:08:04,630
runs in Chrome, Firefox,
IE, mobile

191
00:08:04,630 --> 00:08:06,290
browsers, and web views.

192
00:08:06,290 --> 00:08:08,180
So if you ever feel like you're
in a situation where

193
00:08:08,180 --> 00:08:11,110
you do not have the browser
tooling to give you enough

194
00:08:11,110 --> 00:08:13,800
insight in any of these
situations,

195
00:08:13,800 --> 00:08:15,190
check out Tracing Framework.

196
00:08:15,190 --> 00:08:18,410
Still, it's rough in alpha,
but it's worth a look.

197
00:08:18,410 --> 00:08:21,050
Now, this conversation wouldn't
be complete without

198
00:08:21,050 --> 00:08:24,200
talking about the dev tools
that are in the browser.

199
00:08:24,200 --> 00:08:26,440
And I wanted to show
a few things.

200
00:08:26,440 --> 00:08:29,190
The first up is Canvas
Inspection.

201
00:08:29,190 --> 00:08:31,390
And the cool thing is we've
never showed this before.

202
00:08:31,390 --> 00:08:32,890
And it's coming out.

203
00:08:32,890 --> 00:08:35,559
It's still kind of
an experiment.

204
00:08:35,559 --> 00:08:37,049
But I'm excited to show it.

205
00:08:37,049 --> 00:08:40,020
So I brought up here this
WebGL Aquarium.

206
00:08:40,020 --> 00:08:41,299
It's pretty cool.

207
00:08:41,299 --> 00:08:43,770
Now, when we're in Profiles, we
see Capture Canvas Frame.

208
00:08:43,770 --> 00:08:47,020
But I actually need to have the
dev tools open while this

209
00:08:47,020 --> 00:08:49,650
canvas is created.

210
00:08:49,650 --> 00:08:52,730
Now I'm going to capture
that frame.

211
00:08:52,730 --> 00:08:57,420
And up here, it looks like we
captured it at 4,300 calls to

212
00:08:57,420 --> 00:08:59,140
the context.

213
00:08:59,140 --> 00:09:01,360
And these are all the calls that
were made that changed

214
00:09:01,360 --> 00:09:02,220
the context.

215
00:09:02,220 --> 00:09:04,800
And I can step through
all of them.

216
00:09:04,800 --> 00:09:06,790
And what it's going to do is
it's going to replay all the

217
00:09:06,790 --> 00:09:08,410
calls up to this point.

218
00:09:08,410 --> 00:09:12,830
And I can set through
all the draw calls.

219
00:09:12,830 --> 00:09:14,430
Let's see.

220
00:09:14,430 --> 00:09:15,680
Give me some fishes.

221
00:09:15,680 --> 00:09:18,060

222
00:09:18,060 --> 00:09:19,310
Fishes!

223
00:09:19,310 --> 00:09:23,640

224
00:09:23,640 --> 00:09:24,890
Fish, fish.

225
00:09:24,890 --> 00:09:27,700

226
00:09:27,700 --> 00:09:28,833
Yeah, good.

227
00:09:28,833 --> 00:09:29,660
Great.

228
00:09:29,660 --> 00:09:30,540
Fishes.

229
00:09:30,540 --> 00:09:34,220
So we're able to see
step-by-step as this frame is

230
00:09:34,220 --> 00:09:38,410
being constructed and correlate
that back to my

231
00:09:38,410 --> 00:09:41,630
actual code of what
was happening.

232
00:09:41,630 --> 00:09:44,460
So I can click over there and
see this, in fact, was making

233
00:09:44,460 --> 00:09:45,610
these draw calls.

234
00:09:45,610 --> 00:09:47,320
Now, I don't know if you guys
noticed this, but when I

235
00:09:47,320 --> 00:09:51,750
actually clicked from Profiles
over into the Sources panel,

236
00:09:51,750 --> 00:09:54,590
there was a little
bit of a delay.

237
00:09:54,590 --> 00:09:58,060
Now, let's say I actually want
to figure out why there's such

238
00:09:58,060 --> 00:09:59,620
a delay there.

239
00:09:59,620 --> 00:10:05,380
So first, I'm going to undock
this move over that guy, and I

240
00:10:05,380 --> 00:10:08,160
think you see what's happening
here is that I'm using the dev

241
00:10:08,160 --> 00:10:10,360
tools on the dev tools.

242
00:10:10,360 --> 00:10:13,230
I'm going to start a new
timeline, and I'm going to

243
00:10:13,230 --> 00:10:15,880
repeat this action.

244
00:10:15,880 --> 00:10:18,440
And there we go, capture that.

245
00:10:18,440 --> 00:10:20,550
So inside the timeline, we're
getting some good information

246
00:10:20,550 --> 00:10:22,500
on how long things like
paints, recalc

247
00:10:22,500 --> 00:10:24,250
styles are all taking.

248
00:10:24,250 --> 00:10:27,700
And over here on the left-hand
side, we can see this yellow.

249
00:10:27,700 --> 00:10:29,730
And this is my click event.

250
00:10:29,730 --> 00:10:31,820
And we can see that it
was pretty long.

251
00:10:31,820 --> 00:10:33,800
In this case, it
took almost 400

252
00:10:33,800 --> 00:10:35,720
milliseconds to complete that.

253
00:10:35,720 --> 00:10:38,251
Now why was that?

254
00:10:38,251 --> 00:10:39,540
Eesh.

255
00:10:39,540 --> 00:10:42,585
So you look over here, and you
see this is what happened

256
00:10:42,585 --> 00:10:43,410
inside that time.

257
00:10:43,410 --> 00:10:45,570
We got a lot of Recalculate
Style and Layout, and Recalc

258
00:10:45,570 --> 00:10:47,120
Style, Layout.

259
00:10:47,120 --> 00:10:48,650
And this is what we were talking
about before when we

260
00:10:48,650 --> 00:10:53,290
were talking about excess
reflows, layout thrashing.

261
00:10:53,290 --> 00:10:57,470
Layout and reflow are the same
thing across browsers.

262
00:10:57,470 --> 00:10:59,300
But this is a bad situation.

263
00:10:59,300 --> 00:11:00,630
This is a pattern you
want to avoid.

264
00:11:00,630 --> 00:11:01,950
And the cool thing here
is the dev tools are

265
00:11:01,950 --> 00:11:03,240
actually telling you this.

266
00:11:03,240 --> 00:11:05,980
There's a little indicator that
says you might have a

267
00:11:05,980 --> 00:11:08,040
problem. "Forced synchronous
layer is a possible

268
00:11:08,040 --> 00:11:09,970
performance bottleneck." And
the fact that we're seeing

269
00:11:09,970 --> 00:11:13,010
this nonstop back and forth
means there's probably an

270
00:11:13,010 --> 00:11:14,960
ability to optimize.

271
00:11:14,960 --> 00:11:17,855
So Pavel, you should
probably optimize

272
00:11:17,855 --> 00:11:21,210
this in the dev tools.

273
00:11:21,210 --> 00:11:22,850
Sounds good.

274
00:11:22,850 --> 00:11:24,310
All right.

275
00:11:24,310 --> 00:11:27,950
So a lot of times, there is
a problem with paint.

276
00:11:27,950 --> 00:11:30,490
Paint is consuming a lot of
time, and it's a little hard

277
00:11:30,490 --> 00:11:32,420
to get a feel for
what's going on.

278
00:11:32,420 --> 00:11:34,840
So earlier in some talks, they
brought up continuous page

279
00:11:34,840 --> 00:11:40,940
repainting, and I want to show
what that looks like.

280
00:11:40,940 --> 00:11:42,750
Let's try this guy.

281
00:11:42,750 --> 00:11:45,120
Yeah, cool.

282
00:11:45,120 --> 00:11:47,663
All right, bringing back the dev
tools, I'm going to dock

283
00:11:47,663 --> 00:11:49,010
them again.

284
00:11:49,010 --> 00:11:51,530
And over here in the settings,
I'm going to turn on

285
00:11:51,530 --> 00:11:53,860
continuous page repainting.

286
00:11:53,860 --> 00:11:57,390
So up here, we get an idea of
how long it's taking to paint

287
00:11:57,390 --> 00:11:58,890
this page right here.

288
00:11:58,890 --> 00:12:02,910
So let's say right now it's
taking about 15 milliseconds.

289
00:12:02,910 --> 00:12:05,880
But first, I'm going to go over
here, and I'm going to

290
00:12:05,880 --> 00:12:07,350
turn off some of the styles.

291
00:12:07,350 --> 00:12:10,445
So on each of these little
Chrome logos, I got a box

292
00:12:10,445 --> 00:12:11,580
shadow and a border radius.

293
00:12:11,580 --> 00:12:12,965
I'm going to clear those off.

294
00:12:12,965 --> 00:12:16,050
And my paint time jumps
down, which is good.

295
00:12:16,050 --> 00:12:17,780
It's much cheaper to
paint this page.

296
00:12:17,780 --> 00:12:20,090
Now, the interesting thing here
is that because I have

297
00:12:20,090 --> 00:12:22,960
this live feedback and kind of
play around, I can see what is

298
00:12:22,960 --> 00:12:24,980
contributing to long paints.

299
00:12:24,980 --> 00:12:28,440
So if I add on border radius,
you can see it jumped up from

300
00:12:28,440 --> 00:12:32,010
about twos and threes up
to the fours and fives.

301
00:12:32,010 --> 00:12:32,970
Cool.

302
00:12:32,970 --> 00:12:36,310
Take that off and put on box
shadow, which is normally kind

303
00:12:36,310 --> 00:12:37,880
of expensive, you hear.

304
00:12:37,880 --> 00:12:41,750
But my paint time is actually
pretty reasonable.

305
00:12:41,750 --> 00:12:43,130
But check this out.

306
00:12:43,130 --> 00:12:44,380
I add both of them--

307
00:12:44,380 --> 00:12:46,880

308
00:12:46,880 --> 00:12:48,460
ooh--

309
00:12:48,460 --> 00:12:50,770
and my paint time just
went up to about 20

310
00:12:50,770 --> 00:12:53,660
milliseconds per frame.

311
00:12:53,660 --> 00:12:56,820
And so I get great feedback
here on what is actually

312
00:12:56,820 --> 00:12:57,390
contributing.

313
00:12:57,390 --> 00:13:01,300
It turns out that by themselves,
these styles,

314
00:13:01,300 --> 00:13:02,390
they're pretty cheap.

315
00:13:02,390 --> 00:13:05,600
But in combination, the browser
takes a little bit of

316
00:13:05,600 --> 00:13:07,980
time on it.

317
00:13:07,980 --> 00:13:11,080
Now, painting can be expensive,
and there's a lot

318
00:13:11,080 --> 00:13:13,010
that could be done.

319
00:13:13,010 --> 00:13:16,405
And I wanted to show one thing
that has been done recently.

320
00:13:16,405 --> 00:13:17,670
So--

321
00:13:17,670 --> 00:13:18,480
cool.

322
00:13:18,480 --> 00:13:23,360
This right here is Chrome
for Android stable.

323
00:13:23,360 --> 00:13:26,880
And so we have an article
on HTML5 Rocks.

324
00:13:26,880 --> 00:13:30,590
And now what I'm going to do
is just scroll the page.

325
00:13:30,590 --> 00:13:31,250
Scroll.

326
00:13:31,250 --> 00:13:31,750
There we go.

327
00:13:31,750 --> 00:13:32,900
Cool.

328
00:13:32,900 --> 00:13:37,100
And you see I'm scrolling down,
and the browser kind of

329
00:13:37,100 --> 00:13:38,390
catches up.

330
00:13:38,390 --> 00:13:41,930
But for a little while,
the page is blank.

331
00:13:41,930 --> 00:13:44,260
And then it comes in.

332
00:13:44,260 --> 00:13:47,660
So it's probably not optimal.

333
00:13:47,660 --> 00:13:50,010
We just added a new thing to
Chrome on Android called

334
00:13:50,010 --> 00:13:52,080
multi-threaded painting.

335
00:13:52,080 --> 00:13:55,820
And so here--

336
00:13:55,820 --> 00:13:57,780
so this is Chrome for
Android beta.

337
00:13:57,780 --> 00:14:00,090
You can get this from
Google Play.

338
00:14:00,090 --> 00:14:05,740
Now if I scroll, I think you
see that there's no white.

339
00:14:05,740 --> 00:14:06,290
That's cool.

340
00:14:06,290 --> 00:14:07,210
Another thing--

341
00:14:07,210 --> 00:14:09,430
you might be able to see it--
is the text actually gets a

342
00:14:09,430 --> 00:14:11,790
little blurry when this
is going too fast.

343
00:14:11,790 --> 00:14:15,620
And we have low-res tiles that
are in place just in case

344
00:14:15,620 --> 00:14:17,940
you're moving really, really
fast, that it will resolve to

345
00:14:17,940 --> 00:14:20,380
the crisp picture that
you're looking for.

346
00:14:20,380 --> 00:14:23,090
So this actual painting is
happening on a separate

347
00:14:23,090 --> 00:14:26,390
thread, which is pretty cool,
one, for the performance

348
00:14:26,390 --> 00:14:30,340
benefit, but two, for speed.

349
00:14:30,340 --> 00:14:31,850
Over here, this is
about tracing.

350
00:14:31,850 --> 00:14:35,000
I think this has been mentioned
before as well.

351
00:14:35,000 --> 00:14:36,370
Here, we get kind of--

352
00:14:36,370 --> 00:14:38,270
I mean, this looks
intimidating.

353
00:14:38,270 --> 00:14:42,870
And it is, but there's good
ways to read these things.

354
00:14:42,870 --> 00:14:45,920
So right now, I'm zooming in
on the RendererMain thread.

355
00:14:45,920 --> 00:14:47,270
This is the UI thread.

356
00:14:47,270 --> 00:14:50,910
This is the "don't block
this thread" thread.

357
00:14:50,910 --> 00:14:52,280
There's a lot of other parts
in the browser, like the

358
00:14:52,280 --> 00:14:56,150
compositor up here, but I'm
going to jump in to this guy

359
00:14:56,150 --> 00:14:56,970
and zoom in.

360
00:14:56,970 --> 00:15:00,530
And down here, we've
got a few things.

361
00:15:00,530 --> 00:15:01,440
V8.callFunction.

362
00:15:01,440 --> 00:15:02,300
This is JavaScript.

363
00:15:02,300 --> 00:15:04,410
JavaScript is running
right now.

364
00:15:04,410 --> 00:15:07,520
And then, all of a sudden,
we hit Picture Record.

365
00:15:07,520 --> 00:15:13,090
So this is a capture from Chrome
Canary on desktop doing

366
00:15:13,090 --> 00:15:14,760
multi-threaded painting.

367
00:15:14,760 --> 00:15:16,690
And this Picture Record is
actually recording all the

368
00:15:16,690 --> 00:15:19,500
draw calls that are coming
into Chrome.

369
00:15:19,500 --> 00:15:21,020
And Chrome is like, OK, I've
got all these draws.

370
00:15:21,020 --> 00:15:22,830
Here they are.

371
00:15:22,830 --> 00:15:23,500
I'm going to pass it up
to the compositor.

372
00:15:23,500 --> 00:15:25,980
The compositors are like, cool,
I'm going to spawn off a

373
00:15:25,980 --> 00:15:28,170
new thread that's
CompositorWorker, and he's

374
00:15:28,170 --> 00:15:30,040
going to take care
of this for you.

375
00:15:30,040 --> 00:15:33,450
So CompositorWorker right here,
he's doing the paint.

376
00:15:33,450 --> 00:15:36,310
This paint raster right here
is the actual paints.

377
00:15:36,310 --> 00:15:39,230
And what this means is because
this is on a separate thread,

378
00:15:39,230 --> 00:15:42,950
I can now be executing
JavaScript at the same time.

379
00:15:42,950 --> 00:15:45,140
So here we are in v8, executing
JavaScript at the

380
00:15:45,140 --> 00:15:47,050
same time as I'm doing paints.

381
00:15:47,050 --> 00:15:49,000
We haven't been able to do
this before, but now it's

382
00:15:49,000 --> 00:15:49,710
finally happening.

383
00:15:49,710 --> 00:15:52,330
I'm really excited about that.

384
00:15:52,330 --> 00:15:56,310
All right, the last thing I just
want to mention is I'm

385
00:15:56,310 --> 00:15:58,170
not going to demo Remote
Debugging, but everything that

386
00:15:58,170 --> 00:16:02,800
I showed is available, just
the same thing, just

387
00:16:02,800 --> 00:16:05,130
connecting on here.

388
00:16:05,130 --> 00:16:08,430
Really fantastic, because the
performance characteristics on

389
00:16:08,430 --> 00:16:12,620
a device with hardware that is
so different as a laptop is

390
00:16:12,620 --> 00:16:14,660
something that you really want
to be very mindful of as

391
00:16:14,660 --> 00:16:17,680
you're developing all
these experiences.

392
00:16:17,680 --> 00:16:21,840
Lastly, a few trends I think
I've been witnessing and will

393
00:16:21,840 --> 00:16:24,070
continue in 2013.

394
00:16:24,070 --> 00:16:26,040
We're seeing a rise of people
leveraging Continuous

395
00:16:26,040 --> 00:16:28,790
Integration, not just for
running things like unit tests

396
00:16:28,790 --> 00:16:30,500
but also making sure that
there's no performance

397
00:16:30,500 --> 00:16:32,960
regressions as the project
is built out.

398
00:16:32,960 --> 00:16:35,300
Things like people are focusing
on a better mobile

399
00:16:35,300 --> 00:16:39,820
debugging workflow and making
sure that for throwing tests

400
00:16:39,820 --> 00:16:44,440
on there, getting tests out of
it, and seeing their work,

401
00:16:44,440 --> 00:16:46,570
that everything is working
very nicely.

402
00:16:46,570 --> 00:16:49,060
A bigger adoption of using
dependency management, not

403
00:16:49,060 --> 00:16:51,820
just for third-party libraries
but also for your own

404
00:16:51,820 --> 00:16:54,140
application code, and people
being very mindful of

405
00:16:54,140 --> 00:16:57,440
performance from the beginning
of the project so that a

406
00:16:57,440 --> 00:17:00,110
project can sail nicely from
these devices to these

407
00:17:00,110 --> 00:17:04,640
devices, and all your
users are happy.

408
00:17:04,640 --> 00:17:07,680
That's it for this little
opener, and let's

409
00:17:07,680 --> 00:17:09,158
get into the panel.

410
00:17:09,158 --> 00:17:15,990
[APPLAUSE]

411
00:17:15,990 --> 00:17:17,240
IVAN ZUZAK: That's awesome.

412
00:17:17,240 --> 00:17:20,390

413
00:17:20,390 --> 00:17:23,130
[INAUDIBLE].

414
00:17:23,130 --> 00:17:25,090
PAUL IRISH: I do.

415
00:17:25,090 --> 00:17:27,384
IVAN ZUZAK: OK, that's
all we have as intro.

416
00:17:27,384 --> 00:17:35,440

417
00:17:35,440 --> 00:17:38,870
So there is, like, 30 questions
on Moderator--

418
00:17:38,870 --> 00:17:39,330
33.

419
00:17:39,330 --> 00:17:42,500
And let's just try to
get as much through.

420
00:17:42,500 --> 00:18:01,090

421
00:18:01,090 --> 00:18:06,280
So the first question that
[INAUDIBLE], also from Google

422
00:18:06,280 --> 00:18:10,440
Chrome Developer Relations put
on Moderator was, mobile is a

423
00:18:10,440 --> 00:18:14,540
big focus for developers
this year.

424
00:18:14,540 --> 00:18:17,250
So what do you see as being the
biggest pain points in the

425
00:18:17,250 --> 00:18:18,280
mobile test--

426
00:18:18,280 --> 00:18:19,840
mobile tooling landscape?

427
00:18:19,840 --> 00:18:23,160
And I think everyone can just
chip in what they think.

428
00:18:23,160 --> 00:18:24,410
So let's start from Remy.

429
00:18:24,410 --> 00:18:27,485

430
00:18:27,485 --> 00:18:31,420
REMY SHARP: The other browsers
is the big pain point for me

431
00:18:31,420 --> 00:18:33,030
at the moment.

432
00:18:33,030 --> 00:18:38,380
The fact that I've got Dev Tools
on Android is amazing.

433
00:18:38,380 --> 00:18:45,610
But then I have to use Safari,
and that's horrible for me.

434
00:18:45,610 --> 00:18:47,790
And that has kind of
set me up to--

435
00:18:47,790 --> 00:18:51,180
I've started a project
in my company--

436
00:18:51,180 --> 00:18:54,660
very, very early days-- where
I'm trying to get the point,

437
00:18:54,660 --> 00:18:58,010
ultimately, to just use Dev
Tools to debug every single

438
00:18:58,010 --> 00:19:00,940
mobile platform--

439
00:19:00,940 --> 00:19:06,170
Safari, Firefox, Opera, Chrome,
Windows, all of them--

440
00:19:06,170 --> 00:19:07,860
using the debugger protocol.

441
00:19:07,860 --> 00:19:12,540
And it's not so much of an
automation tool, and it's

442
00:19:12,540 --> 00:19:15,900
having the hardware there but
using just Dev Tools to go in

443
00:19:15,900 --> 00:19:19,880
and do that micro debugging, but
have one familiar tool and

444
00:19:19,880 --> 00:19:22,000
just debug the other tools.

445
00:19:22,000 --> 00:19:24,410
I hate working with Safari's
remote debugger.

446
00:19:24,410 --> 00:19:27,410
It's great that we've got it,
but I really, really struggle

447
00:19:27,410 --> 00:19:28,910
with the tool.

448
00:19:28,910 --> 00:19:34,630
So the pain point, for me, is
it just kind of exposes how

449
00:19:34,630 --> 00:19:36,470
bad the other dev tools are.

450
00:19:36,470 --> 00:19:39,270
IE 10 mobile, that's
a great browser.

451
00:19:39,270 --> 00:19:40,520
But where are the dev tools?

452
00:19:40,520 --> 00:19:43,360

453
00:19:43,360 --> 00:19:45,934
SIMON STEWART: OK.

454
00:19:45,934 --> 00:19:51,290
So the desktop world was
surprisingly simple, entirely

455
00:19:51,290 --> 00:19:52,440
by accident.

456
00:19:52,440 --> 00:19:54,620
But it was surprisingly
simple.

457
00:19:54,620 --> 00:19:57,390
We only had web apps running
in a browser,

458
00:19:57,390 --> 00:19:58,750
and that was fine.

459
00:19:58,750 --> 00:20:03,120
The mobile world, because the
devices are underpowered, and

460
00:20:03,120 --> 00:20:05,800
they're a little bit puny, and
Moore's Law is helping, but

461
00:20:05,800 --> 00:20:08,360
they are improving.

462
00:20:08,360 --> 00:20:11,820
The apps we get when we need
to test aren't just

463
00:20:11,820 --> 00:20:12,710
running in a browser.

464
00:20:12,710 --> 00:20:14,990
They're running in web views
contained within the native

465
00:20:14,990 --> 00:20:16,070
application.

466
00:20:16,070 --> 00:20:18,940
And you need to be able to test
the communication between

467
00:20:18,940 --> 00:20:21,000
the native part of the app in
the web part of the app, and

468
00:20:21,000 --> 00:20:22,250
the web part in the
native part.

469
00:20:22,250 --> 00:20:23,520
And who knows, right?

470
00:20:23,520 --> 00:20:26,180
It's a complete nightmare.

471
00:20:26,180 --> 00:20:29,980
So not only do we have a more
complex testing environment to

472
00:20:29,980 --> 00:20:32,630
begin with, the tooling
just isn't there.

473
00:20:32,630 --> 00:20:36,260
It's still early days.

474
00:20:36,260 --> 00:20:38,800
There are very few tools out
there that can actually be

475
00:20:38,800 --> 00:20:42,820
used to test a hybrid
application successfully and

476
00:20:42,820 --> 00:20:47,730
in a way that won't cause your
developers to scream at you in

477
00:20:47,730 --> 00:20:50,880
just pure rage and
frustration.

478
00:20:50,880 --> 00:20:54,530
We'll get there one day, but
that's the main pain point,

479
00:20:54,530 --> 00:20:57,761
just that the tooling
isn't there.

480
00:20:57,761 --> 00:21:01,940
DAVID BLOOMAN: Yeah, similar
to Remy, but [INAUDIBLE].

481
00:21:01,940 --> 00:21:09,260

482
00:21:09,260 --> 00:21:12,310
I don't like Safari at all,
so I don't use it.

483
00:21:12,310 --> 00:21:16,050
But the generic Web Inspector
Remote has been quite

484
00:21:16,050 --> 00:21:19,170
successful, quite
useful for me.

485
00:21:19,170 --> 00:21:21,350
But that's only for
WebKit browsers.

486
00:21:21,350 --> 00:21:22,570
But what about everything
else?

487
00:21:22,570 --> 00:21:25,790
And things like BlackBerrys,
which are still very high

488
00:21:25,790 --> 00:21:28,150
usage and something like News
is very difficult to do

489
00:21:28,150 --> 00:21:29,390
anything with.

490
00:21:29,390 --> 00:21:33,025
And then automations, iOS and
Android are pretty much the

491
00:21:33,025 --> 00:21:33,730
only two platforms.

492
00:21:33,730 --> 00:21:35,830
So you're stuck with them.

493
00:21:35,830 --> 00:21:38,880
Even the new platforms, like
BlackBerry, how do you even

494
00:21:38,880 --> 00:21:41,090
approach them with no tools?

495
00:21:41,090 --> 00:21:42,380
You can't do much with them.

496
00:21:42,380 --> 00:21:45,080
So there's a lot lacking.

497
00:21:45,080 --> 00:21:49,610
And hopefully, some nice people
will come along and

498
00:21:49,610 --> 00:21:52,900
build something new, and
the tools will mature.

499
00:21:52,900 --> 00:21:55,320
But there are still the legacy
browsers and operating systems

500
00:21:55,320 --> 00:21:57,390
that we're going to have to
deal with for a long time.

501
00:21:57,390 --> 00:21:59,960
So tooling is going to get
better, but it's also going to

502
00:21:59,960 --> 00:22:01,470
stay bad at the same time.

503
00:22:01,470 --> 00:22:04,440

504
00:22:04,440 --> 00:22:08,370
PAUL IRISH: I would say one part
of this is that I think a

505
00:22:08,370 --> 00:22:11,730
lot of developers' workflow for
their mobile testing is

506
00:22:11,730 --> 00:22:13,300
extremely manual.

507
00:22:13,300 --> 00:22:17,630
It is a matter of putting up the
newest version on stage,

508
00:22:17,630 --> 00:22:21,460
hitting Refresh, seeing,
exploring, then going to the

509
00:22:21,460 --> 00:22:23,950
next device that has the
viewport that they care about,

510
00:22:23,950 --> 00:22:25,730
and hitting Refresh,
testing that.

511
00:22:25,730 --> 00:22:28,300
And I think it's just
really slow.

512
00:22:28,300 --> 00:22:30,500
And there's a lot of existing
solutions that can totally

513
00:22:30,500 --> 00:22:31,520
improve that.

514
00:22:31,520 --> 00:22:34,850
And I think that's worth
looking into.

515
00:22:34,850 --> 00:22:37,010
The other part that I think is
important-- and I mentioned

516
00:22:37,010 --> 00:22:41,630
this in the opening, which is
that I don't think every

517
00:22:41,630 --> 00:22:45,040
developer can afford all the
devices that they need to be

518
00:22:45,040 --> 00:22:47,330
testing on.

519
00:22:47,330 --> 00:22:51,580
I mean, the Remote Debugging
capability that we're seeing

520
00:22:51,580 --> 00:22:53,960
is very important when you
have the device there.

521
00:22:53,960 --> 00:22:59,700
But I do think that
having access to--

522
00:22:59,700 --> 00:23:04,200
being able to run your
application in these mobile

523
00:23:04,200 --> 00:23:05,350
devices that you don't actually

524
00:23:05,350 --> 00:23:06,860
own is really important.

525
00:23:06,860 --> 00:23:10,600
So I'm looking forward to seeing
how we can solve that.

526
00:23:10,600 --> 00:23:11,902
Yeah.

527
00:23:11,902 --> 00:23:15,810
IVAN ZUZAK: Great OK,
so let's continue.

528
00:23:15,810 --> 00:23:18,840
The question is, what are
currently the best tools and

529
00:23:18,840 --> 00:23:22,280
workflows for testing and
debugging mobile devices?

530
00:23:22,280 --> 00:23:25,534
And I think David
can start this.

531
00:23:25,534 --> 00:23:29,760
DAVID BLOOMAN: Yeah,
so I've tried to--

532
00:23:29,760 --> 00:23:32,990
in my role at the BBC, tried to
just use as many tools as I

533
00:23:32,990 --> 00:23:36,000
can, really, to get the best
out of all our devices.

534
00:23:36,000 --> 00:23:40,530
But as you said, it's a
very manual process

535
00:23:40,530 --> 00:23:42,370
a lot of the time.

536
00:23:42,370 --> 00:23:46,270
But we've implemented, recently,
the CSS Regression

537
00:23:46,270 --> 00:23:50,705
Testing, which internally we
call a "snappy snaps." So it

538
00:23:50,705 --> 00:23:53,880
will capture two images
of two domains.

539
00:23:53,880 --> 00:23:59,060
So we use a stage and a live
environment, every

540
00:23:59,060 --> 00:24:01,520
[? resolution ?] we really want,
and then various asset

541
00:24:01,520 --> 00:24:05,040
types, so front page and story
pages, and then compare them

542
00:24:05,040 --> 00:24:08,570
using ImageMagick to output a
[? DIF ?] image, which you can

543
00:24:08,570 --> 00:24:09,060
then review.

544
00:24:09,060 --> 00:24:13,220
So you can test a massive amount
of pages of different

545
00:24:13,220 --> 00:24:16,300
resolutions very quickly and
identify the differences and

546
00:24:16,300 --> 00:24:18,220
then collaboratively decide
how you want to

547
00:24:18,220 --> 00:24:19,280
move on from there.

548
00:24:19,280 --> 00:24:22,150
So there are tools like that
that really just cut down the

549
00:24:22,150 --> 00:24:25,470
amount of manual testing you can
do, because you can just

550
00:24:25,470 --> 00:24:27,530
automate a lot of it.

551
00:24:27,530 --> 00:24:30,190
ImageMagick is a very powerful
tool, so you can use

552
00:24:30,190 --> 00:24:31,440
percentage differences,
as well.

553
00:24:31,440 --> 00:24:34,375
So it's just a series of numbers
that come out, and you

554
00:24:34,375 --> 00:24:38,610
know whether you've got
huge CSS regressions.

555
00:24:38,610 --> 00:24:41,215
And again, tools like Web
Inspector Remote and Remote

556
00:24:41,215 --> 00:24:44,150
Debugging on Android, especially
of picking up

557
00:24:44,150 --> 00:24:48,492
networking things, like are we
making sure that stats are

558
00:24:48,492 --> 00:24:52,860
being recorded over the Chrome
Dev Tools is so important.

559
00:24:52,860 --> 00:24:57,510
And using those tools has been
really beneficial for us.

560
00:24:57,510 --> 00:25:00,210
There are other tools, like
Remote Preview and Adobe

561
00:25:00,210 --> 00:25:01,900
Shadow, which you can use.

562
00:25:01,900 --> 00:25:06,690
But the things is that Adobe
Shadow or Edge Inspect is a

563
00:25:06,690 --> 00:25:07,600
costly one.

564
00:25:07,600 --> 00:25:10,170
And I think that's where the
cost element is quite

565
00:25:10,170 --> 00:25:11,660
difficult in mobile
[? responsive ?]

566
00:25:11,660 --> 00:25:15,410
because you need all the devices
in a lot of cases, and

567
00:25:15,410 --> 00:25:19,250
financially, it's impossible to
have for an independent or

568
00:25:19,250 --> 00:25:20,750
small company.

569
00:25:20,750 --> 00:25:23,810
BrowserStack is a good option.

570
00:25:23,810 --> 00:25:30,030
And I haven't really looked into
TestPlant, but it's an

571
00:25:30,030 --> 00:25:31,552
option as well.

572
00:25:31,552 --> 00:25:33,920
But there are some good tools.

573
00:25:33,920 --> 00:25:37,460
I think if you're interested,
there's a great amount of

574
00:25:37,460 --> 00:25:40,840
tools on RGA Online, a site
which will point you in the

575
00:25:40,840 --> 00:25:41,325
right direction.

576
00:25:41,325 --> 00:25:42,430
IVAN ZUZAK: Great.

577
00:25:42,430 --> 00:25:45,590
Simon, what can you tell
us about WebDriver?

578
00:25:45,590 --> 00:25:47,640
SIMON STEWART: Yeah,
WebDriver.

579
00:25:47,640 --> 00:25:51,350
So tools for doing testing
on mobile.

580
00:25:51,350 --> 00:25:54,480
The first thing I was going to
suggest was it isn't that

581
00:25:54,480 --> 00:25:56,970
different from being on
the desktop, right?

582
00:25:56,970 --> 00:25:59,810
So you could use all the
JavaScript frameworks that are

583
00:25:59,810 --> 00:26:02,370
already out there, things like
Jasmine, for example, if

584
00:26:02,370 --> 00:26:07,130
you're a BDD fan, still work
in a mobile browser.

585
00:26:07,130 --> 00:26:09,990
And a mobile browser nowadays
runs on a device that has the

586
00:26:09,990 --> 00:26:14,760
same power as the old G5 Macs
that people used to do their

587
00:26:14,760 --> 00:26:16,170
development on.

588
00:26:16,170 --> 00:26:18,640
We think of them as underpowered
devices.

589
00:26:18,640 --> 00:26:20,240
They're enormously
capable, and they

590
00:26:20,240 --> 00:26:21,590
keep on getting faster.

591
00:26:21,590 --> 00:26:25,230
So you could keep
on doing that.

592
00:26:25,230 --> 00:26:27,480
I obviously have a
vested interest.

593
00:26:27,480 --> 00:26:29,360
I am the lead of the
Selenium project.

594
00:26:29,360 --> 00:26:30,670
I invented WebDriver.

595
00:26:30,670 --> 00:26:33,580
We're standardizing
that with the W3C.

596
00:26:33,580 --> 00:26:36,960
Hopefully, the best way to test
mobile browsers will be

597
00:26:36,960 --> 00:26:41,220
to use the WebDriver APIs, which
will enable you to do

598
00:26:41,220 --> 00:26:44,070
all sorts of fun things,
particularly from the point of

599
00:26:44,070 --> 00:26:46,930
view of automating a browser
from a user's perspective.

600
00:26:46,930 --> 00:26:50,010
Go to this page, click on this
link, execute this piece of

601
00:26:50,010 --> 00:26:50,900
JavaScript.

602
00:26:50,900 --> 00:26:54,070
Now let me see what the text is
on the page as a user would

603
00:26:54,070 --> 00:26:57,180
see it, which is an enormously
powerful thing to do.

604
00:26:57,180 --> 00:27:00,850
And I've been on projects
where we've had those

605
00:27:00,850 --> 00:27:04,220
end-to-end tests, smaller
integration tests, unit tests,

606
00:27:04,220 --> 00:27:07,510
realize that we've made some
fundamental failures in the

607
00:27:07,510 --> 00:27:09,820
architecture of the application,
thrown away every

608
00:27:09,820 --> 00:27:13,100
test apart from the WebDriver
tests, and rebuilt everything

609
00:27:13,100 --> 00:27:14,680
just using those.

610
00:27:14,680 --> 00:27:18,900
So if you write them well,
they can work.

611
00:27:18,900 --> 00:27:22,040
If I was going to name
frameworks, obviously Selenium

612
00:27:22,040 --> 00:27:23,920
is probably one that I
would rush out and

613
00:27:23,920 --> 00:27:26,510
download right now.

614
00:27:26,510 --> 00:27:30,310
I'm biased, though,
so that's OK.

615
00:27:30,310 --> 00:27:32,780
For mobile, it might be worth
having a look at a thing

616
00:27:32,780 --> 00:27:36,630
called iOS Driver, which is
written by Francois Reynaud,

617
00:27:36,630 --> 00:27:39,940
who is working at eBay.

618
00:27:39,940 --> 00:27:44,110
And Sauce Labs recently put a
lot of weight behind a project

619
00:27:44,110 --> 00:27:45,570
called Appium.

620
00:27:45,570 --> 00:27:48,760
So if you go to saucelabs.com
and take a look for Appium on

621
00:27:48,760 --> 00:27:51,050
their site, you'll be
able to find it.

622
00:27:51,050 --> 00:27:53,230
Both of those are for iOS.

623
00:27:53,230 --> 00:27:57,210
And they allow you to test
native apps, hybrid apps, and

624
00:27:57,210 --> 00:27:58,880
just plain web apps, as well.

625
00:27:58,880 --> 00:28:00,390
So that's pretty cool.

626
00:28:00,390 --> 00:28:04,860
On the Android platform, I think
it's still fair game.

627
00:28:04,860 --> 00:28:07,920
There will be something that
uses UI automation.

628
00:28:07,920 --> 00:28:10,330
And there's going to be a period
of about a year, two

629
00:28:10,330 --> 00:28:13,010
years, while people
go, what about the

630
00:28:13,010 --> 00:28:14,410
older versions of Android?

631
00:28:14,410 --> 00:28:15,450
They're still really popular.

632
00:28:15,450 --> 00:28:17,310
And then people will realize
that it's a pain in the

633
00:28:17,310 --> 00:28:19,340
backside to test those things.

634
00:28:19,340 --> 00:28:23,510
And time will be on our side,
and hopefully, we'll only have

635
00:28:23,510 --> 00:28:29,190
ICS and above in about 50 years
of something, in the way

636
00:28:29,190 --> 00:28:30,930
that Android is updating.

637
00:28:30,930 --> 00:28:32,900
But it'll happen eventually,
and that will

638
00:28:32,900 --> 00:28:35,975
be extremely cool.

639
00:28:35,975 --> 00:28:37,460
IVAN ZUZAK: Want to add
something, Remy?

640
00:28:37,460 --> 00:28:41,110
REMY SHARP: Yeah, I'm
more in the kind of

641
00:28:41,110 --> 00:28:42,080
debugging end of things.

642
00:28:42,080 --> 00:28:47,270
So actually, for a project that
we are releasing for a

643
00:28:47,270 --> 00:28:50,840
client literally Friday, we're
trying to get the last style

644
00:28:50,840 --> 00:28:51,430
changes in.

645
00:28:51,430 --> 00:28:56,240
And we've got this iPad Mini,
and what I ended up doing was

646
00:28:56,240 --> 00:29:01,140
using Dev Tools in Chrome,
having it save as I was making

647
00:29:01,140 --> 00:29:04,390
changes to the local disk, and
then I had LiveReload just

648
00:29:04,390 --> 00:29:05,310
sitting on there.

649
00:29:05,310 --> 00:29:08,770
And the UX guy was sat next
to me with the iPad.

650
00:29:08,770 --> 00:29:11,540
And he was like, OK, just
tweak this color.

651
00:29:11,540 --> 00:29:13,290
I'd tweak it on my desktop.

652
00:29:13,290 --> 00:29:15,730
And in the inspector, I'm
changing the color and

653
00:29:15,730 --> 00:29:21,580
releasing, and it's immediately
on the iPad Mini.

654
00:29:21,580 --> 00:29:30,250
Which for me, getting away
from coding, saving,

655
00:29:30,250 --> 00:29:32,970
switching, hitting Refresh,
going to the device, hitting

656
00:29:32,970 --> 00:29:35,280
Refresh, that's where I
live at the moment.

657
00:29:35,280 --> 00:29:37,970
And the closer I get to actually
using the browser as

658
00:29:37,970 --> 00:29:41,550
my development--

659
00:29:41,550 --> 00:29:43,722
an IDE by IDE--

660
00:29:43,722 --> 00:29:44,890
the happier I get.

661
00:29:44,890 --> 00:29:48,110
And I'm really impatient.

662
00:29:48,110 --> 00:29:49,380
I want that feedback.

663
00:29:49,380 --> 00:29:50,280
I want to know now.

664
00:29:50,280 --> 00:29:54,210
And I want it all reloading
live, and my workflow is

665
00:29:54,210 --> 00:29:56,502
getting really, really
close to that.

666
00:29:56,502 --> 00:29:59,393
And I see some of my guys
working, using--

667
00:29:59,393 --> 00:30:02,795
in JS Bin, we've got a remote
rendering feature in it so you

668
00:30:02,795 --> 00:30:05,400
can code away, and it will just
automatically update on

669
00:30:05,400 --> 00:30:05,870
the device.

670
00:30:05,870 --> 00:30:07,440
And I see them actually using
that as well, which is really

671
00:30:07,440 --> 00:30:10,150
cool for me.

672
00:30:10,150 --> 00:30:12,370
But yeah, basically, immediacy,
that's what

673
00:30:12,370 --> 00:30:13,275
[INAUDIBLE].

674
00:30:13,275 --> 00:30:16,420
IVAN ZUZAK: So there's this
question from Addy again.

675
00:30:16,420 --> 00:30:20,290
And he says, seeing browser
developer tools flourish into

676
00:30:20,290 --> 00:30:23,160
fully blown editors
is very exciting.

677
00:30:23,160 --> 00:30:26,990
And at what point should we stop
pushing the envelope and

678
00:30:26,990 --> 00:30:28,820
suggest developers use
their own tools?

679
00:30:28,820 --> 00:30:32,800
So do you think that will
happen, or will we push the

680
00:30:32,800 --> 00:30:36,730
envelope far and beyond and
use browser dev tools for

681
00:30:36,730 --> 00:30:38,760
everything?

682
00:30:38,760 --> 00:30:42,200
REMY SHARP: For me, personally,
I'm much more

683
00:30:42,200 --> 00:30:46,110
towards the end of using the
browser as close as--

684
00:30:46,110 --> 00:30:49,980
I want to get the output, the
rendered page, and what I'm

685
00:30:49,980 --> 00:30:52,240
typing as close as possible.

686
00:30:52,240 --> 00:30:55,180
I'm typing, I want to see
the output immediately.

687
00:30:55,180 --> 00:30:58,420
If it lives inside of the
IDE itself, then fine.

688
00:30:58,420 --> 00:30:58,890
But at the moment.

689
00:30:58,890 --> 00:31:02,586
Dev Tools is kind of ticking
that box for me.

690
00:31:02,586 --> 00:31:05,010
IVAN ZUZAK: So are there any
key parts that are missing

691
00:31:05,010 --> 00:31:11,520
from dev tools currently for
any browser for you?

692
00:31:11,520 --> 00:31:13,160
REMY SHARP: The testing,
for me.

693
00:31:13,160 --> 00:31:16,560

694
00:31:16,560 --> 00:31:17,210
Event proxying--

695
00:31:17,210 --> 00:31:19,080
that's something I mentioned.

696
00:31:19,080 --> 00:31:20,743
SIMON STEWART: That's
in WebDriver.

697
00:31:20,743 --> 00:31:21,670
REMY SHARP: What's that?

698
00:31:21,670 --> 00:31:24,482
SIMON STEWART: WebDriver's
got that.

699
00:31:24,482 --> 00:31:26,310
REMY SHARP: I haven't
seen WebDriver.

700
00:31:26,310 --> 00:31:29,481
SIMON STEWART: It's being
standardized.

701
00:31:29,481 --> 00:31:33,270
REMY SHARP: So one thing that's
missing for me is I

702
00:31:33,270 --> 00:31:35,570
don't want to type in a lat-long
to be able to emulate

703
00:31:35,570 --> 00:31:36,220
geolocation.

704
00:31:36,220 --> 00:31:38,020
I want my phone to
give it to me.

705
00:31:38,020 --> 00:31:39,450
The accelerometer, I
want that to feed

706
00:31:39,450 --> 00:31:42,176
straight into the desktop.

707
00:31:42,176 --> 00:31:46,395
I know Paul and Addy
have hinted at, or

708
00:31:46,395 --> 00:31:49,376
might mention something.

709
00:31:49,376 --> 00:31:53,270
PAUL IRISH: There's likely going
to be some more stuff

710
00:31:53,270 --> 00:31:56,180
that would make Remy happy, as
far as developing in the

711
00:31:56,180 --> 00:31:57,430
browser more.

712
00:31:57,430 --> 00:31:59,920

713
00:31:59,920 --> 00:32:04,740
And actually, to add on to a
little bit of the mobile tools

714
00:32:04,740 --> 00:32:09,640
and workflows, we talked a lot
about what are the ways to

715
00:32:09,640 --> 00:32:11,050
work with these devices.

716
00:32:11,050 --> 00:32:13,300
But the other thing is that a
lot of times, you can end up

717
00:32:13,300 --> 00:32:16,230
doing a lot of development just
on desktop, straight up.

718
00:32:16,230 --> 00:32:19,620
Firefox has a fantastic,
responsive design tool built

719
00:32:19,620 --> 00:32:20,980
into their dev tools now.

720
00:32:20,980 --> 00:32:22,700
Inside Chrome, there's
device metrics.

721
00:32:22,700 --> 00:32:25,580
And there's, like, 50
different sites and

722
00:32:25,580 --> 00:32:28,760
bookmarklets to get various
different iframes so they can

723
00:32:28,760 --> 00:32:32,050
test your viewport
for any site.

724
00:32:32,050 --> 00:32:34,830
But things like emulating touch
events, emulating and

725
00:32:34,830 --> 00:32:37,980
spoofing geolocation,
these are all in the

726
00:32:37,980 --> 00:32:38,850
browser now, too.

727
00:32:38,850 --> 00:32:42,190
So there's a good amount that
you can get away with on

728
00:32:42,190 --> 00:32:45,210
desktop before you go to the
device to make sure that your

729
00:32:45,210 --> 00:32:46,590
performance goals are
being met, too.

730
00:32:46,590 --> 00:32:47,890
So I'd add that in.

731
00:32:47,890 --> 00:32:49,005
SIMON STEWART: Right.

732
00:32:49,005 --> 00:32:51,230
So I think one of the things
we're missing here are the

733
00:32:51,230 --> 00:32:53,790
audiences for testing, right?

734
00:32:53,790 --> 00:32:56,070
Your workflow sounds very
developer-centric, like you

735
00:32:56,070 --> 00:32:59,930
want to make sure that the CSS
and the UX is perfect.

736
00:32:59,930 --> 00:33:02,130
The people that tend to use
WebDriver tend to be more

737
00:33:02,130 --> 00:33:04,450
interested in the end-to-end
testing and the functionality

738
00:33:04,450 --> 00:33:07,857
of the application, particularly
as a workflow or

739
00:33:07,857 --> 00:33:10,860
a walkthrough goes.

740
00:33:10,860 --> 00:33:15,160
So I probably wouldn't recommend
end-to-end testers

741
00:33:15,160 --> 00:33:18,800
use dev tools, because it's
not the right hammer to be

742
00:33:18,800 --> 00:33:22,680
hitting this particular
nail with.

743
00:33:22,680 --> 00:33:25,870
And it's got to be like take
a look at what people are

744
00:33:25,870 --> 00:33:29,330
actually attempting to do and
their relative skill levels

745
00:33:29,330 --> 00:33:32,590
and try and figure out what
the best approach is.

746
00:33:32,590 --> 00:33:35,070
For a handful of people, being
in the dev tools and being

747
00:33:35,070 --> 00:33:37,790
highly technical and getting
all the metrics out of the

748
00:33:37,790 --> 00:33:39,760
browser is entirely the
right thing to do.

749
00:33:39,760 --> 00:33:42,700
And that's a fantastic option
for those people.

750
00:33:42,700 --> 00:33:46,880
But for hundreds of people, for
a majority of developers,

751
00:33:46,880 --> 00:33:48,520
actually, it's enough to be
able to throw something

752
00:33:48,520 --> 00:33:50,880
together with a bit of Python
or a small amount of

753
00:33:50,880 --> 00:33:54,460
JavaScript and use that to
verify that the application is

754
00:33:54,460 --> 00:33:56,950
doing what it's meant
to be doing.

755
00:33:56,950 --> 00:34:00,630
So yeah, think about the
audience of who's going to be

756
00:34:00,630 --> 00:34:03,200
using this and how they're going
to be using it and how

757
00:34:03,200 --> 00:34:05,160
they're going to be integrating
with the team.

758
00:34:05,160 --> 00:34:07,860
And it may turn out that
actually, not being in the

759
00:34:07,860 --> 00:34:10,070
browser is a better way
of going about it.

760
00:34:10,070 --> 00:34:11,820
And sometimes, it's
going to be better

761
00:34:11,820 --> 00:34:13,780
to do things manually.

762
00:34:13,780 --> 00:34:16,870
"Does this feel right" is a
really hard question for

763
00:34:16,870 --> 00:34:19,159
machine to answer but a
really easy question

764
00:34:19,159 --> 00:34:20,483
for a person to answer.

765
00:34:20,483 --> 00:34:23,850
REMY SHARP: Can I just tack
on to the end of that?

766
00:34:23,850 --> 00:34:25,880
I can't remember who the
conversations were with, but

767
00:34:25,880 --> 00:34:30,120
I've got a feeling it might
be Paul, like a year ago.

768
00:34:30,120 --> 00:34:34,139
Web developers don't jump on
to the command line as

769
00:34:34,139 --> 00:34:38,870
frequently as a Python developer
or a Ruby developer.

770
00:34:38,870 --> 00:34:40,440
I'm comfortable with
the command line.

771
00:34:40,440 --> 00:34:45,850
But out of the web developers
here, you probably do

772
00:34:45,850 --> 00:34:46,710
server-side coding, anyway.

773
00:34:46,710 --> 00:34:49,429
But hands up who's pretty
comfortable using the command

774
00:34:49,429 --> 00:34:51,602
line or coding up--

775
00:34:51,602 --> 00:34:53,240
actually, this is a bit
of a [INAUDIBLE]

776
00:34:53,240 --> 00:34:53,685
[LAUGHTER]

777
00:34:53,685 --> 00:34:57,350
REMY SHARP: It's a technical
audience in the first place.

778
00:34:57,350 --> 00:34:59,310
Loaded question, bias,
so on and so forth.

779
00:34:59,310 --> 00:35:02,621
But there's that question
as well.

780
00:35:02,621 --> 00:35:06,070
IVAN ZUZAK: So it seems like
having a huge number of mobile

781
00:35:06,070 --> 00:35:08,850
devices is the only way to
reliably test on Android and

782
00:35:08,850 --> 00:35:09,720
BlackBerry.

783
00:35:09,720 --> 00:35:12,820
Is there any hope of having
accurate, reliable emulators

784
00:35:12,820 --> 00:35:16,390
for platforms other than iOS?

785
00:35:16,390 --> 00:35:19,010
REMY SHARP: I would add iOS
to that list as well.

786
00:35:19,010 --> 00:35:20,930
IVAN ZUZAK: Yeah?

787
00:35:20,930 --> 00:35:22,540
Anyone?

788
00:35:22,540 --> 00:35:24,590
So is there any hope for having

789
00:35:24,590 --> 00:35:26,680
really reliable emulators?

790
00:35:26,680 --> 00:35:27,730
SIMON STEWART: No.

791
00:35:27,730 --> 00:35:28,995
IVAN ZUZAK: Excellent.

792
00:35:28,995 --> 00:35:31,180
REMY SHARP: Just to
give Opera props,

793
00:35:31,180 --> 00:35:34,050
isn't the Opera emulator--

794
00:35:34,050 --> 00:35:34,940
isn't it supposed to
be exactly the

795
00:35:34,940 --> 00:35:36,570
same as Opera Mobile?

796
00:35:36,570 --> 00:35:38,318
AUDIENCE: [INAUDIBLE]

797
00:35:38,318 --> 00:35:38,804
backed up.

798
00:35:38,804 --> 00:35:41,720
But it obviously doesn't have
the same [INAUDIBLE]

799
00:35:41,720 --> 00:35:43,178
device.

800
00:35:43,178 --> 00:35:45,122
AUDIENCE: WebOS is
pretty good.

801
00:35:45,122 --> 00:35:46,094
IVAN ZUZAK: Hmm?

802
00:35:46,094 --> 00:35:47,225
AUDIENCE: WebOS is
pretty good.

803
00:35:47,225 --> 00:35:48,380
PAUL IRISH: WebOS.

804
00:35:48,380 --> 00:35:53,070
Yeah, I think you could say
that there is hope that

805
00:35:53,070 --> 00:35:54,580
they'll get better.

806
00:35:54,580 --> 00:35:57,850
I would expect those
vendors to put

807
00:35:57,850 --> 00:35:59,405
support into those tools.

808
00:35:59,405 --> 00:36:00,150
So yeah.

809
00:36:00,150 --> 00:36:00,770
SIMON STEWART: Great.

810
00:36:00,770 --> 00:36:02,800
More optimistically than
just a flat no.

811
00:36:02,800 --> 00:36:05,090
I think the Pareto principle
is going to kick in here--

812
00:36:05,090 --> 00:36:07,550
the 80-20 rule.

813
00:36:07,550 --> 00:36:10,910
Testing on a simulator and
emulator is going to be fairly

814
00:36:10,910 --> 00:36:14,510
close, and in the common case,
actually enough for our

815
00:36:14,510 --> 00:36:15,140
testing needs.

816
00:36:15,140 --> 00:36:17,230
But there's always going to
be some weird quirk in the

817
00:36:17,230 --> 00:36:21,850
hardware that we're going
to need the devices for.

818
00:36:21,850 --> 00:36:24,315
So are the emulators going to
get enough where it'll move

819
00:36:24,315 --> 00:36:28,610
away from the 80-20
to 90-10 or 95-5?

820
00:36:28,610 --> 00:36:29,815
I don't know.

821
00:36:29,815 --> 00:36:33,170
But having seen the progress of
the Android emulator, which

822
00:36:33,170 --> 00:36:35,930
has gone from being quite
painful to use to actually

823
00:36:35,930 --> 00:36:39,270
being good enough to do a
majority of my testing on,

824
00:36:39,270 --> 00:36:43,810
particularly with the Intel
version that's available now,

825
00:36:43,810 --> 00:36:47,250
yeah, I'm actually relatively
hopeful about hitting the

826
00:36:47,250 --> 00:36:47,770
90-10 point.

827
00:36:47,770 --> 00:36:49,901
IVAN ZUZAK: Excellent.

828
00:36:49,901 --> 00:36:52,056
REMY SHARP: There's a
question over back.

829
00:36:52,056 --> 00:36:53,400
AUDIENCE: I just want to
give a shout out to

830
00:36:53,400 --> 00:36:57,570
opendevicelab.com, which is
actually opening device labs

831
00:36:57,570 --> 00:36:58,760
all over the world right now.

832
00:36:58,760 --> 00:36:59,880
They've got 40 locations.

833
00:36:59,880 --> 00:37:01,280
One of them is a
Mozilla office.

834
00:37:01,280 --> 00:37:02,980
Google is thinking about it.

835
00:37:02,980 --> 00:37:05,880
So if you've got hardware you
don't use, you can donate it

836
00:37:05,880 --> 00:37:08,300
to one of them, and every
developer can go there and try

837
00:37:08,300 --> 00:37:10,570
on real devices to play
with their things.

838
00:37:10,570 --> 00:37:13,060
Because we can make emulators
as much as we want.

839
00:37:13,060 --> 00:37:15,420
Most of the errors come through
touching and playing

840
00:37:15,420 --> 00:37:18,610
with the thing on the
real hardware.

841
00:37:18,610 --> 00:37:23,820
When I put Firefox OS on SIIs,
three devices, same device,

842
00:37:23,820 --> 00:37:25,050
completely different results.

843
00:37:25,050 --> 00:37:27,510
So it's not that easy.

844
00:37:27,510 --> 00:37:30,440
But OpenDeviceLab is a really,
really good idea for people

845
00:37:30,440 --> 00:37:33,050
that can't afford all these
phones to actually play with

846
00:37:33,050 --> 00:37:35,320
them in an office that
is a sharing space.

847
00:37:35,320 --> 00:37:36,880
And there's lots and lots
of them worldwide.

848
00:37:36,880 --> 00:37:38,375
So just wanted to
mention that.

849
00:37:38,375 --> 00:37:41,590
PAUL IRISH: They also have a lot
of information for people

850
00:37:41,590 --> 00:37:44,980
that want to set up their own
device labs, too, and

851
00:37:44,980 --> 00:37:46,355
community support for that.

852
00:37:46,355 --> 00:37:50,025
DAVID BLOOMAN: I also, if I'm
passing a phone shop, I'll

853
00:37:50,025 --> 00:37:52,860
just go in and have a play,
see what's going on.

854
00:37:52,860 --> 00:37:56,395
And I recommend you do, too,
because the important thing to

855
00:37:56,395 --> 00:37:58,310
know is what's in a shop
is what somebody could

856
00:37:58,310 --> 00:38:00,640
potentially be using to
access your site.

857
00:38:00,640 --> 00:38:03,630
So that's a great idea
of what exactly is

858
00:38:03,630 --> 00:38:04,950
going on in the market.

859
00:38:04,950 --> 00:38:07,700
And obviously, it's going to be
market specific, but you'd

860
00:38:07,700 --> 00:38:10,010
be surprised at some of the
travesties that are in phone

861
00:38:10,010 --> 00:38:11,470
shops nowadays.

862
00:38:11,470 --> 00:38:13,498
So yeah.

863
00:38:13,498 --> 00:38:15,940
AUDIENCE: Really quick, it's
worth pointing out that most

864
00:38:15,940 --> 00:38:19,690
of the emulator execution is
somewhere else in the stack.

865
00:38:19,690 --> 00:38:21,165
There's a great company
called [INAUDIBLE]

866
00:38:21,165 --> 00:38:24,580
Incorporated, which has proven
that they can run ARM code on

867
00:38:24,580 --> 00:38:27,050
x86 faster than ARM
executes on ARM.

868
00:38:27,050 --> 00:38:29,652
So obviously, the problem isn't
with the ARM device or

869
00:38:29,652 --> 00:38:30,350
the instruction set.

870
00:38:30,350 --> 00:38:31,710
It's somewhere in the
stack to get these

871
00:38:31,710 --> 00:38:32,900
emulators up and running.

872
00:38:32,900 --> 00:38:35,040
Most of the time, it's a balance
between the teams

873
00:38:35,040 --> 00:38:36,670
trying to get their products
out the door

874
00:38:36,670 --> 00:38:38,340
versus actually caring--

875
00:38:38,340 --> 00:38:40,530
or to put it in correct
terminology, since we're about

876
00:38:40,530 --> 00:38:43,240
to have beers-- giving enough
shits about getting their

877
00:38:43,240 --> 00:38:44,170
emulators up and running.

878
00:38:44,170 --> 00:38:46,380
So if this is something that
matters to web dev as a whole,

879
00:38:46,380 --> 00:38:49,660
you should definitely be putting
more pressure on these

880
00:38:49,660 --> 00:38:51,310
manufacturers to get
their emulators up

881
00:38:51,310 --> 00:38:52,955
to speed to do things.

882
00:38:52,955 --> 00:38:54,455
IVAN ZUZAK: Excellent.

883
00:38:54,455 --> 00:38:54,840
Great.

884
00:38:54,840 --> 00:38:58,060
So let's switch gears a bit.

885
00:38:58,060 --> 00:38:59,500
Here's one of my questions.

886
00:38:59,500 --> 00:39:02,680
Will we get a solution for
package management and module

887
00:39:02,680 --> 00:39:03,510
loading soon?

888
00:39:03,510 --> 00:39:06,490
There have been several tools
that have shown that it could

889
00:39:06,490 --> 00:39:09,140
be done, but there's
no real consensus.

890
00:39:09,140 --> 00:39:12,470
And will ECMAScript 6
modules solve this?

891
00:39:12,470 --> 00:39:13,510
And Addy corrected me.

892
00:39:13,510 --> 00:39:16,360
So these are actually two
questions in one.

893
00:39:16,360 --> 00:39:18,980
And package management
is somewhat

894
00:39:18,980 --> 00:39:20,280
separate from module loading.

895
00:39:20,280 --> 00:39:24,180
So this is a real problem
for a lot of developers.

896
00:39:24,180 --> 00:39:26,955
And Paul, perhaps you
can start this.

897
00:39:26,955 --> 00:39:29,670
PAUL IRISH: Sure.

898
00:39:29,670 --> 00:39:32,260
So right now in client-side
package management, there's a

899
00:39:32,260 --> 00:39:34,930
few possibilities.

900
00:39:34,930 --> 00:39:38,730
A while ago, there was a project
called Ender, and the

901
00:39:38,730 --> 00:39:40,820
people who made Ender decided
that it didn't really work

902
00:39:40,820 --> 00:39:43,040
out, so that's mostly dead.

903
00:39:43,040 --> 00:39:47,370
There's also volo, made by
James Burke, who created

904
00:39:47,370 --> 00:39:49,690
Require.js, which
is pretty cool.

905
00:39:49,690 --> 00:39:54,190
Bower, originally released by
Twitter, and there's also a

906
00:39:54,190 --> 00:39:58,360
lot of folks using NPM, sending
it through Browserify,

907
00:39:58,360 --> 00:40:00,600
and getting it to work there.

908
00:40:00,600 --> 00:40:04,200
And these are all kind of
using different registry

909
00:40:04,200 --> 00:40:09,010
approaches, different ideas on,
should we start an entire

910
00:40:09,010 --> 00:40:12,880
new JavaScript library ecosystem
from scratch or use

911
00:40:12,880 --> 00:40:15,240
one that's already available?

912
00:40:15,240 --> 00:40:18,390
Do we just accept that we can
use node packages inside the

913
00:40:18,390 --> 00:40:20,720
browser and make that work?

914
00:40:20,720 --> 00:40:23,370

915
00:40:23,370 --> 00:40:27,710
And it's kind of messy
right now.

916
00:40:27,710 --> 00:40:29,820
I mean, I'm most excited about
what's happening with the

917
00:40:29,820 --> 00:40:31,220
Bower project.

918
00:40:31,220 --> 00:40:34,820
It has about 900 packages
in it, all working.

919
00:40:34,820 --> 00:40:36,710
Dependency resolution
works fantastic.

920
00:40:36,710 --> 00:40:41,980
You actually get updated inside
the UI when JavaScript

921
00:40:41,980 --> 00:40:43,250
library ships a new version.

922
00:40:43,250 --> 00:40:44,790
So it kind of keeps
you up to date.

923
00:40:44,790 --> 00:40:48,030

924
00:40:48,030 --> 00:40:51,240
But there's a lot of challenges,
because package

925
00:40:51,240 --> 00:40:54,810
management for client side is
something where it's useful

926
00:40:54,810 --> 00:40:56,520
when it hits a critical mass.

927
00:40:56,520 --> 00:40:58,530
And I don't think
we're there yet.

928
00:40:58,530 --> 00:41:02,320
So I'm looking forward to seeing
what we can do, either

929
00:41:02,320 --> 00:41:04,870
inside this tool or another
tool, to kind of get there.

930
00:41:04,870 --> 00:41:09,530
Because without package
management client side,

931
00:41:09,530 --> 00:41:12,180
everyone's going to be afraid of
calling jQuery dependency.

932
00:41:12,180 --> 00:41:15,940
And jQuery is already too big.

933
00:41:15,940 --> 00:41:19,350
So it could have been smaller
had we had proper package

934
00:41:19,350 --> 00:41:21,450
management.

935
00:41:21,450 --> 00:41:24,160
And I think it would really open
up a lot of progress and

936
00:41:24,160 --> 00:41:26,340
forward momentum in what we're
able to get away with on the

937
00:41:26,340 --> 00:41:29,290
front end when we can actually
create reasonable

938
00:41:29,290 --> 00:41:31,260
dependencies.

939
00:41:31,260 --> 00:41:34,900
IVAN ZUZAK: So there's this
point where at one point,

940
00:41:34,900 --> 00:41:36,620
standardization should
come in?

941
00:41:36,620 --> 00:41:39,742

942
00:41:39,742 --> 00:41:40,992
PAUL IRISH: Alex?

943
00:41:40,992 --> 00:41:42,900

944
00:41:42,900 --> 00:41:43,990
You want to talk about
ESX modules?

945
00:41:43,990 --> 00:41:46,920
ALEX RUSSELL: Sure.

946
00:41:46,920 --> 00:41:51,280
So I'm Alex Russell, Google, one
of our representatives on

947
00:41:51,280 --> 00:41:54,040
TC39, the standards body
for JavaScript.

948
00:41:54,040 --> 00:41:58,720
So there is a module system
coming in the next version of

949
00:41:58,720 --> 00:41:59,440
JavaScript.

950
00:41:59,440 --> 00:42:01,450
Will you be able to use it on
all the devices that are

951
00:42:01,450 --> 00:42:02,220
deployed today?

952
00:42:02,220 --> 00:42:03,500
Well, that depends on whether
or not you're

953
00:42:03,500 --> 00:42:04,730
targeting new browsers.

954
00:42:04,730 --> 00:42:06,250
So the answer is no.

955
00:42:06,250 --> 00:42:08,190
At least no in the short term.

956
00:42:08,190 --> 00:42:10,070
In the long term--

957
00:42:10,070 --> 00:42:13,310
well, in the intermediary time,
you'll be able to use

958
00:42:13,310 --> 00:42:16,490
tools like Tracer and
other transpilers--

959
00:42:16,490 --> 00:42:18,540
JavaScript to JavaScript
compilers--

960
00:42:18,540 --> 00:42:22,160
that will allow you to sort of
program in the source language

961
00:42:22,160 --> 00:42:24,400
and then convert to the other
one, based on a standard

962
00:42:24,400 --> 00:42:28,490
syntax, which sort of sets you
up for living in the wonderful

963
00:42:28,490 --> 00:42:30,190
future that will eventually
arrive.

964
00:42:30,190 --> 00:42:32,220
So that's a strategy that
you can use today.

965
00:42:32,220 --> 00:42:34,810
There's a little bit of tension
right now in the

966
00:42:34,810 --> 00:42:37,150
committee about what's going to
happen with the particulars

967
00:42:37,150 --> 00:42:39,370
of the syntax and some
of the semantics.

968
00:42:39,370 --> 00:42:40,780
And we're ironing
those out now.

969
00:42:40,780 --> 00:42:44,710
But the goal for us is to have a
version of the language that

970
00:42:44,710 --> 00:42:47,890
has this done, more or less
feature complete, by the end

971
00:42:47,890 --> 00:42:48,750
of the year.

972
00:42:48,750 --> 00:42:50,420
So wish us luck.

973
00:42:50,420 --> 00:42:55,020
And I guess if you'd like to
start using what is likely to

974
00:42:55,020 --> 00:42:58,620
become the module system for the
next version of ECMAScript

975
00:42:58,620 --> 00:43:00,210
today, it's not a
package manager.

976
00:43:00,210 --> 00:43:01,120
It's just a module system.

977
00:43:01,120 --> 00:43:03,310
But you can check out Tracer
and a couple of other

978
00:43:03,310 --> 00:43:05,632
transpilers that are starting
to support it.

979
00:43:05,632 --> 00:43:06,100
IVAN ZUZAK: Good.

980
00:43:06,100 --> 00:43:08,250
So while you have the
mic, I want to

981
00:43:08,250 --> 00:43:10,430
ask you another question.

982
00:43:10,430 --> 00:43:13,390
So what should be the role
of standardization in web

983
00:43:13,390 --> 00:43:16,730
development during testing, and
what are some of the areas

984
00:43:16,730 --> 00:43:19,265
that would benefit from
standardization right now?

985
00:43:19,265 --> 00:43:25,790
ALEX RUSSELL: OK, so with my
non-Google hat on, with my W3C

986
00:43:25,790 --> 00:43:28,240
TAG member hat on, let me answer
the question in terms

987
00:43:28,240 --> 00:43:30,800
of, what's the role of
a standards body.

988
00:43:30,800 --> 00:43:33,030
My view is that the role of a
standards body-- and this is

989
00:43:33,030 --> 00:43:36,430
not the TAG's view, but it's my
personal view-- is that the

990
00:43:36,430 --> 00:43:40,230
role of a standards body is to
hold the coats while everybody

991
00:43:40,230 --> 00:43:43,220
gets yelled at to go have a
fight inside of a ring, right?

992
00:43:43,220 --> 00:43:45,340
They set the rules, and they
hold the coats while people

993
00:43:45,340 --> 00:43:50,740
duke it out inside some
preordained boxing ring.

994
00:43:50,740 --> 00:43:54,930
And they aren't let out again
until users have one answer.

995
00:43:54,930 --> 00:43:58,270
The goal here is to get users
to say, holy cow, you guys

996
00:43:58,270 --> 00:43:59,120
have made this really hard.

997
00:43:59,120 --> 00:44:01,350
You might all have some answer,
but we need one

998
00:44:01,350 --> 00:44:02,420
standard answer.

999
00:44:02,420 --> 00:44:05,300
And that usually only happens
when A, everybody understands

1000
00:44:05,300 --> 00:44:06,170
the problem.

1001
00:44:06,170 --> 00:44:08,220
So until everybody understands
the problem, if there's some

1002
00:44:08,220 --> 00:44:09,900
vocal minority that says,
look, there's this giant

1003
00:44:09,900 --> 00:44:12,220
problem, well, that's probably
not enough to get a standards

1004
00:44:12,220 --> 00:44:14,130
effort to a successful
conclusion.

1005
00:44:14,130 --> 00:44:16,120
So if everyone understands the
problem, and there are

1006
00:44:16,120 --> 00:44:19,350
competing answers, that's sort
of the predicate for a

1007
00:44:19,350 --> 00:44:21,590
successful standards scrum.

1008
00:44:21,590 --> 00:44:24,840
You can't really start the
game until those set of

1009
00:44:24,840 --> 00:44:26,200
conditions have been met.

1010
00:44:26,200 --> 00:44:29,560
So it's good for browser vendors
to innovate, to start

1011
00:44:29,560 --> 00:44:31,760
working together to
collaboratively look at what's

1012
00:44:31,760 --> 00:44:33,280
happening inside the world.

1013
00:44:33,280 --> 00:44:34,500
What are the libraries doing?

1014
00:44:34,500 --> 00:44:36,140
What are the compilers doing?

1015
00:44:36,140 --> 00:44:37,850
Where are we falling
down on the job?

1016
00:44:37,850 --> 00:44:40,080
Where are users yelling
at us most loudly?

1017
00:44:40,080 --> 00:44:43,360
And once that happens, go to
the standards body and say,

1018
00:44:43,360 --> 00:44:45,730
OK, well, this is the subset of
what we clearly understand

1019
00:44:45,730 --> 00:44:47,630
is a relatively good answer.

1020
00:44:47,630 --> 00:44:48,770
Let's standardize that.

1021
00:44:48,770 --> 00:44:51,900
And then to hopefully integrate
more of what is then

1022
00:44:51,900 --> 00:44:54,580
collectively understood to be
the right problem or the right

1023
00:44:54,580 --> 00:44:56,200
answer as time passes.

1024
00:44:56,200 --> 00:44:56,900
IVAN ZUZAK: OK, thanks.

1025
00:44:56,900 --> 00:44:58,830
Simon.

1026
00:44:58,830 --> 00:45:02,810
What's your experience from
being on W3C group for testing

1027
00:45:02,810 --> 00:45:03,510
and tooling?

1028
00:45:03,510 --> 00:45:06,910
SIMON STEWART: Yeah, so
WebDriver is in a really

1029
00:45:06,910 --> 00:45:09,820
interesting space in that it's a
de facto standard that we're

1030
00:45:09,820 --> 00:45:12,866
turning into a de
jure standard.

1031
00:45:12,866 --> 00:45:17,290
A lot of the tools that Paul
was talking about earlier,

1032
00:45:17,290 --> 00:45:19,220
anything that connects to
Sauce Labs is using the

1033
00:45:19,220 --> 00:45:20,470
WebDriver APIs.

1034
00:45:20,470 --> 00:45:23,260

1035
00:45:23,260 --> 00:45:28,120
Michael Tamm's Fighting Layout
Bugs, that uses WebDriver.

1036
00:45:28,120 --> 00:45:30,990
It keeps on cropping up in these
sort of unusual places.

1037
00:45:30,990 --> 00:45:32,860
The Appium stuff, that
uses the wire

1038
00:45:32,860 --> 00:45:35,280
protocol from WebDriver.

1039
00:45:35,280 --> 00:45:38,650
And so yeah, what we're
attempting to do right now is

1040
00:45:38,650 --> 00:45:41,600
go, what we need is--

1041
00:45:41,600 --> 00:45:44,480
that work is currently being
done by a relatively small

1042
00:45:44,480 --> 00:45:46,640
open source team.

1043
00:45:46,640 --> 00:45:47,840
And they're brilliant.

1044
00:45:47,840 --> 00:45:50,000
They are an amazing team.

1045
00:45:50,000 --> 00:45:52,350
But we're now at the point,
and we're past the point,

1046
00:45:52,350 --> 00:45:56,040
where in order to make the
things that people want to be

1047
00:45:56,040 --> 00:45:59,820
able to test work properly, we
need the aid and help of the

1048
00:45:59,820 --> 00:46:00,850
people writing the browsers.

1049
00:46:00,850 --> 00:46:03,010
We need to be baked
into the browsers.

1050
00:46:03,010 --> 00:46:05,940
Opera were the first people that
stepped up to the plate

1051
00:46:05,940 --> 00:46:07,200
and went, you know what?

1052
00:46:07,200 --> 00:46:08,680
We could actually do this.

1053
00:46:08,680 --> 00:46:12,880
And the Opera driver was a
fantastic step forward and was

1054
00:46:12,880 --> 00:46:15,080
incredibly fast and
incredibly stable.

1055
00:46:15,080 --> 00:46:18,350
Chrome followed relatively
swiftly after that.

1056
00:46:18,350 --> 00:46:22,540
And we went from having a fairly
buggy, painful to use

1057
00:46:22,540 --> 00:46:26,110
Chrome driver to something
that was amazing.

1058
00:46:26,110 --> 00:46:29,830
Mozilla, we talk about
M-Day on the project.

1059
00:46:29,830 --> 00:46:31,980
Mozilla have a project called
Marionette, which is their

1060
00:46:31,980 --> 00:46:35,800
implementation of the
WebDriver APIs.

1061
00:46:35,800 --> 00:46:38,300
So my experience has been
actually really, really

1062
00:46:38,300 --> 00:46:40,980
positive, like everybody sees
the need for these things.

1063
00:46:40,980 --> 00:46:43,260
Everyone is pulling together,
and we're all just trying to

1064
00:46:43,260 --> 00:46:46,410
figure out the nicest way of
standardizing these things.

1065
00:46:46,410 --> 00:46:49,226
REMY SHARP: Is Microsoft
on that list?

1066
00:46:49,226 --> 00:46:53,380
SIMON STEWART: So yes,
Microsoft, Apple.

1067
00:46:53,380 --> 00:46:58,740
There are now representatives
from Microsoft on the working

1068
00:46:58,740 --> 00:47:01,130
group mailing list, and I think
they're planning on

1069
00:47:01,130 --> 00:47:06,320
showing up to the next
face-to-face session.

1070
00:47:06,320 --> 00:47:09,750
There were Microsoft
representatives at TPAC last

1071
00:47:09,750 --> 00:47:14,160
year, in 2012, as well, who
attended a full day of

1072
00:47:14,160 --> 00:47:15,620
discussion.

1073
00:47:15,620 --> 00:47:19,460
So actually, Microsoft,
obviously they don't tell us

1074
00:47:19,460 --> 00:47:19,880
everything.

1075
00:47:19,880 --> 00:47:22,060
But they are taking
it seriously.

1076
00:47:22,060 --> 00:47:24,890
Apple are Apple, and nobody
knows quite what's going to

1077
00:47:24,890 --> 00:47:26,140
happen there.

1078
00:47:26,140 --> 00:47:28,140

1079
00:47:28,140 --> 00:47:30,170
But I think it's inevitable.

1080
00:47:30,170 --> 00:47:32,920
I really hope it's inevitable,
because everyone

1081
00:47:32,920 --> 00:47:33,700
else is doing it.

1082
00:47:33,700 --> 00:47:35,040
We're turning it into
a standard.

1083
00:47:35,040 --> 00:47:37,840
And there are people who
implement it because it's good

1084
00:47:37,840 --> 00:47:39,080
for the users.

1085
00:47:39,080 --> 00:47:40,890
And there are people who
implement it because they like

1086
00:47:40,890 --> 00:47:43,630
to be seen as conforming
to standards.

1087
00:47:43,630 --> 00:47:46,750
And the more pressure we apply
by allowing more of these

1088
00:47:46,750 --> 00:47:48,130
check boxes to be applied,
the better.

1089
00:47:48,130 --> 00:47:50,920
IVAN ZUZAK: So are there any
other tools that are going to

1090
00:47:50,920 --> 00:47:51,790
get standardized?

1091
00:47:51,790 --> 00:47:55,570
I saw the charter, and you
have Console API from

1092
00:47:55,570 --> 00:47:57,226
Developer Tools.

1093
00:47:57,226 --> 00:47:59,000
Is that going to happen soon?

1094
00:47:59,000 --> 00:48:03,880
PAUL IRISH: So there's
a Java spec for

1095
00:48:03,880 --> 00:48:06,760
standardizing Console API.

1096
00:48:06,760 --> 00:48:09,490
Mostly, it just needs
more work.

1097
00:48:09,490 --> 00:48:13,000
But right now, actually, Console
API is extremely

1098
00:48:13,000 --> 00:48:14,250
consistent across browsers.

1099
00:48:14,250 --> 00:48:17,260

1100
00:48:17,260 --> 00:48:19,730
There's a bunch of different
features in console.log that

1101
00:48:19,730 --> 00:48:22,800
most people don't know about
that are actually implemented

1102
00:48:22,800 --> 00:48:24,290
across browsers.

1103
00:48:24,290 --> 00:48:30,320
Just last summer, we changed the
definition of the dollar

1104
00:48:30,320 --> 00:48:33,320
sign symbol in the command
line API in the console.

1105
00:48:33,320 --> 00:48:37,850
And while it's not in any
standard, we just talked to

1106
00:48:37,850 --> 00:48:40,020
the guys who make Firebug, the
Firefox developer tools, the

1107
00:48:40,020 --> 00:48:43,030
Opera guys, and we all just
changed it at once.

1108
00:48:43,030 --> 00:48:48,000
So these things stay in sync
pretty well without the

1109
00:48:48,000 --> 00:48:50,260
standard being published.

1110
00:48:50,260 --> 00:48:50,930
Yeah.

1111
00:48:50,930 --> 00:48:53,680
SIMON STEWART: There is a
Browser Tools and Testing

1112
00:48:53,680 --> 00:48:54,500
Working Group.

1113
00:48:54,500 --> 00:48:56,410
If anyone's interested, they
should think about

1114
00:48:56,410 --> 00:48:59,430
joining at the W3C.

1115
00:48:59,430 --> 00:49:02,630
And I think there's some efforts
to actually kick start

1116
00:49:02,630 --> 00:49:04,650
that and give it some
shape and form.

1117
00:49:04,650 --> 00:49:07,060
You may know a bit more about
that, Paul, than I do.

1118
00:49:07,060 --> 00:49:09,310
Yeah, OK.

1119
00:49:09,310 --> 00:49:12,130
There's an effort, and I'm not
quite sure how far it's gone.

1120
00:49:12,130 --> 00:49:12,690
But it'll happen.

1121
00:49:12,690 --> 00:49:15,800
REMY SHARP: The debugger
protocol, is that part of the

1122
00:49:15,800 --> 00:49:19,130
standard, or is it just that
it's been written and looks

1123
00:49:19,130 --> 00:49:20,380
like a standard?

1124
00:49:20,380 --> 00:49:22,999

1125
00:49:22,999 --> 00:49:23,880
PAUL IRISH: The debugger
protocol--

1126
00:49:23,880 --> 00:49:25,810
IVAN ZUZAK: We're talking
about which protocol?

1127
00:49:25,810 --> 00:49:27,810
SIMON STEWART: Whose debugger
protocol is that?

1128
00:49:27,810 --> 00:49:30,620
Scope or the Firefox one
or the WebKit one?

1129
00:49:30,620 --> 00:49:33,505
REMY SHARP: The one that came
out of WebKit that--

1130
00:49:33,505 --> 00:49:36,490
like I said, it looked like
a standard Scope.

1131
00:49:36,490 --> 00:49:38,890
Looked like it came
from Opera.

1132
00:49:38,890 --> 00:49:43,020
The debugger protocol looked
like Chrome and Safari were

1133
00:49:43,020 --> 00:49:44,280
kind of adhering to it.

1134
00:49:44,280 --> 00:49:44,570
And--

1135
00:49:44,570 --> 00:49:44,880
[INTERPOSING VOICES]

1136
00:49:44,880 --> 00:49:45,760
PAUL IRISH: Yeah,
so both are--

1137
00:49:45,760 --> 00:49:46,780
REMY SHARP: [INAUDIBLE].

1138
00:49:46,780 --> 00:49:50,950
PAUL IRISH: Both are published
open specifications and both

1139
00:49:50,950 --> 00:49:56,270
designed for use in a
generalized fashion.

1140
00:49:56,270 --> 00:49:59,060
I think Firefox was the
last one to add

1141
00:49:59,060 --> 00:50:01,650
support for remote debugging.

1142
00:50:01,650 --> 00:50:05,930
And they didn't use either
of these two protocols.

1143
00:50:05,930 --> 00:50:10,870
So I don't expect to see
standardization along these

1144
00:50:10,870 --> 00:50:14,200
lines, which is a bummer,
but it's just how it is.

1145
00:50:14,200 --> 00:50:14,540
SIMON STEWART: Not yet.

1146
00:50:14,540 --> 00:50:16,895
PAUL IRISH: Not yet.

1147
00:50:16,895 --> 00:50:20,310
IVAN ZUZAK: So we have time
for a few questions.

1148
00:50:20,310 --> 00:50:21,560
Andrew?

1149
00:50:21,560 --> 00:50:23,740

1150
00:50:23,740 --> 00:50:26,050
So let's get one in.

1151
00:50:26,050 --> 00:50:28,410
What's the best way to test
against varying network

1152
00:50:28,410 --> 00:50:29,760
conditions in real life?

1153
00:50:29,760 --> 00:50:33,850
We have devices that are
constantly changing, network

1154
00:50:33,850 --> 00:50:35,930
switching between
speeds and such.

1155
00:50:35,930 --> 00:50:37,570
So how do you test this?

1156
00:50:37,570 --> 00:50:41,620
PAUL IRISH: There's two ways,
the two best ways I know.

1157
00:50:41,620 --> 00:50:44,380
There's Charles Proxy.

1158
00:50:44,380 --> 00:50:46,170
It runs on all platforms.

1159
00:50:46,170 --> 00:50:48,970
Can simulate a lot of different
network conditions,

1160
00:50:48,970 --> 00:50:51,780
including packet loss and
throttled bandwidth.

1161
00:50:51,780 --> 00:50:58,310
And anyone on Lion or better on
OSX, if they install Xcode,

1162
00:50:58,310 --> 00:51:01,560
they can get this thing called
Link Conditioner, which is

1163
00:51:01,560 --> 00:51:02,760
just in System Preferences.

1164
00:51:02,760 --> 00:51:07,750
And it has a few presets for
packet loss percentage and

1165
00:51:07,750 --> 00:51:09,350
bandwidth throughput.

1166
00:51:09,350 --> 00:51:11,725
But you can mimic a few
different common profiles,

1167
00:51:11,725 --> 00:51:13,710
which are pretty cool.

1168
00:51:13,710 --> 00:51:15,810
REMY SHARP: Can I also
add something there?

1169
00:51:15,810 --> 00:51:19,380
Something I've noticed is that
the iPhone behaves differently

1170
00:51:19,380 --> 00:51:21,780
when it has a Wi-Fi connection,
regardless of

1171
00:51:21,780 --> 00:51:26,950
whether or not it's on 3G, as
in tethered, to when it

1172
00:51:26,950 --> 00:51:27,910
doesn't have a Wi-Fi.

1173
00:51:27,910 --> 00:51:29,300
It does different things.

1174
00:51:29,300 --> 00:51:35,140

1175
00:51:35,140 --> 00:51:38,640
IOS 6 has the Network
Conditioner thing on the

1176
00:51:38,640 --> 00:51:41,080
actual device, as well, so you
can play around with that.

1177
00:51:41,080 --> 00:51:43,030
But seeing real network
traffic when

1178
00:51:43,030 --> 00:51:44,700
you're not on Wi-Fi--

1179
00:51:44,700 --> 00:51:46,910
the phone acts differently when
it's on Wi-Fi to when

1180
00:51:46,910 --> 00:51:49,160
it's not on Wi-Fi.

1181
00:51:49,160 --> 00:51:51,450
When it's on Wi-Fi, it
sends shitloads of

1182
00:51:51,450 --> 00:51:52,370
data over the wire.

1183
00:51:52,370 --> 00:51:56,600
And I found an article this
morning and tweeted the link

1184
00:51:56,600 --> 00:52:02,170
to show you how to sniff traffic
whilst it's on 3G,

1185
00:52:02,170 --> 00:52:04,025
connecting through a USB.

1186
00:52:04,025 --> 00:52:07,746
But it's something to be
wary of, basically.

1187
00:52:07,746 --> 00:52:09,440
IVAN ZUZAK: Great.

1188
00:52:09,440 --> 00:52:11,930
So can we get native support
for proxy events?

1189
00:52:11,930 --> 00:52:13,880
So--

1190
00:52:13,880 --> 00:52:14,490
oh, sorry.

1191
00:52:14,490 --> 00:52:16,800
AUDIENCE: Just one additional
question, then.

1192
00:52:16,800 --> 00:52:20,540
Testing things like app cache
and simulating offline whilst

1193
00:52:20,540 --> 00:52:22,290
remote debugging.

1194
00:52:22,290 --> 00:52:22,900
Is it possible?

1195
00:52:22,900 --> 00:52:26,665
We try blacklisting domains in
Charles, and that kind of half

1196
00:52:26,665 --> 00:52:29,754
simulates it but not totally.

1197
00:52:29,754 --> 00:52:31,780
PAUL IRISH: Not yet.

1198
00:52:31,780 --> 00:52:34,140
SIMON STEWART: Yeah, in
lots of the WebDriver

1199
00:52:34,140 --> 00:52:36,990
implementations, there's an
expectation there's a working

1200
00:52:36,990 --> 00:52:38,450
network stack.

1201
00:52:38,450 --> 00:52:41,150
And if you go offline,
that disappears.

1202
00:52:41,150 --> 00:52:42,400
D'oh.

1203
00:52:42,400 --> 00:52:44,506

1204
00:52:44,506 --> 00:52:48,160
AUDIENCE: Offline, we shut
down the server.

1205
00:52:48,160 --> 00:52:49,500
That's how we--

1206
00:52:49,500 --> 00:52:50,820
I mean, we're not
emulating it.

1207
00:52:50,820 --> 00:52:51,980
We're just killing the
server that it's

1208
00:52:51,980 --> 00:52:52,390
trying to connect to.

1209
00:52:52,390 --> 00:52:55,442
So it kind of fakes it.

1210
00:52:55,442 --> 00:52:57,350
IVAN ZUZAK: So here's
one for Remy.

1211
00:52:57,350 --> 00:53:00,500
Can we get native support for
proxy events in Dev Tools

1212
00:53:00,500 --> 00:53:03,260
injecting geolocation based
on Google Maps inputs?

1213
00:53:03,260 --> 00:53:05,270
REMY SHARP: We kind of touched
on that earlier, didn't we?

1214
00:53:05,270 --> 00:53:06,170
IVAN ZUZAK: OK.

1215
00:53:06,170 --> 00:53:09,343
REMY SHARP: I mean, you can
answer, Paul, if you want to.

1216
00:53:09,343 --> 00:53:13,056

1217
00:53:13,056 --> 00:53:14,720
IVAN ZUZAK: So here's
one for you, Remy.

1218
00:53:14,720 --> 00:53:18,710
You had a recent blog post
that touched upon CORS.

1219
00:53:18,710 --> 00:53:23,150
So the headers views to get
across the main [INAUDIBLE]

1220
00:53:23,150 --> 00:53:25,020
requests.

1221
00:53:25,020 --> 00:53:27,800
And there was a lengthy
discussion after that post.

1222
00:53:27,800 --> 00:53:31,476
And can you explain what the
discussion was about?

1223
00:53:31,476 --> 00:53:34,650
REMY SHARP: The discussion on
Google+ or the discussion on

1224
00:53:34,650 --> 00:53:35,646
the comments?

1225
00:53:35,646 --> 00:53:38,300
IVAN ZUZAK: The discussion that
touched upon that we're

1226
00:53:38,300 --> 00:53:42,270
not sure, actually, how to
use CORS headers on which

1227
00:53:42,270 --> 00:53:43,255
[INAUDIBLE].

1228
00:53:43,255 --> 00:53:44,850
REMY SHARP: Who asked
the question?

1229
00:53:44,850 --> 00:53:47,176
Because you might be able
to clarify it for me.

1230
00:53:47,176 --> 00:53:49,445
IVAN ZUZAK: So it was actually
my question.

1231
00:53:49,445 --> 00:53:50,610
REMY SHARP: That was
your question.

1232
00:53:50,610 --> 00:53:51,060
All right.

1233
00:53:51,060 --> 00:53:52,410
[LAUGHTER]

1234
00:53:52,410 --> 00:53:54,210
IVAN ZUZAK: Your
last blog post.

1235
00:53:54,210 --> 00:53:58,370
So it started quite a discussion
about when to use

1236
00:53:58,370 --> 00:53:59,485
CORS on images.

1237
00:53:59,485 --> 00:54:02,090
REMY SHARP: Oh yeah, I
basically said, just

1238
00:54:02,090 --> 00:54:04,370
turn that shit on.

1239
00:54:04,370 --> 00:54:06,152
And I linked to--

1240
00:54:06,152 --> 00:54:09,082
I'm going to butcher
his name--

1241
00:54:09,082 --> 00:54:10,332
Anne van Kesteren.

1242
00:54:10,332 --> 00:54:12,660

1243
00:54:12,660 --> 00:54:17,140
So he's got a blog post that
says turn CORS on for XHR, for

1244
00:54:17,140 --> 00:54:18,450
basically Ajax.

1245
00:54:18,450 --> 00:54:22,210
And I'm suggesting if you're
a Flickr or Instagram or

1246
00:54:22,210 --> 00:54:24,850
something with images, and I
think, actually, there's some

1247
00:54:24,850 --> 00:54:27,890
other asset types, you should
turn on CORS support for that.

1248
00:54:27,890 --> 00:54:30,570
So send, access origin, star.

1249
00:54:30,570 --> 00:54:33,720
There's a link at the bottom of
the blog post that opens a

1250
00:54:33,720 --> 00:54:40,740
discussion about the security
implications if

1251
00:54:40,740 --> 00:54:42,010
you add a star rule.

1252
00:54:42,010 --> 00:54:46,270
And there's a back and
forth between Anne

1253
00:54:46,270 --> 00:54:51,500
and Malte from Google.

1254
00:54:51,500 --> 00:54:54,130

1255
00:54:54,130 --> 00:54:56,700
I don't really know how it
ended, but I want to see

1256
00:54:56,700 --> 00:54:59,840
these, particularly image
services, giving us

1257
00:54:59,840 --> 00:55:02,490
cross-origin rules to allow us
to import that data into

1258
00:55:02,490 --> 00:55:06,000
things like Canvas and have full
access to that data so we

1259
00:55:06,000 --> 00:55:11,466
can remix the image data and
produce new content.

1260
00:55:11,466 --> 00:55:13,640
I can't remember-- there's
something else you can put it

1261
00:55:13,640 --> 00:55:14,520
on as well.

1262
00:55:14,520 --> 00:55:18,600
PAUL IRISH: If you're really
lazy, just add the Apache

1263
00:55:18,600 --> 00:55:21,320
config that's in HTML5
boilerplate, because it

1264
00:55:21,320 --> 00:55:25,262
enables this CORS for images
automatically.

1265
00:55:25,262 --> 00:55:28,430
IVAN ZUZAK: So do you think that
it's a place where tools

1266
00:55:28,430 --> 00:55:32,710
can improve to give you more
information on how you should

1267
00:55:32,710 --> 00:55:34,660
use a mechanism or an API?

1268
00:55:34,660 --> 00:55:37,760
Because there was a lot of
misunderstanding on, should

1269
00:55:37,760 --> 00:55:38,390
you be doing this?

1270
00:55:38,390 --> 00:55:39,110
Is it secure?

1271
00:55:39,110 --> 00:55:40,050
Is it not secure?

1272
00:55:40,050 --> 00:55:42,270
Are we doing [INAUDIBLE]
requests or not?

1273
00:55:42,270 --> 00:55:45,700
So like when you're writing
code, should you get a warning

1274
00:55:45,700 --> 00:55:48,830
from your IDE and say, hey look,
this is something you

1275
00:55:48,830 --> 00:55:51,790
probably are not an expert in.

1276
00:55:51,790 --> 00:55:56,050
Check these sections in the
standard, or check this--

1277
00:55:56,050 --> 00:55:58,870
PAUL IRISH: Yeah, I think
there's a lot of opportunity

1278
00:55:58,870 --> 00:56:02,900
for providing them a bit more
context of what you're seeing.

1279
00:56:02,900 --> 00:56:06,850
If you're looking at the
headers, and you're misusing

1280
00:56:06,850 --> 00:56:09,340
one of the new security headers,
the tool should be

1281
00:56:09,340 --> 00:56:11,420
able to let you know and tell
you where you can find more

1282
00:56:11,420 --> 00:56:13,580
documentation on how to
use it correctly.

1283
00:56:13,580 --> 00:56:16,930
Same situation on performance,
when you're getting back a lot

1284
00:56:16,930 --> 00:56:19,860
of information, it can give
you some guidance and some

1285
00:56:19,860 --> 00:56:21,975
resources to learn better
about what this means.

1286
00:56:21,975 --> 00:56:24,310
IVAN ZUZAK: Yeah.

1287
00:56:24,310 --> 00:56:25,920
OK, that's it.

1288
00:56:25,920 --> 00:56:26,630
Thanks, everyone.

1289
00:56:26,630 --> 00:56:29,630
[APPLAUSE]

1290
00:56:29,630 --> 00:56:34,200

1
00:00:00,000 --> 00:00:06,000

2
00:00:06,000 --> 00:00:07,790
STEVE THAIR: We started off
with the offline panel.

3
00:00:07,790 --> 00:00:10,840
Now we're moving into a
networked world, where we are

4
00:00:10,840 --> 00:00:13,190
connected to a network even
though obviously we discussed

5
00:00:13,190 --> 00:00:16,860
a lot of network connected stuff
in the earlier session.

6
00:00:16,860 --> 00:00:19,850
I'm going to introduce the
panel very quickly.

7
00:00:19,850 --> 00:00:24,570
From the end, we have Ilya
Grigorik from Google.

8
00:00:24,570 --> 00:00:28,120
If any of you have been to
Velocity have seen Ilya

9
00:00:28,120 --> 00:00:30,950
present, he's going to give us
a little opening talk for 10

10
00:00:30,950 --> 00:00:33,110
minutes just to set the scene.

11
00:00:33,110 --> 00:00:35,960
So he shares an office with
Steve Souders, I think.

12
00:00:35,960 --> 00:00:38,425
There you go.

13
00:00:38,425 --> 00:00:42,470
Next to him, we have Andy
Davies, who's a local boy.

14
00:00:42,470 --> 00:00:43,290
So we're from Bristol.

15
00:00:43,290 --> 00:00:45,930
I don't know, where are you
from originally, Andy?

16
00:00:45,930 --> 00:00:47,280
ANDY DAVIES: Wales.

17
00:00:47,280 --> 00:00:48,530
I'm Welsh.

18
00:00:48,530 --> 00:00:50,230

19
00:00:50,230 --> 00:00:51,480
STEVE THAIR: [INAUDIBLE].

20
00:00:51,480 --> 00:00:53,420

21
00:00:53,420 --> 00:00:54,620
He's from Wales.

22
00:00:54,620 --> 00:00:58,000
Occasionally, they win a rugby
game but not lately.

23
00:00:58,000 --> 00:01:01,650
Next to him, we have John
Cleveley from the BBC.

24
00:01:01,650 --> 00:01:04,560
He was responsible for migrating
BBC News to a

25
00:01:04,560 --> 00:01:07,150
dynamic platform, been building
features mobile

26
00:01:07,150 --> 00:01:10,020
first, using responsive design
all the way up to the desktop.

27
00:01:10,020 --> 00:01:13,750
Yeah, I think Andrew wrote
that piece of thing.

28
00:01:13,750 --> 00:01:16,060
And last but not least,
we have Jackson.

29
00:01:16,060 --> 00:01:17,720
And Jackson's presented at our
London web performance user

30
00:01:17,720 --> 00:01:19,760
group and Velocity, and
stuff like that.

31
00:01:19,760 --> 00:01:22,190
He's described here as a
veteran troublemaker at

32
00:01:22,190 --> 00:01:22,580
Facebook London.

33
00:01:22,580 --> 00:01:23,460
I think it's supposed to be

34
00:01:23,460 --> 00:01:25,350
troubleshooter at
Facebook London.

35
00:01:25,350 --> 00:01:26,040
No?

36
00:01:26,040 --> 00:01:26,210
Troublemaker?

37
00:01:26,210 --> 00:01:27,430
OK.

38
00:01:27,430 --> 00:01:30,240
Works on tools and mobile, help
build mobile Timeline and

39
00:01:30,240 --> 00:01:31,700
App Center.

40
00:01:31,700 --> 00:01:33,340
Saying you had anything
to do with Timeline

41
00:01:33,340 --> 00:01:35,780
is extremely brave.

42
00:01:35,780 --> 00:01:36,040
Cool.

43
00:01:36,040 --> 00:01:39,710
So basically, we're just going
to kick off with Ilya giving

44
00:01:39,710 --> 00:01:40,960
some opening remarks.

45
00:01:40,960 --> 00:01:46,100

46
00:01:46,100 --> 00:01:47,350
ILYA GRIGORIK: I'm not sure if
this microphone is working.

47
00:01:47,350 --> 00:01:48,334
No?

48
00:01:48,334 --> 00:01:49,318
Yes?

49
00:01:49,318 --> 00:01:49,810
STEVE THAIR: That one's not.

50
00:01:49,810 --> 00:01:50,800
Just use the [INAUDIBLE].

51
00:01:50,800 --> 00:01:52,970
ILYA GRIGORIK: This one works.

52
00:01:52,970 --> 00:01:54,400
That works.

53
00:01:54,400 --> 00:01:56,250
Now what's the magic trick
to get this thing?

54
00:01:56,250 --> 00:01:57,494
There.

55
00:01:57,494 --> 00:01:58,970
STEVE THAIR: We wave
to the nice man.

56
00:01:58,970 --> 00:02:00,642
ILYA GRIGORIK: OK.

57
00:02:00,642 --> 00:02:01,892
Hello.

58
00:02:01,892 --> 00:02:03,820

59
00:02:03,820 --> 00:02:05,070
Waiting, waiting, waiting.

60
00:02:05,070 --> 00:02:14,260

61
00:02:14,260 --> 00:02:16,230
Warming up.

62
00:02:16,230 --> 00:02:17,210
STEVE THAIR: Tell a joke.

63
00:02:17,210 --> 00:02:17,720
ILYA GRIGORIK: All right.

64
00:02:17,720 --> 00:02:20,400
Well, no jokes here.

65
00:02:20,400 --> 00:02:21,520
It's all serious stuff.

66
00:02:21,520 --> 00:02:22,770
It's all network performance.

67
00:02:22,770 --> 00:02:26,030

68
00:02:26,030 --> 00:02:26,900
JACKSON GABBARD: The
crowd looks lovely.

69
00:02:26,900 --> 00:02:29,120
You look great today.

70
00:02:29,120 --> 00:02:31,240
ILYA GRIGORIK: But seriously,
I'm not

71
00:02:31,240 --> 00:02:33,270
going to take 10 minutes.

72
00:02:33,270 --> 00:02:37,870
It's far more interesting to
talk about on the panel to

73
00:02:37,870 --> 00:02:39,460
answer-- there's a lot
of questions in the

74
00:02:39,460 --> 00:02:41,040
Moderator as well.

75
00:02:41,040 --> 00:02:43,550
So I'm just going to kick
off with a couple of--

76
00:02:43,550 --> 00:02:45,700
let me see, wrong screen.

77
00:02:45,700 --> 00:02:48,410

78
00:02:48,410 --> 00:02:49,660
That is weird.

79
00:02:49,660 --> 00:02:52,630

80
00:02:52,630 --> 00:02:53,880
Can you guys see that?

81
00:02:53,880 --> 00:03:01,090

82
00:03:01,090 --> 00:03:01,430
All right.

83
00:03:01,430 --> 00:03:04,080
There we go.

84
00:03:04,080 --> 00:03:07,480
So one thing that I've
discovered as I've been

85
00:03:07,480 --> 00:03:09,930
working on network performance
stuff is, I've been becoming

86
00:03:09,930 --> 00:03:13,260
grumpier and grumpier, in the
sense that people keep asking,

87
00:03:13,260 --> 00:03:15,980
hey, we should put more
stuff on pages.

88
00:03:15,980 --> 00:03:17,280
I want to put more images,
more video.

89
00:03:17,280 --> 00:03:19,800
I'm like, no, no, don't do
that, because that hurts

90
00:03:19,800 --> 00:03:20,650
performance.

91
00:03:20,650 --> 00:03:21,960
Everything you do hurts
performance.

92
00:03:21,960 --> 00:03:24,430
So the fewer things you put
on your page, the better.

93
00:03:24,430 --> 00:03:27,240
So because of that, I've started
actually migrating my

94
00:03:27,240 --> 00:03:30,290
HTML presentations to Bash just
to illustrate the point

95
00:03:30,290 --> 00:03:32,540
that go as low level
as you can.

96
00:03:32,540 --> 00:03:36,260
So this is actually running in
Chrome VSSH but in Bash.

97
00:03:36,260 --> 00:03:37,850
So it's awesome.

98
00:03:37,850 --> 00:03:39,840
Anyway, moving on.

99
00:03:39,840 --> 00:03:42,970
So a lot of the network stuff
is not the sexy stuff.

100
00:03:42,970 --> 00:03:44,650
We can talk about all the
awesome things that we're

101
00:03:44,650 --> 00:03:47,120
building, all the new
CSS animations.

102
00:03:47,120 --> 00:03:48,832
And then you start talking about
performance and it's

103
00:03:48,832 --> 00:03:50,940
like, yeah, that TCP thing.

104
00:03:50,940 --> 00:03:52,670
Ugh.

105
00:03:52,670 --> 00:03:56,150
So a few things, I have like
four high-level things that I

106
00:03:56,150 --> 00:03:59,480
want to seed the discussion
a little bit.

107
00:03:59,480 --> 00:04:00,140
Cache primitives.

108
00:04:00,140 --> 00:04:02,480
So we heard a lot about
caching and offline.

109
00:04:02,480 --> 00:04:05,660
And I'm really excited for the
stuff that's happening in the

110
00:04:05,660 --> 00:04:06,440
offline panel.

111
00:04:06,440 --> 00:04:09,720
I think that's a big,
big improvement.

112
00:04:09,720 --> 00:04:11,840
It'll obviously take some
time to get there.

113
00:04:11,840 --> 00:04:13,770
The local storage stuff
is really interesting.

114
00:04:13,770 --> 00:04:16,899
I'll just add maybe one more
comment to the earlier

115
00:04:16,899 --> 00:04:18,060
discussion.

116
00:04:18,060 --> 00:04:19,339
I don't think it's
a solved problem.

117
00:04:19,339 --> 00:04:22,640
The fact that it's a sync or
async API I think, is maybe

118
00:04:22,640 --> 00:04:26,490
slightly the wrong question to
ask, because for example, if

119
00:04:26,490 --> 00:04:28,700
you look at local storage
performance on Windows, it's

120
00:04:28,700 --> 00:04:30,180
actually really good.

121
00:04:30,180 --> 00:04:31,270
Why is that?

122
00:04:31,270 --> 00:04:35,450
Because they have SuperFetch,
which is a platform feature

123
00:04:35,450 --> 00:04:38,480
within Windows which pre-loads
all the data

124
00:04:38,480 --> 00:04:39,610
independent of the app.

125
00:04:39,610 --> 00:04:42,140
So this is not an IE feature.

126
00:04:42,140 --> 00:04:44,860
IE doesn't have these latency
delays that Chrome does.

127
00:04:44,860 --> 00:04:45,860
In fact, Chrome is
like the worst

128
00:04:45,860 --> 00:04:47,580
performer in local storage.

129
00:04:47,580 --> 00:04:49,430
It's something that
we've got to fix.

130
00:04:49,430 --> 00:04:53,460
So I don't think it's as
simple as we maybe

131
00:04:53,460 --> 00:04:54,180
make it out to be.

132
00:04:54,180 --> 00:04:55,730
Just having an async
API doesn't

133
00:04:55,730 --> 00:04:56,780
necessarily solve the problems.

134
00:04:56,780 --> 00:04:58,890
I think there's an 80% solution
even for something

135
00:04:58,890 --> 00:05:00,940
like local storage.

136
00:05:00,940 --> 00:05:04,750
The fact that this new
controller script is actually

137
00:05:04,750 --> 00:05:09,570
interacting with the browser's
cache, I think is awesome.

138
00:05:09,570 --> 00:05:11,870
Unlike the previous versions,
which it's

139
00:05:11,870 --> 00:05:12,950
either all or nothing.

140
00:05:12,950 --> 00:05:14,790
You don't have a fallback.

141
00:05:14,790 --> 00:05:17,430
So I think this is
all great stuff.

142
00:05:17,430 --> 00:05:20,380
But moving on, something that
I've been spending a lot of

143
00:05:20,380 --> 00:05:23,050
time thinking about
and fighting with

144
00:05:23,050 --> 00:05:24,650
is user-agent sniffing.

145
00:05:24,650 --> 00:05:27,540
I think we can all agree that
this thing is just dead.

146
00:05:27,540 --> 00:05:28,595
We all have to use it.

147
00:05:28,595 --> 00:05:29,720
It's unfortunate.

148
00:05:29,720 --> 00:05:30,550
It sucks.

149
00:05:30,550 --> 00:05:31,900
You have to pay for
these databases.

150
00:05:31,900 --> 00:05:33,610
You have to get a new
serving path.

151
00:05:33,610 --> 00:05:36,560
It is a disaster, no matter
which way you look at it.

152
00:05:36,560 --> 00:05:38,290
And not only that, but it
doesn't actually give you the

153
00:05:38,290 --> 00:05:41,910
answers that you're looking
for, which is the best

154
00:05:41,910 --> 00:05:43,330
combination of all
those things.

155
00:05:43,330 --> 00:05:45,060
So I do have a proposal
out there.

156
00:05:45,060 --> 00:05:47,870
We actually have a prototype
that's in progress in Chrome

157
00:05:47,870 --> 00:05:50,700
for this thing called Client
Hints, which is the world's

158
00:05:50,700 --> 00:05:53,320
dumbest idea, which is if you're
looking for a DPI, why

159
00:05:53,320 --> 00:05:57,710
don't we just send it to you
in an HTTP request header?

160
00:05:57,710 --> 00:05:59,260
That's really all it
boils down to.

161
00:05:59,260 --> 00:06:01,030
So if you're curious,
take a look.

162
00:06:01,030 --> 00:06:02,180
I'd love to get your feedback.

163
00:06:02,180 --> 00:06:05,480
But I think this would actually
help quite a bit with

164
00:06:05,480 --> 00:06:10,480
a lot of problems in the
responsive design world.

165
00:06:10,480 --> 00:06:14,190
And speaking of responsive
design, if you talk about

166
00:06:14,190 --> 00:06:17,480
network performance and web
pages, 60% of all the bytes

167
00:06:17,480 --> 00:06:20,440
that we ship today are images,
which is huge.

168
00:06:20,440 --> 00:06:24,460
So if nothing else, if there's
one area we can really focus

169
00:06:24,460 --> 00:06:28,020
on and fix and improve, it seems
like images would be it.

170
00:06:28,020 --> 00:06:30,790
And unfortunately, if you look
at what's happened in the

171
00:06:30,790 --> 00:06:35,190
image space, nothing
has happened.

172
00:06:35,190 --> 00:06:38,230
We have PNG, JPEG, and
GIF, and that's it.

173
00:06:38,230 --> 00:06:42,900
And it's not obvious why we
don't have another 10 formats.

174
00:06:42,900 --> 00:06:46,210
I don't know if 10 is needed,
but at least another couple.

175
00:06:46,210 --> 00:06:49,790
We have WebP that we have
proposed at Google.

176
00:06:49,790 --> 00:06:51,550
And WebP gives you a lot
of improvements.

177
00:06:51,550 --> 00:06:54,010
But I don't think WebP
is the end all.

178
00:06:54,010 --> 00:06:55,950
I'd hope to see more
image formats.

179
00:06:55,950 --> 00:06:58,730
And it's not obvious why we're
just stuck with these three.

180
00:06:58,730 --> 00:07:02,610
Then you look at products like
Opera Turbo, Silk, PageSpeed.

181
00:07:02,610 --> 00:07:05,360
Opera Turbo is an incredibly
popular browser in a lot of

182
00:07:05,360 --> 00:07:09,370
countries where bandwidth
is at a premium.

183
00:07:09,370 --> 00:07:12,850
Like 90% of all of the
improvements that all these

184
00:07:12,850 --> 00:07:14,585
proxies get is they
just re-encode all

185
00:07:14,585 --> 00:07:16,280
the images with WebP.

186
00:07:16,280 --> 00:07:18,550
That's literally all they do,
just blindly transcode

187
00:07:18,550 --> 00:07:19,810
everything to WebP.

188
00:07:19,810 --> 00:07:23,110
So that alone is like, why don't
we do that for the rest

189
00:07:23,110 --> 00:07:24,370
of all the pages?

190
00:07:24,370 --> 00:07:29,620
So we could decrease the size
of our pages by 50% by just

191
00:07:29,620 --> 00:07:33,830
re-encoding all the images,
which seems like

192
00:07:33,830 --> 00:07:34,950
a pretty nice thing.

193
00:07:34,950 --> 00:07:36,780
And speaking of re-encoding
images, one

194
00:07:36,780 --> 00:07:37,740
thing that I've realized--

195
00:07:37,740 --> 00:07:43,130
I've done a lot of studies now
looking at WordPress sites and

196
00:07:43,130 --> 00:07:47,230
a whole number of
other content--

197
00:07:47,230 --> 00:07:51,420
it turns out we, as humans, suck
at picking image formats.

198
00:07:51,420 --> 00:07:52,920
We are either lazy.

199
00:07:52,920 --> 00:07:55,360
We are either too busy.

200
00:07:55,360 --> 00:07:56,560
We pick the wrong formats.

201
00:07:56,560 --> 00:08:01,370
So we save things as PNGs,
which should be JPEGs.

202
00:08:01,370 --> 00:08:04,930
We save things as JPEGs,
which should be PNGs.

203
00:08:04,930 --> 00:08:06,360
It's just a disaster.

204
00:08:06,360 --> 00:08:09,160
And there's a lot of image
optimization solutions out

205
00:08:09,160 --> 00:08:12,070
there that exist that you
actually can pay for, which

206
00:08:12,070 --> 00:08:13,580
will say, hey, we'll optimize
your images.

207
00:08:13,580 --> 00:08:15,370
If you give us a PNG,
we'll strip the

208
00:08:15,370 --> 00:08:16,310
metadata and all the rest.

209
00:08:16,310 --> 00:08:17,140
It's like, cool.

210
00:08:17,140 --> 00:08:20,360
You're going to strip
100 bytes out of my

211
00:08:20,360 --> 00:08:22,100
150 kilobyte image.

212
00:08:22,100 --> 00:08:24,090
I'm like, that's still a win.

213
00:08:24,090 --> 00:08:26,330
But the truth is, you should
have been saving that as a

214
00:08:26,330 --> 00:08:29,050
JPEG, which would have
been a 15k file.

215
00:08:29,050 --> 00:08:31,580
And we're not doing
that transcoding,

216
00:08:31,580 --> 00:08:35,049
because it's much harder.

217
00:08:35,049 --> 00:08:36,860
I think that's something
that we need to fix.

218
00:08:36,860 --> 00:08:39,710
And this problem only gets much,
much harder when you

219
00:08:39,710 --> 00:08:43,980
look at the responsive area,
where now you have different

220
00:08:43,980 --> 00:08:44,510
break points.

221
00:08:44,510 --> 00:08:47,130
You have different
device widths.

222
00:08:47,130 --> 00:08:51,130
I recently ran a study looking
at how frequently do we

223
00:08:51,130 --> 00:08:54,250
re-scale images on a client or
downscale images on a client.

224
00:08:54,250 --> 00:08:57,660
And it turns out that about 20%
of all the large images

225
00:08:57,660 --> 00:08:58,930
are getting downscaled
in the client.

226
00:08:58,930 --> 00:09:01,480
So we're shipping extra bytes,
which was getting compressed.

227
00:09:01,480 --> 00:09:04,600
This is just wasted bandwidth.

228
00:09:04,600 --> 00:09:06,940
I think we need server help.

229
00:09:06,940 --> 00:09:08,410
We need a client-side
solution, which

230
00:09:08,410 --> 00:09:10,590
we don't have today.

231
00:09:10,590 --> 00:09:15,530
There's a lot of room for better
server integration to

232
00:09:15,530 --> 00:09:18,520
help us with this problem,
because it only gets worse.

233
00:09:18,520 --> 00:09:20,100
You have five different
viewports.

234
00:09:20,100 --> 00:09:23,940
You have high DPI, non-high DPI,
now you have 10 variants.

235
00:09:23,940 --> 00:09:27,730
Add some art direction use
cases, and now you're like,

236
00:09:27,730 --> 00:09:30,300
you started with an image tag,
which was beautiful, one line.

237
00:09:30,300 --> 00:09:32,660
Then you look at your picture
tag, and it's like 40 lines.

238
00:09:32,660 --> 00:09:34,610
And you're like, I am
not writing that.

239
00:09:34,610 --> 00:09:36,750
I'm sorry.

240
00:09:36,750 --> 00:09:38,540
At least that's for me.

241
00:09:38,540 --> 00:09:40,090
Another crowd favorite--

242
00:09:40,090 --> 00:09:41,050
net info API.

243
00:09:41,050 --> 00:09:45,330
So let me just talk about
this one for a second.

244
00:09:45,330 --> 00:09:48,710
So bandwidth estimation--

245
00:09:48,710 --> 00:09:50,530
should we have bandwidth
estimation in a browser?

246
00:09:50,530 --> 00:09:52,760
And the answer is no--

247
00:09:52,760 --> 00:09:55,980

248
00:09:55,980 --> 00:09:56,410
ever.

249
00:09:56,410 --> 00:09:57,000
Yes.

250
00:09:57,000 --> 00:09:57,380
Right.

251
00:09:57,380 --> 00:09:59,090
So why is that?

252
00:09:59,090 --> 00:10:00,660
It's worth actually
thinking about it.

253
00:10:00,660 --> 00:10:02,630
And usually there's
a good counter

254
00:10:02,630 --> 00:10:03,490
argument to that as well.

255
00:10:03,490 --> 00:10:05,410
We have that.

256
00:10:05,410 --> 00:10:07,250
We have that for video.

257
00:10:07,250 --> 00:10:13,710
And the insight there is when we
do do server adaptation for

258
00:10:13,710 --> 00:10:17,650
video, but the way that works
is we stream you a five

259
00:10:17,650 --> 00:10:19,230
[? to ?] second chunk
of video.

260
00:10:19,230 --> 00:10:20,910
Then we see how you
downloaded it.

261
00:10:20,910 --> 00:10:22,900
And then we adjust.

262
00:10:22,900 --> 00:10:25,690
So it's adaptive streaming,
not predictive streaming.

263
00:10:25,690 --> 00:10:28,750
If you look at the actual
bandwidth throughput,

264
00:10:28,750 --> 00:10:31,850
especially on mobile, your
mobile carrier can adjust your

265
00:10:31,850 --> 00:10:35,150
bandwidth on one millisecond
granularity.

266
00:10:35,150 --> 00:10:40,630
Me moving a phone from here on
my desk to here can double or

267
00:10:40,630 --> 00:10:43,020
take my bandwidth by half.

268
00:10:43,020 --> 00:10:45,980
There's such high amounts of
variability that we can

269
00:10:45,980 --> 00:10:49,180
predict bandwidth, or we have
stable bandwidth on the order

270
00:10:49,180 --> 00:10:50,210
of milliseconds--

271
00:10:50,210 --> 00:10:52,880
maybe at most, second.

272
00:10:52,880 --> 00:10:55,420
It's completely unpredictable,
anything beyond that.

273
00:10:55,420 --> 00:11:00,260
So you sending a request for a
GIF file and then fetching

274
00:11:00,260 --> 00:11:02,800
that and saying, ooh, one
megabyte per second.

275
00:11:02,800 --> 00:11:05,190
And then making a decision
is completely useless.

276
00:11:05,190 --> 00:11:08,490
So maybe if we switch all of our
internet back to circuit

277
00:11:08,490 --> 00:11:11,120
switch networks, then we can
have this conversation.

278
00:11:11,120 --> 00:11:15,320
But I don't think that's
going to happen.

279
00:11:15,320 --> 00:11:17,350
And then the last one, which I
think is something that we

280
00:11:17,350 --> 00:11:20,930
haven't actually talked about,
is radio and mobile.

281
00:11:20,930 --> 00:11:24,140
So mobile is obviously a big,
big topic for networking.

282
00:11:24,140 --> 00:11:28,170
And battery life is something
that I don't think we, as web

283
00:11:28,170 --> 00:11:31,170
developers, have actually
thought about at all.

284
00:11:31,170 --> 00:11:33,570
Battery life is actually, turns
out, very important for

285
00:11:33,570 --> 00:11:35,650
native apps, because people
rank these apps.

286
00:11:35,650 --> 00:11:37,340
You run this thing, and your
battery's dead, and you're

287
00:11:37,340 --> 00:11:38,790
like, this app sucks.

288
00:11:38,790 --> 00:11:40,860
For web pages, we haven't
thought about it.

289
00:11:40,860 --> 00:11:44,030
But in reality, they
are just as costly.

290
00:11:44,030 --> 00:11:47,540
I can point you to pages where
if you sit there reading your

291
00:11:47,540 --> 00:11:49,450
news, for example, on some
sites which are using

292
00:11:49,450 --> 00:11:55,670
real-time analytics, every
five seconds they send a

293
00:11:55,670 --> 00:11:58,400
real-time beacon for a real-time
analytics app.

294
00:11:58,400 --> 00:12:00,170
You're just draining
your battery.

295
00:12:00,170 --> 00:12:01,960
It's killing your battery.

296
00:12:01,960 --> 00:12:05,980
The radio is the second most
expensive thing you have in

297
00:12:05,980 --> 00:12:07,290
your phone in terms of power.

298
00:12:07,290 --> 00:12:08,330
The first one is the screen.

299
00:12:08,330 --> 00:12:10,760
The second one is the radio.

300
00:12:10,760 --> 00:12:12,610
And they're actually
about the same--

301
00:12:12,610 --> 00:12:14,420
the same order of magnitude.

302
00:12:14,420 --> 00:12:17,530
So turning off your radio
is incredibly important.

303
00:12:17,530 --> 00:12:20,650
There is big, big anti-patterns,
stuff like

304
00:12:20,650 --> 00:12:22,500
inefficiency of periodic
transfers.

305
00:12:22,500 --> 00:12:25,130
And I think this one's really
illustrative, because even if

306
00:12:25,130 --> 00:12:30,110
you look at the Android docs,
two years ago when we started

307
00:12:30,110 --> 00:12:33,620
building these native apps, we
said, hey, fetch just the

308
00:12:33,620 --> 00:12:35,360
stuff that you need.

309
00:12:35,360 --> 00:12:38,950
And then as the user needs it,
fetch the rest of the content,

310
00:12:38,950 --> 00:12:41,310
thinking that you don't
have enough bandwidth.

311
00:12:41,310 --> 00:12:43,800
And you should get the best
experience up and then

312
00:12:43,800 --> 00:12:45,330
progressively fill in.

313
00:12:45,330 --> 00:12:46,830
If you look at the docs
now, they tell you

314
00:12:46,830 --> 00:12:47,960
completely the opposite.

315
00:12:47,960 --> 00:12:49,740
They tell you download
everything.

316
00:12:49,740 --> 00:12:51,510
Burst everything you can
as fast as you can.

317
00:12:51,510 --> 00:12:52,480
And then turn off the radio.

318
00:12:52,480 --> 00:12:56,170
And please, please, please don't
turn it on ever again.

319
00:12:56,170 --> 00:12:58,780
So I don't think that message
has reached the

320
00:12:58,780 --> 00:12:59,870
web developer community.

321
00:12:59,870 --> 00:13:02,030
And it's actually pretty
interesting to think, I don't

322
00:13:02,030 --> 00:13:04,630
think we have an answer for
how exactly do we service

323
00:13:04,630 --> 00:13:06,500
battery and network
performance?

324
00:13:06,500 --> 00:13:07,790
What's that trade off?

325
00:13:07,790 --> 00:13:11,430
We don't have an intuition in
the browser for what is the

326
00:13:11,430 --> 00:13:12,370
cost of a page.

327
00:13:12,370 --> 00:13:14,960
I'd love to see a metric that's
says, you've drained x

328
00:13:14,960 --> 00:13:16,840
amount of your battery by
visiting this page.

329
00:13:16,840 --> 00:13:18,520
That would be kind of cool.

330
00:13:18,520 --> 00:13:21,130
And then the last one is
4G won't save you.

331
00:13:21,130 --> 00:13:24,270
I see a lot of conversations
about this, which is like, I

332
00:13:24,270 --> 00:13:27,470
heard LTE is going to
fix all things.

333
00:13:27,470 --> 00:13:30,440
I'm just going to
wait for that.

334
00:13:30,440 --> 00:13:31,830
Seems reasonable.

335
00:13:31,830 --> 00:13:34,610
And it seems reasonable
when you're here.

336
00:13:34,610 --> 00:13:37,210
You're in downtown London, then
you probably have really

337
00:13:37,210 --> 00:13:38,100
good coverage.

338
00:13:38,100 --> 00:13:39,830
The problem is when you actually
look at what the

339
00:13:39,830 --> 00:13:42,770
carriers are saying, they're
saying, look, we've invested a

340
00:13:42,770 --> 00:13:44,920
lot of money into 3G
and 2G networks.

341
00:13:44,920 --> 00:13:47,090
We have a lot of users on older
hardware that can't

342
00:13:47,090 --> 00:13:49,290
migrate to 4G overnight.

343
00:13:49,290 --> 00:13:52,820
3G and 2G networks will continue
to exist for at least

344
00:13:52,820 --> 00:13:55,400
another decade, at least
another decade.

345
00:13:55,400 --> 00:13:58,850
And you'll have to build apps
that will transition between

346
00:13:58,850 --> 00:14:01,560
4G, 3G, and 2G.

347
00:14:01,560 --> 00:14:04,180
And that's just the
reality of it.

348
00:14:04,180 --> 00:14:08,320
You can't design your apps
just targeting 4G.

349
00:14:08,320 --> 00:14:12,140
So those are the high-level
points.

350
00:14:12,140 --> 00:14:12,760
That's all I got.

351
00:14:12,760 --> 00:14:14,428
I think we'll go
into the panel.

352
00:14:14,428 --> 00:14:20,902

353
00:14:20,902 --> 00:14:22,894
STEVE THAIR: I think
we're done here.

354
00:14:22,894 --> 00:14:23,890
That's pretty good.

355
00:14:23,890 --> 00:14:27,376
[APPLAUSE]

356
00:14:27,376 --> 00:14:34,924

357
00:14:34,924 --> 00:14:36,680
STEVE THAIR: I'm going to try
to come out from behind the

358
00:14:36,680 --> 00:14:38,767
panel a bit so I can actually
see them instead

359
00:14:38,767 --> 00:14:39,780
of talking to them.

360
00:14:39,780 --> 00:14:40,960
Make sure you talk to them.

361
00:14:40,960 --> 00:14:42,030
Don't talk to me.

362
00:14:42,030 --> 00:14:43,690
Can everybody hear
me all right?

363
00:14:43,690 --> 00:14:44,600
Yeah?

364
00:14:44,600 --> 00:14:45,580
OK.

365
00:14:45,580 --> 00:14:47,570
So the first question we
actually have-- the highest

366
00:14:47,570 --> 00:14:49,920
ranked question on the list--
is, should we have continuous

367
00:14:49,920 --> 00:14:52,910
live feedback access to the
user's network speed, similar

368
00:14:52,910 --> 00:14:53,430
to [? navigate ?]

369
00:14:53,430 --> 00:14:53,820
[? or battery? ?]

370
00:14:53,820 --> 00:14:55,070
And the answer is?

371
00:14:55,070 --> 00:14:57,380
ALL: No.

372
00:14:57,380 --> 00:14:58,810
STEVE THAIR: You'd think
we rehearsed that.

373
00:14:58,810 --> 00:15:00,860
Awesome.

374
00:15:00,860 --> 00:15:02,860
There are actually a
few questions that

375
00:15:02,860 --> 00:15:05,410
were about that topic.

376
00:15:05,410 --> 00:15:07,185
Some people obviously
hadn't heard of net

377
00:15:07,185 --> 00:15:09,950
API, some people had.

378
00:15:09,950 --> 00:15:12,970
I don't even think it was worth
really asking any of

379
00:15:12,970 --> 00:15:14,325
those other questions.

380
00:15:14,325 --> 00:15:14,930
Just say no?

381
00:15:14,930 --> 00:15:17,125
ILYA GRIGORIK: Can we take
a step back, though?

382
00:15:17,125 --> 00:15:19,170
STEVE THAIR: OK.

383
00:15:19,170 --> 00:15:20,620
ILYA GRIGORIK: We can't have
bandwidth estimation.

384
00:15:20,620 --> 00:15:22,850
I can't tell you you have two
megabytes per second, three

385
00:15:22,850 --> 00:15:23,840
megabytes per second.

386
00:15:23,840 --> 00:15:26,980
It is useful to know which type
of network you are on,

387
00:15:26,980 --> 00:15:29,090
which is the level of
granularity that you should be

388
00:15:29,090 --> 00:15:30,360
working at.

389
00:15:30,360 --> 00:15:32,530
Knowing that you're on Wi-Fi
tells you certain things

390
00:15:32,530 --> 00:15:34,955
about, for example, the latency
characteristics of

391
00:15:34,955 --> 00:15:36,110
your connection.

392
00:15:36,110 --> 00:15:38,650
You're now going to have a weird
transition state where

393
00:15:38,650 --> 00:15:40,600
you have to wait for two seconds
before you actually

394
00:15:40,600 --> 00:15:42,330
get any packets on the wire.

395
00:15:42,330 --> 00:15:45,180
If you're on 4G, you
have pretty tight

396
00:15:45,180 --> 00:15:46,970
bounds on latency again.

397
00:15:46,970 --> 00:15:49,610
Knowing on 3G-- so basically
it gives you goal posts.

398
00:15:49,610 --> 00:15:52,160
Like, here's what the minimum,
here's what the maximum is.

399
00:15:52,160 --> 00:15:54,410
And that's about the level
that we need to operate.

400
00:15:54,410 --> 00:15:56,740
So the net info spec
actually had this--

401
00:15:56,740 --> 00:15:58,090
the earlier versions.

402
00:15:58,090 --> 00:16:02,090
It specifically said,
Wi-Fi 2G, 3G, 4G.

403
00:16:02,090 --> 00:16:06,190
I think we need to revert to
spec, like, 15 iterations, go

404
00:16:06,190 --> 00:16:08,324
back and implement that.

405
00:16:08,324 --> 00:16:11,357
JOHN CLEVELEY: Also, when I'm
at home in Suffolk in the

406
00:16:11,357 --> 00:16:13,800
middle of the country, my
Wi-Fi I get about a meg.

407
00:16:13,800 --> 00:16:16,312
I come into London with my
phone and I get about the

408
00:16:16,312 --> 00:16:17,880
same, even better sometimes.

409
00:16:17,880 --> 00:16:20,530
So it's like you've got to use
the information quite wisely

410
00:16:20,530 --> 00:16:22,300
in terms of not making
too many assumptions.

411
00:16:22,300 --> 00:16:25,610
But the latency thing is
definitely going to help make

412
00:16:25,610 --> 00:16:29,740
decisions between 3G
wireless and Wi-Fi.

413
00:16:29,740 --> 00:16:32,860
JACKSON GABBARD: It's always the
one-legged dog [INAUDIBLE]

414
00:16:32,860 --> 00:16:35,500
from the 4G, you get
intermittent one-bar

415
00:16:35,500 --> 00:16:35,880
connection.

416
00:16:35,880 --> 00:16:37,460
That's not as good as
the 3G connection.

417
00:16:37,460 --> 00:16:40,390
But yeah, even then it's
still fraught.

418
00:16:40,390 --> 00:16:41,783
[INAUDIBLE], it's not granular,

419
00:16:41,783 --> 00:16:43,755
immediately useful data.

420
00:16:43,755 --> 00:16:46,440
ANDY DAVIES: The original spec
got dumped for privacy

421
00:16:46,440 --> 00:16:47,360
reasons, didn't it?

422
00:16:47,360 --> 00:16:48,700
ILYA GRIGORIK: I think
the privacy reason

423
00:16:48,700 --> 00:16:50,190
is completely bogus.

424
00:16:50,190 --> 00:16:51,825
So let's just put
that to rest.

425
00:16:51,825 --> 00:16:54,290
AUDIENCE: One other factor,
could it tell you that the

426
00:16:54,290 --> 00:16:56,266
[INAUDIBLE] is roaming,
moving?

427
00:16:56,266 --> 00:16:59,100
AUDIENCE: Use the mic, please.

428
00:16:59,100 --> 00:17:01,790
STEVE THAIR: So the question
from Daryl was, could the spec

429
00:17:01,790 --> 00:17:04,800
just at least tell you whether
the person is actually moving,

430
00:17:04,800 --> 00:17:07,069
like if you're in a moving car
and a moving train, which has

431
00:17:07,069 --> 00:17:11,339
an impact, certainly
on 3G, anyway.

432
00:17:11,339 --> 00:17:13,552
ILYA GRIGORIK: I guess you could
enable GPS and look at

433
00:17:13,552 --> 00:17:15,460
the coordinates if
they're changing.

434
00:17:15,460 --> 00:17:17,780
But hold on, but I think there's
two different things--

435
00:17:17,780 --> 00:17:21,090
roaming and moving are
two different things.

436
00:17:21,090 --> 00:17:23,730
AUDIENCE: [INAUDIBLE]

437
00:17:23,730 --> 00:17:24,730
STEVE THAIR: Yes.

438
00:17:24,730 --> 00:17:28,310
He meant motion, as opposed
to paying 25 US dollars a

439
00:17:28,310 --> 00:17:31,280
megabyte through Verizon in
Gibraltar type roaming.

440
00:17:31,280 --> 00:17:32,990
ILYA GRIGORIK: Yeah.

441
00:17:32,990 --> 00:17:35,680
STEVE THAIR: That would probably
also be useful.

442
00:17:35,680 --> 00:17:36,500
ILYA GRIGORIK: So I don't
think that's a

443
00:17:36,500 --> 00:17:38,590
concern of net info.

444
00:17:38,590 --> 00:17:43,100
So if you are on the move, for
example, 4G performance is

445
00:17:43,100 --> 00:17:47,620
much, much better than 3G
performance if you are moving.

446
00:17:47,620 --> 00:17:52,150
I don't think that's something
that net info would service.

447
00:17:52,150 --> 00:17:56,950
STEVE THAIR: So one question
from me is that if net info is

448
00:17:56,950 --> 00:17:59,340
giving you an API that you
have to query in your

449
00:17:59,340 --> 00:18:02,230
JavaScript, and then you send
that message back, why is the

450
00:18:02,230 --> 00:18:05,660
browser not sending that message
to the server side in

451
00:18:05,660 --> 00:18:07,470
a header or an unsolicited
cookie?

452
00:18:07,470 --> 00:18:10,480
So from the point of view before
I've even served the

453
00:18:10,480 --> 00:18:15,310
request, I've got an idea of
what the connection type is.

454
00:18:15,310 --> 00:18:20,380
ANDY DAVIES: Well, that comes as
part of Ilya's Client Hints

455
00:18:20,380 --> 00:18:23,790
spec, which is also growing into
the same privacy concerns

456
00:18:23,790 --> 00:18:25,710
from some people.

457
00:18:25,710 --> 00:18:28,710
So the idea that whenever
somebody makes a request of

458
00:18:28,710 --> 00:18:31,170
your server, you expose their
screen size or how they

459
00:18:31,170 --> 00:18:34,450
connected, starts to give
you ways of actually

460
00:18:34,450 --> 00:18:35,440
fingerprinting browsers.

461
00:18:35,440 --> 00:18:36,940
And we can do it pretty
well anyway.

462
00:18:36,940 --> 00:18:38,550
So there are some privacy
concerns about it.

463
00:18:38,550 --> 00:18:41,370
ILYA GRIGORIK: So, once
again, privacy stuff--

464
00:18:41,370 --> 00:18:42,160
completely bogus.

465
00:18:42,160 --> 00:18:43,455
Because you just
look at your--

466
00:18:43,455 --> 00:18:44,662
no, no

467
00:18:44,662 --> 00:18:47,490
STEVE THAIR: Who do you
work for again?

468
00:18:47,490 --> 00:18:50,270
ILYA GRIGORIK: If you have the
IP address of your visitor,

469
00:18:50,270 --> 00:18:54,700
you can do reverse map to say,
hey, you're on T-Mobile.

470
00:18:54,700 --> 00:18:57,830
And you're coming from the
subnet, so you're probably on

471
00:18:57,830 --> 00:18:58,290
3G network.

472
00:18:58,290 --> 00:19:01,050
That is what the CDNs
are doing today.

473
00:19:01,050 --> 00:19:02,780
This is all the information
that we're exposing.

474
00:19:02,780 --> 00:19:05,330
So I think this actually
doesn't hold

475
00:19:05,330 --> 00:19:09,252
much water, this argument.

476
00:19:09,252 --> 00:19:11,712
AUDIENCE: I actually don't think
the privacy issue has

477
00:19:11,712 --> 00:19:14,740
been the main killing issue
of these features.

478
00:19:14,740 --> 00:19:17,730
That with the sending in
additional headers, the

479
00:19:17,730 --> 00:19:20,986
problem is, there are billions
of requests happening every

480
00:19:20,986 --> 00:19:22,115
day right now, right?

481
00:19:22,115 --> 00:19:26,440
If you add even, like, 20
bytes of data into each

482
00:19:26,440 --> 00:19:28,465
request, we're talking about
gigabytes and gigabytes of

483
00:19:28,465 --> 00:19:35,300
data being sent for absolutely
no reason in 99.999% of cases.

484
00:19:35,300 --> 00:19:37,390
So that's the main problem
about [INAUDIBLE].

485
00:19:37,390 --> 00:19:41,110
AUDIENCE: Mic, please.

486
00:19:41,110 --> 00:19:42,595
JACKSON GABBARD: I
agree with that.

487
00:19:42,595 --> 00:19:45,690
I think the crux of the issue is
less the network connection

488
00:19:45,690 --> 00:19:47,326
of [INAUDIBLE]

489
00:19:47,326 --> 00:19:48,720
the information that you can
glean about the network or the

490
00:19:48,720 --> 00:19:50,007
device that you're sending to.

491
00:19:50,007 --> 00:19:52,830
That's the thing that-- when
you're trying to get the

492
00:19:52,830 --> 00:19:54,930
biggest ones you can--
network request--

493
00:19:54,930 --> 00:19:57,434
knowing what the device
can handle ahead of

494
00:19:57,434 --> 00:19:59,200
time is pretty key.

495
00:19:59,200 --> 00:20:01,550
And I think sending each
request is not

496
00:20:01,550 --> 00:20:02,280
necessarily the right way.

497
00:20:02,280 --> 00:20:04,767
But it goes back to what you
said before about user-agent

498
00:20:04,767 --> 00:20:07,260
sniffing, like knowing
concretely on the server side

499
00:20:07,260 --> 00:20:08,240
what to send.

500
00:20:08,240 --> 00:20:09,711
It's also a really, really
hard problem.

501
00:20:09,711 --> 00:20:12,772
But I feel like that's the
trick, like that's the magic

502
00:20:12,772 --> 00:20:15,840
bullet in a lot of cases to
get good [INAUDIBLE].

503
00:20:15,840 --> 00:20:17,600
These are the things I know
I don't need to send down.

504
00:20:17,600 --> 00:20:20,530
And in the immediate [? query ?]
world, you send it

505
00:20:20,530 --> 00:20:23,308
off with the layout, send it
off with the JavaScript.

506
00:20:23,308 --> 00:20:25,600
In reality, you don't
need to do that.

507
00:20:25,600 --> 00:20:27,828
Like a [INAUDIBLE] device, you
just don't need to send stuff.

508
00:20:27,828 --> 00:20:28,772
And in some cases, you
don't even have

509
00:20:28,772 --> 00:20:29,598
JavaScript on the devices.

510
00:20:29,598 --> 00:20:32,076
You definitely don't need
JavaScript resources.

511
00:20:32,076 --> 00:20:35,490
But there's no sure-fire way.

512
00:20:35,490 --> 00:20:36,830
I'm curious, though about
user-agent sniffing.

513
00:20:36,830 --> 00:20:37,740
Because I know what we do.

514
00:20:37,740 --> 00:20:40,320
I'm curious what other
folks do for that.

515
00:20:40,320 --> 00:20:41,718
ILYA GRIGORIK: Everybody
does it.

516
00:20:41,718 --> 00:20:43,960
You have to.

517
00:20:43,960 --> 00:20:47,164
STEVE THAIR: But you don't
like to talk about it.

518
00:20:47,164 --> 00:20:49,160
AUDIENCE: I have one.

519
00:20:49,160 --> 00:20:49,623
About--

520
00:20:49,623 --> 00:20:51,224
AUDIENCE: Could you introduce
yourself quickly?

521
00:20:51,224 --> 00:20:52,138
[INAUDIBLE].

522
00:20:52,138 --> 00:20:54,880
AUDIENCE: Yes, thanks.

523
00:20:54,880 --> 00:20:57,900
You introduced me,
but thank you.

524
00:20:57,900 --> 00:21:00,540
Yes, I had a comment about the
spec and about the previous

525
00:21:00,540 --> 00:21:01,420
version of the spec.

526
00:21:01,420 --> 00:21:04,200
I think there was an argument
about privacy.

527
00:21:04,200 --> 00:21:08,700
But another thing was that many
people were claiming that

528
00:21:08,700 --> 00:21:12,430
the type of network is really
not enough information.

529
00:21:12,430 --> 00:21:16,070
It's not telling you enough
about the type of connection.

530
00:21:16,070 --> 00:21:18,280
You might be in a conference
like this on a Wi-Fi that is

531
00:21:18,280 --> 00:21:20,750
complete cluttered, and you
don't get any throughput.

532
00:21:20,750 --> 00:21:24,473
Or you might be actually on--

533
00:21:24,473 --> 00:21:26,058
STEVE THAIR: Or in a
[INAUDIBLE] station

534
00:21:26,058 --> 00:21:27,191
any day of the week.

535
00:21:27,191 --> 00:21:30,093
You'll have five bars of signal,
and you're on a 3G

536
00:21:30,093 --> 00:21:32,550
network, and it's completely
digested [INAUDIBLE].

537
00:21:32,550 --> 00:21:35,580
AUDIENCE: And the problem that
we have with the net info is

538
00:21:35,580 --> 00:21:39,830
that we're trying to find a way
to get this information

539
00:21:39,830 --> 00:21:42,240
without defeating the purpose,
like the [INAUDIBLE]

540
00:21:42,240 --> 00:21:45,200
problem, or measuring
bandwidth.

541
00:21:45,200 --> 00:21:47,490
It changes so quickly, and you
have to measure so often that

542
00:21:47,490 --> 00:21:49,640
you're going to be draining
the battery.

543
00:21:49,640 --> 00:21:51,690
You're going to be defeating
the purpose entirely.

544
00:21:51,690 --> 00:21:54,210
So that's a very hard
problem to solve.

545
00:21:54,210 --> 00:21:57,830
I would be happy to go back
to the connection type.

546
00:21:57,830 --> 00:22:01,350

547
00:22:01,350 --> 00:22:05,310
There are many different use
cases, and we have to see

548
00:22:05,310 --> 00:22:06,850
which ones are more important.

549
00:22:06,850 --> 00:22:08,620
ILYA GRIGORIK: [INAUDIBLE]
some sort of notion of a

550
00:22:08,620 --> 00:22:10,670
connection quality.

551
00:22:10,670 --> 00:22:12,780
I don't know how to
define it exactly.

552
00:22:12,780 --> 00:22:16,930
But it's kind of that losing
your Wi-Fi signal, you have

553
00:22:16,930 --> 00:22:18,850
just enough to be connected
but not enough

554
00:22:18,850 --> 00:22:20,330
to do anything else.

555
00:22:20,330 --> 00:22:21,230
That is a good example.

556
00:22:21,230 --> 00:22:22,750
Or you'd keep timing out.

557
00:22:22,750 --> 00:22:24,320
But that needs to be
serviced by the

558
00:22:24,320 --> 00:22:26,840
operating system somehow.

559
00:22:26,840 --> 00:22:28,894
I don't think the browser should
be the one trying to

560
00:22:28,894 --> 00:22:31,690
claim this one.

561
00:22:31,690 --> 00:22:32,990
AUDIENCE: I work on a browser.

562
00:22:32,990 --> 00:22:34,490
I work occasionally on
Chrome for Android.

563
00:22:34,490 --> 00:22:36,205
And we've been talking a lot
about this particular issue

564
00:22:36,205 --> 00:22:37,600
and this particular API.

565
00:22:37,600 --> 00:22:41,310
And the thing we've come to
understand, as it relates to

566
00:22:41,310 --> 00:22:42,660
the last session, is--

567
00:22:42,660 --> 00:22:44,460
AUDIENCE: Step up to
the mic, guys.

568
00:22:44,460 --> 00:22:48,520

569
00:22:48,520 --> 00:22:50,410
AUDIENCE: The thing we've come
to understand here is that the

570
00:22:50,410 --> 00:22:53,550
only meaningful data point is
the point at which you're

571
00:22:53,550 --> 00:22:55,370
actually requesting
a resource.

572
00:22:55,370 --> 00:22:57,210
That is the only time when you
can make any sort of a

573
00:22:57,210 --> 00:22:59,860
decision that's worth a damn
about whether or not you've

574
00:22:59,860 --> 00:23:02,340
got good quality, because
anything else is opening up a

575
00:23:02,340 --> 00:23:04,100
window, which your expectations

576
00:23:04,100 --> 00:23:05,250
might be violated in.

577
00:23:05,250 --> 00:23:08,020
So if I go and I ping
occasionally to a server, now

578
00:23:08,020 --> 00:23:10,970
I've got a window in which I'm
going to make assumptions

579
00:23:10,970 --> 00:23:12,560
about the quality of
the connection.

580
00:23:12,560 --> 00:23:15,670
And I'm likely to be
unfortunately shocked and

581
00:23:15,670 --> 00:23:17,820
surprised by the terrible
things that

582
00:23:17,820 --> 00:23:20,310
happened in the interim.

583
00:23:20,310 --> 00:23:22,220
Tying this to an actual request,
I think, is the only

584
00:23:22,220 --> 00:23:22,850
way to do it.

585
00:23:22,850 --> 00:23:25,081
And we don't have any other API
right now that does that.

586
00:23:25,081 --> 00:23:26,043
JACKSON GABBARD: I don't
even know if that's

587
00:23:26,043 --> 00:23:27,005
really the crux of it.

588
00:23:27,005 --> 00:23:29,169
I feel like the answer is
just to think about your

589
00:23:29,169 --> 00:23:31,260
application from the standpoint
of minimizing your

590
00:23:31,260 --> 00:23:35,038
risky network time and also
taking as many steps as you

591
00:23:35,038 --> 00:23:36,618
can to harden your application
against it--

592
00:23:36,618 --> 00:23:42,440
so not putting all your eggs in
one chunked HTTP request.

593
00:23:42,440 --> 00:23:47,646
Bring it up over multiple HTTP
connections when necessary.

594
00:23:47,646 --> 00:23:50,425
[INAUDIBLE] the steps to me,
arguing about whether or not

595
00:23:50,425 --> 00:23:53,190
we should or shouldn't detect
network connectivity state is

596
00:23:53,190 --> 00:23:57,040
like arguing about whether or
not the sky should be bright

597
00:23:57,040 --> 00:23:57,850
colored blue.

598
00:23:57,850 --> 00:23:58,850
We're not going to know.

599
00:23:58,850 --> 00:24:00,850
It's not going to be good
enough information.

600
00:24:00,850 --> 00:24:04,831
So what are the things that we
do that are reasonable to make

601
00:24:04,831 --> 00:24:07,520
the application decent
in spite of that?

602
00:24:07,520 --> 00:24:09,160
That's the part of this
discussion that I find

603
00:24:09,160 --> 00:24:10,140
interesting.

604
00:24:10,140 --> 00:24:10,690
STEVE THAIR: Can I actually--

605
00:24:10,690 --> 00:24:12,670
I was going to say, John, you've
got a practical example

606
00:24:12,670 --> 00:24:14,200
with the BBC apps.

607
00:24:14,200 --> 00:24:15,380
What are you guys doing?

608
00:24:15,380 --> 00:24:16,310
And do you care?

609
00:24:16,310 --> 00:24:18,370
And how are you dealing
with that issue?

610
00:24:18,370 --> 00:24:21,285
JOHN CLEVELEY: Yeah, we care a
lot about making sure that our

611
00:24:21,285 --> 00:24:24,847
site works really well on low
bandwidth, because we have a

612
00:24:24,847 --> 00:24:29,190
lot our users use the
World Service sites.

613
00:24:29,190 --> 00:24:32,860
So we basically are always
really anal about file size,

614
00:24:32,860 --> 00:24:35,640
looking at HTTP requests.

615
00:24:35,640 --> 00:24:39,810
And going back to working out
what connection you're on, I'm

616
00:24:39,810 --> 00:24:44,050
interested in what people
actually will use it for.

617
00:24:44,050 --> 00:24:48,090
You can imagine users going to
the site on broadband and then

618
00:24:48,090 --> 00:24:51,510
going on 4G on the phone and
getting completely different

619
00:24:51,510 --> 00:24:52,250
user experience.

620
00:24:52,250 --> 00:24:55,042
I'm interested in what
differences are we going to

621
00:24:55,042 --> 00:24:57,290
actually be able to do if you've
been detected at a

622
00:24:57,290 --> 00:24:58,720
higher bandwidth?

623
00:24:58,720 --> 00:25:01,220
And [INAUDIBLE] you got video
and images of the big things.

624
00:25:01,220 --> 00:25:04,850

625
00:25:04,850 --> 00:25:07,220
We've kind of been really
efficient with

626
00:25:07,220 --> 00:25:08,860
our file sizes, basically.

627
00:25:08,860 --> 00:25:13,440
And as you said before, images
is the big thing.

628
00:25:13,440 --> 00:25:16,395
So even though we haven't got
responsive images as any sort

629
00:25:16,395 --> 00:25:20,350
of standard, basically, we're
using JavaScript to work out

630
00:25:20,350 --> 00:25:21,950
what's the container size.

631
00:25:21,950 --> 00:25:24,090
And then we've got a number
of recipes on the server

632
00:25:24,090 --> 00:25:26,310
producing a number of different
image sizes.

633
00:25:26,310 --> 00:25:28,560
And we grab an appropriate
image for

634
00:25:28,560 --> 00:25:31,550
that particular device.

635
00:25:31,550 --> 00:25:33,910
ILYA GRIGORIK: Do you do
that in real time?

636
00:25:33,910 --> 00:25:37,520
How do you generate
the different

637
00:25:37,520 --> 00:25:39,120
versions of the images?

638
00:25:39,120 --> 00:25:40,470
JOHN CLEVELEY: Yeah, they're
generated the first time then

639
00:25:40,470 --> 00:25:43,100
cached on server, and
then onto CDN.

640
00:25:43,100 --> 00:25:45,555
JACKSON GABBARD: In the
generated case, I'm sure you

641
00:25:45,555 --> 00:25:46,500
got multiple resolutions.

642
00:25:46,500 --> 00:25:49,605
Do you require the people who
are publishing the stories to

643
00:25:49,605 --> 00:25:50,380
upload to separate
resolutions?

644
00:25:50,380 --> 00:25:50,720
Or do you--

645
00:25:50,720 --> 00:25:51,100
JOHN CLEVELEY: No.

646
00:25:51,100 --> 00:25:54,680
So they'll create one raw
image, because they're

647
00:25:54,680 --> 00:25:55,930
journalists.

648
00:25:55,930 --> 00:25:57,330
[INAUDIBLE] are actually
users with Facebook.

649
00:25:57,330 --> 00:25:58,790
So that might be a little
bit different.

650
00:25:58,790 --> 00:26:00,670
So we make sure the journalists
are uploading the

651
00:26:00,670 --> 00:26:02,670
biggest size we can.

652
00:26:02,670 --> 00:26:05,500
And then we've got 20, say,
different image sizes that we

653
00:26:05,500 --> 00:26:07,000
would select from.

654
00:26:07,000 --> 00:26:09,393
STEVE THAIR: So you transcode
all of that effectively server

655
00:26:09,393 --> 00:26:10,640
side for the--

656
00:26:10,640 --> 00:26:11,490
JOHN CLEVELEY: Exactly.

657
00:26:11,490 --> 00:26:12,230
We resize it.

658
00:26:12,230 --> 00:26:14,125
STEVE THAIR: Selected process
that's doing that re-scanning.

659
00:26:14,125 --> 00:26:14,580
JOHN CLEVELEY: Exactly.

660
00:26:14,580 --> 00:26:18,140
It's just a URL that we hit, and
it will do it on run time.

661
00:26:18,140 --> 00:26:19,620
ANDY DAVIES: Do you do any of
the art direction stuff?

662
00:26:19,620 --> 00:26:19,880
JOHN CLEVELEY: Sorry?

663
00:26:19,880 --> 00:26:22,340
ANDY DAVIES: Do you do any
of the art direction

664
00:26:22,340 --> 00:26:23,490
transformations on the image?

665
00:26:23,490 --> 00:26:24,840
Or do you just crop them?

666
00:26:24,840 --> 00:26:27,790
JOHN CLEVELEY: No, it's
literally just re-sized.

667
00:26:27,790 --> 00:26:28,610
STEVE THAIR: We got a
question over here.

668
00:26:28,610 --> 00:26:30,760
AUDIENCE: Somebody said that the
connection quality would

669
00:26:30,760 --> 00:26:32,110
have to come from
the [? RS, ?]

670
00:26:32,110 --> 00:26:33,860
but I think it can come
from the browser.

671
00:26:33,860 --> 00:26:37,660
One thing we do when we're
monitoring a website is keep a

672
00:26:37,660 --> 00:26:39,900
track on the time to first
byte for each host we're

673
00:26:39,900 --> 00:26:40,720
talking to.

674
00:26:40,720 --> 00:26:44,290
And if we see that go up, we
fire off a network test.

675
00:26:44,290 --> 00:26:47,300
So the browser itself could
track and say, hey, this is my

676
00:26:47,300 --> 00:26:50,550
average time to first byte
from Facebook.com.

677
00:26:50,550 --> 00:26:51,490
And you can respond to that.

678
00:26:51,490 --> 00:26:52,890
ILYA GRIGORIK: But your time
to first byte in mobile

679
00:26:52,890 --> 00:26:55,710
networks will vary dramatically,
because you have

680
00:26:55,710 --> 00:26:57,700
different radio state
transitions.

681
00:26:57,700 --> 00:27:02,340
So for example, on 3G, you
can be anywhere from 200

682
00:27:02,340 --> 00:27:03,640
milliseconds to two seconds.

683
00:27:03,640 --> 00:27:04,620
Just because your rating--

684
00:27:04,620 --> 00:27:06,011
AUDIENCE: You can ask it
to give you standard

685
00:27:06,011 --> 00:27:06,700
deviation or min/max?

686
00:27:06,700 --> 00:27:06,880
ILYA GRIGORIK: No, no.

687
00:27:06,880 --> 00:27:08,180
But this is just your
first packet.

688
00:27:08,180 --> 00:27:09,060
This is your first packet.

689
00:27:09,060 --> 00:27:10,390
After that, you're
pretty good.

690
00:27:10,390 --> 00:27:13,290
It's 100 milliseconds
or less--

691
00:27:13,290 --> 00:27:13,620
50 milliseconds.

692
00:27:13,620 --> 00:27:16,110
AUDIENCE: You keep
measuring it.

693
00:27:16,110 --> 00:27:16,950
[INTERPOSING VOICES]

694
00:27:16,950 --> 00:27:19,120
ILYA GRIGORIK: No, but the
point is then you wait.

695
00:27:19,120 --> 00:27:21,340
Then you wait five seconds.

696
00:27:21,340 --> 00:27:23,220
And then you will once again
incur two seconds.

697
00:27:23,220 --> 00:27:25,400
I think the fundamental problem
that we have, is we

698
00:27:25,400 --> 00:27:28,070
have this mental model of
Wi-Fi networks or mobile

699
00:27:28,070 --> 00:27:31,050
networks being the same as
wired networks, which is

700
00:27:31,050 --> 00:27:32,620
fundamentally wrong.

701
00:27:32,620 --> 00:27:34,810
And because of that, we feel
like there's all this

702
00:27:34,810 --> 00:27:38,410
variability, all of this
randomness, all this latency.

703
00:27:38,410 --> 00:27:40,300
But once we actually understand
why these delays

704
00:27:40,300 --> 00:27:43,310
are there and you design for
them, hey, I know I'm on 3G

705
00:27:43,310 --> 00:27:44,390
network right now.

706
00:27:44,390 --> 00:27:46,790
Every once in a while, I'm going
to dispatch a request

707
00:27:46,790 --> 00:27:49,730
which will first block for
up to two seconds.

708
00:27:49,730 --> 00:27:52,060
And this may not be a problem if
it's just like a background

709
00:27:52,060 --> 00:27:53,880
update thing, because
who cares.

710
00:27:53,880 --> 00:27:57,540
But if this is an interactive
user clicking on something and

711
00:27:57,540 --> 00:28:00,500
you're on 3G, that's a UX
pattern that you should be

712
00:28:00,500 --> 00:28:03,410
aware of, because you probably
need a different feedback loop

713
00:28:03,410 --> 00:28:06,170
in your app to say, hey, this
could take a while.

714
00:28:06,170 --> 00:28:07,480
JOHN CLEVELEY: So you're saying
you'd have a different

715
00:28:07,480 --> 00:28:09,690
user experience depending
on what sort of

716
00:28:09,690 --> 00:28:10,720
network you're on?

717
00:28:10,720 --> 00:28:13,780
ILYA GRIGORIK: I'm just saying
you should design

718
00:28:13,780 --> 00:28:15,890
with this in mind.

719
00:28:15,890 --> 00:28:20,480
If you're on 3G, if you're on 4G
even, some actions, like if

720
00:28:20,480 --> 00:28:23,480
my phone has been idle for a
while, the first network

721
00:28:23,480 --> 00:28:26,320
interaction that you're going
to have will have a delay--

722
00:28:26,320 --> 00:28:29,270
anywhere from 100 milliseconds
to two seconds--

723
00:28:29,270 --> 00:28:31,500
before any packets
get dispatched.

724
00:28:31,500 --> 00:28:34,250
JOHN CLEVELEY: So going from a
mobile first approach, do you

725
00:28:34,250 --> 00:28:37,635
think we should use that
behavior as the standard for

726
00:28:37,635 --> 00:28:39,320
everybody in terms
of making sure?

727
00:28:39,320 --> 00:28:42,290
ILYA GRIGORIK: It's probably
a reasonable thing to do.

728
00:28:42,290 --> 00:28:43,720
AUDIENCE: Just one comment,
[INAUDIBLE].

729
00:28:43,720 --> 00:28:48,250

730
00:28:48,250 --> 00:28:52,650
I'm basically my own firm.

731
00:28:52,650 --> 00:28:56,550
Just one comment regarding the
measurement of time to first

732
00:28:56,550 --> 00:29:01,050
byte, would resource timing,
especially if we could add

733
00:29:01,050 --> 00:29:04,240
byte size into resource timing,
we could measure

734
00:29:04,240 --> 00:29:14,050
continuously the end-to-end
bandwidth

735
00:29:14,050 --> 00:29:16,780
throughout the download.

736
00:29:16,780 --> 00:29:21,900
It's extremely complicated to
measure the bandwidth between

737
00:29:21,900 --> 00:29:29,610
the various resources, but we
can have a fuller picture of

738
00:29:29,610 --> 00:29:31,005
the download.

739
00:29:31,005 --> 00:29:32,284
ILYA GRIGORIK: Great, we're
going to have a

740
00:29:32,284 --> 00:29:34,180
fuller wrong picture.

741
00:29:34,180 --> 00:29:37,660
STEVE THAIR: I'm going to move
on from this topic, because I

742
00:29:37,660 --> 00:29:39,270
think we've done it to death.

743
00:29:39,270 --> 00:29:40,950
You either believe that
measuring the bandwidth is

744
00:29:40,950 --> 00:29:43,090
useful for you, or you may
believe that measuring the

745
00:29:43,090 --> 00:29:45,060
bandwidth is a complete and
utter waste of time.

746
00:29:45,060 --> 00:29:48,740
I think it really comes down to
if you're more for John's

747
00:29:48,740 --> 00:29:52,800
point question really is, why do
you want to know, and what

748
00:29:52,800 --> 00:29:54,410
are you going to do with
that information?

749
00:29:54,410 --> 00:29:56,440
You're not going to be switching
between four

750
00:29:56,440 --> 00:30:00,470
different viewport things of
this application or ways of

751
00:30:00,470 --> 00:30:03,420
displaying this application
on a millisecond basis.

752
00:30:03,420 --> 00:30:05,330
Who really cares?

753
00:30:05,330 --> 00:30:06,558
One quick point?

754
00:30:06,558 --> 00:30:08,470
AUDIENCE: Yeah, [INAUDIBLE],
Mozilla.

755
00:30:08,470 --> 00:30:12,854
I heard this fallacy about if
the viewport is big enough,

756
00:30:12,854 --> 00:30:15,070
then we [INAUDIBLE]
bigger picture.

757
00:30:15,070 --> 00:30:17,230
That actually says that if
the screen is bigger, my

758
00:30:17,230 --> 00:30:19,830
connection is faster, which
is not really true.

759
00:30:19,830 --> 00:30:22,178
So [INAUDIBLE]

760
00:30:22,178 --> 00:30:24,850
Retina displays and these kinds
of things, I can't be on

761
00:30:24,850 --> 00:30:27,038
a slow connection with my
Retina display machine.

762
00:30:27,038 --> 00:30:29,954
I still don't want the two-meg
background image.

763
00:30:29,954 --> 00:30:31,980
So the question is, in Flash,
we had adaptive

764
00:30:31,980 --> 00:30:33,090
streaming of videos.

765
00:30:33,090 --> 00:30:37,570
And why don't we get this
in the HTML5 world?

766
00:30:37,570 --> 00:30:40,390
What do you we need to do to get
this [INAUDIBLE], because

767
00:30:40,390 --> 00:30:43,822
right now one can start using
Flash for that kind of stuff.

768
00:30:43,822 --> 00:30:45,650
JACKSON GABBARD: [INAUDIBLE]

769
00:30:45,650 --> 00:30:47,112
I guess for me--

770
00:30:47,112 --> 00:30:48,690
AUDIENCE: Can you repeat
the essence of the

771
00:30:48,690 --> 00:30:50,518
comment with mics?

772
00:30:50,518 --> 00:30:52,430
JACKSON GABBARD: I don't
know if I can or not.

773
00:30:52,430 --> 00:30:54,820
It's complicated.

774
00:30:54,820 --> 00:31:01,461
So the essence was, device
screen size is no proxy for

775
00:31:01,461 --> 00:31:03,145
network activity.

776
00:31:03,145 --> 00:31:06,760
That's the measure that we take
against what [INAUDIBLE]

777
00:31:06,760 --> 00:31:08,950
and what switches
we send across.

778
00:31:08,950 --> 00:31:11,384
You mentioned the Flash
[INAUDIBLE]

779
00:31:11,384 --> 00:31:13,830
where you can get
a [INAUDIBLE].

780
00:31:13,830 --> 00:31:17,700
You need something along these
lines for the HTML

781
00:31:17,700 --> 00:31:18,170
[INAUDIBLE].

782
00:31:18,170 --> 00:31:22,830
Basically, you get the lower
quality image with low

783
00:31:22,830 --> 00:31:26,645
bandwidth case naturally
by [INAUDIBLE]

784
00:31:26,645 --> 00:31:28,530
that we don't have currently.

785
00:31:28,530 --> 00:31:29,510
Is that the essence?

786
00:31:29,510 --> 00:31:30,490
AUDIENCE: Yeah.

787
00:31:30,490 --> 00:31:31,960
JACKSON GABBARD: I forgot what
I was going to say about it.

788
00:31:31,960 --> 00:31:34,900
[LAUGHTER]

789
00:31:34,900 --> 00:31:36,990
STEVE THAIR: And the
answer is, yes.

790
00:31:36,990 --> 00:31:37,980
We need that.

791
00:31:37,980 --> 00:31:38,760
Very good.

792
00:31:38,760 --> 00:31:39,450
So I want to get on.

793
00:31:39,450 --> 00:31:41,270
There are some other questions
on other topics that I want to

794
00:31:41,270 --> 00:31:43,400
cover and get away
from net API.

795
00:31:43,400 --> 00:31:46,130
So one of the questions which
you started to talk about with

796
00:31:46,130 --> 00:31:48,230
you had different visions and
[? optimized ?] stuff, there's

797
00:31:48,230 --> 00:31:53,100
a couple of questions in here
that are basically around

798
00:31:53,100 --> 00:31:54,290
should I be compressing?

799
00:31:54,290 --> 00:31:57,040
Should I be using
minification?

800
00:31:57,040 --> 00:31:59,050
What things should I be
doing during my build

801
00:31:59,050 --> 00:32:02,590
cycle in order to--

802
00:32:02,590 --> 00:32:04,890
does minification really save
you all that much when it's

803
00:32:04,890 --> 00:32:06,570
going to be gzip compressed
anyway?

804
00:32:06,570 --> 00:32:08,770
JACKSON GABBARD: I have
a poll question here.

805
00:32:08,770 --> 00:32:09,630
How many people here--

806
00:32:09,630 --> 00:32:11,592
STEVE THAIR: How many
people here--

807
00:32:11,592 --> 00:32:12,406
JACKSON GABBARD: How many
people here have a build

808
00:32:12,406 --> 00:32:13,470
script for the they work on?

809
00:32:13,470 --> 00:32:14,330
STEVE THAIR: Have a build
script for the

810
00:32:14,330 --> 00:32:15,730
project they work on?

811
00:32:15,730 --> 00:32:16,020
JACKSON GABBARD: Holy shit.

812
00:32:16,020 --> 00:32:16,270
Wow.

813
00:32:16,270 --> 00:32:17,960
STEVE THAIR: That's like
pretty much everybody.

814
00:32:17,960 --> 00:32:18,882
Awesome.

815
00:32:18,882 --> 00:32:19,284
JACKSON GABBARD: Nice.

816
00:32:19,284 --> 00:32:19,686
I had no idea.

817
00:32:19,686 --> 00:32:20,490
This is awesome.

818
00:32:20,490 --> 00:32:23,420
STEVE THAIR: And how many of
those build scripts include

819
00:32:23,420 --> 00:32:26,590
performance optimizations?

820
00:32:26,590 --> 00:32:30,130
Now you're just showing off.

821
00:32:30,130 --> 00:32:31,415
That was about everybody
again.

822
00:32:31,415 --> 00:32:34,060

823
00:32:34,060 --> 00:32:37,641
So who's doing minification?

824
00:32:37,641 --> 00:32:41,920
Who's doing image optimization
and resize on the fly?

825
00:32:41,920 --> 00:32:44,220
Oh, about a tenth of the
people who answered the

826
00:32:44,220 --> 00:32:45,480
previous question.

827
00:32:45,480 --> 00:32:46,840
What else would you
like to see?

828
00:32:46,840 --> 00:32:48,832
JACKSON GABBARD: [INAUDIBLE].

829
00:32:48,832 --> 00:32:50,370
STEVE THAIR: This is a question
for the panel.

830
00:32:50,370 --> 00:32:53,270
What else can people do in their
build cycle that you

831
00:32:53,270 --> 00:32:55,910
think is really going to help
their delivery, particular

832
00:32:55,910 --> 00:32:58,360
over high latency, low
bandwidth networks?

833
00:32:58,360 --> 00:33:01,340
JOHN CLEVELEY: I think the other
thing you can do is, for

834
00:33:01,340 --> 00:33:05,260
JavaScript, you can't power
everything into an all.js.

835
00:33:05,260 --> 00:33:08,320
You do get to the point where
it starts to get massive.

836
00:33:08,320 --> 00:33:11,640
And so if there are other pages
where actually it's a

837
00:33:11,640 --> 00:33:13,030
specific bit of [INAUDIBLE]

838
00:33:13,030 --> 00:33:15,470
that you can have in a different
package, then

839
00:33:15,470 --> 00:33:18,770
sometimes it's good to work
out what you can spit out.

840
00:33:18,770 --> 00:33:20,100
So the majority of
pages, you're

841
00:33:20,100 --> 00:33:21,725
still using this all.js.

842
00:33:21,725 --> 00:33:24,590
But on these other ones that you
can get away with spitting

843
00:33:24,590 --> 00:33:25,650
things out.

844
00:33:25,650 --> 00:33:28,230
So we use AMD to do that
kind of stuff.

845
00:33:28,230 --> 00:33:30,740
And there's probably all sorts
of different dependency type

846
00:33:30,740 --> 00:33:32,020
things that you can use.

847
00:33:32,020 --> 00:33:35,800
So it's not always about making
one massive file.

848
00:33:35,800 --> 00:33:37,380
Sometimes you need to be a
little bit clever about how

849
00:33:37,380 --> 00:33:38,980
you split stuff up,
bundle stuff.

850
00:33:38,980 --> 00:33:40,216
JACKSON GABBARD: Thank
you for that.

851
00:33:40,216 --> 00:33:43,670
So the approach that we take for
Facebook is that there's

852
00:33:43,670 --> 00:33:44,820
two levels.

853
00:33:44,820 --> 00:33:46,180
There's basically all
the important

854
00:33:46,180 --> 00:33:47,410
interactions that matter--

855
00:33:47,410 --> 00:33:52,390
clicking on links, loading
things by XHR.

856
00:33:52,390 --> 00:33:55,082
And then there's all the rich
features, all the really

857
00:33:55,082 --> 00:33:56,043
bulky, all that JS stuff.

858
00:33:56,043 --> 00:33:59,550
And so in the header page,
before the body, with all the

859
00:33:59,550 --> 00:34:03,560
[INAUDIBLE], we'll send out all
of the basics, the really

860
00:34:03,560 --> 00:34:05,947
tight, "do not put bytes in
here, you're wasting human

861
00:34:05,947 --> 00:34:08,180
lifetime" sort of stuff
in that [INAUDIBLE]

862
00:34:08,180 --> 00:34:09,120
JavaScript.

863
00:34:09,120 --> 00:34:12,196
And then the stuff you need
later, you'll get to it.

864
00:34:12,196 --> 00:34:14,670
Eventually you'll get those
features, and then the

865
00:34:14,670 --> 00:34:18,020
widgets, the flyouts, the
[? beepers on the site, ?]

866
00:34:18,020 --> 00:34:20,516
the core interactions that are
JavaScript enhanced, they'll

867
00:34:20,516 --> 00:34:21,055
be there immediately.

868
00:34:21,055 --> 00:34:22,010
It's the exact same approach.

869
00:34:22,010 --> 00:34:23,690
JOHN CLEVELEY: And it's just
downloading what the user's

870
00:34:23,690 --> 00:34:26,500
actually going to use as well
and using feature detection.

871
00:34:26,500 --> 00:34:28,980
So if you're doing video,
check that the user can

872
00:34:28,980 --> 00:34:31,980
actually play video before you
download your HTML5 player and

873
00:34:31,980 --> 00:34:32,985
things like that.

874
00:34:32,985 --> 00:34:35,989
So just looking after the guys
with the bad phones, because

875
00:34:35,989 --> 00:34:38,230
they're probably got bad
JavaScript as well and

876
00:34:38,230 --> 00:34:39,510
probably are on slow
connections--

877
00:34:39,510 --> 00:34:41,230
I'm making lots of
assumptions here.

878
00:34:41,230 --> 00:34:44,080
But you generally
get the idea.

879
00:34:44,080 --> 00:34:46,409
Basically it's just progressive
enhancement.

880
00:34:46,409 --> 00:34:47,719
That's the most basic level.

881
00:34:47,719 --> 00:34:49,620
ANDY DAVIES: But there also a
lot of people who are afraid

882
00:34:49,620 --> 00:34:51,489
of-- particularly in the
design community-- of

883
00:34:51,489 --> 00:34:52,989
server-side stuff.

884
00:34:52,989 --> 00:34:56,800
If you look at media queries,
the showcase site for

885
00:34:56,800 --> 00:34:59,290
responsive designs, and you look
at the configuration of

886
00:34:59,290 --> 00:35:03,930
some of these guys' servers,
there's basic things like,

887
00:35:03,930 --> 00:35:07,300
gzip compression missing,
keepalives missing, cache

888
00:35:07,300 --> 00:35:08,410
directives missing.

889
00:35:08,410 --> 00:35:12,560
There's a lot of basic stuff
that as a web industry, we're

890
00:35:12,560 --> 00:35:14,440
really bad at doing.

891
00:35:14,440 --> 00:35:16,060
ILYA GRIGORIK: It's actually
surprising.

892
00:35:16,060 --> 00:35:17,110
Maybe not in this room.

893
00:35:17,110 --> 00:35:20,900
I think in this room, most of us
here have the basics right.

894
00:35:20,900 --> 00:35:22,900
Turns out most of the rest of
the industry still has the

895
00:35:22,900 --> 00:35:24,410
basics wrong.

896
00:35:24,410 --> 00:35:26,410
That's a big problem.

897
00:35:26,410 --> 00:35:27,580
STEVE THAIR: I'm
an ops manager.

898
00:35:27,580 --> 00:35:28,650
I'm going to disagree
with that.

899
00:35:28,650 --> 00:35:30,210
Just because all the developers
in this room are

900
00:35:30,210 --> 00:35:32,610
doing everything right sure as
heck doesn't mean the ops guys

901
00:35:32,610 --> 00:35:34,710
who run the servers
are doing it.

902
00:35:34,710 --> 00:35:35,040
ILYA GRIGORIK: All right.

903
00:35:35,040 --> 00:35:37,040
Fair enough.

904
00:35:37,040 --> 00:35:38,920
So we talked about JavaScript.

905
00:35:38,920 --> 00:35:40,190
I'll come back to images.

906
00:35:40,190 --> 00:35:41,850
60% of the bytes--

907
00:35:41,850 --> 00:35:43,090
images.

908
00:35:43,090 --> 00:35:48,900
You probably have your PNG
optim, jpegtran or something

909
00:35:48,900 --> 00:35:51,260
built into your build script.

910
00:35:51,260 --> 00:35:54,370
Chances are, you're still
missing the opportunity to

911
00:35:54,370 --> 00:35:56,840
transcode it to a better
image format.

912
00:35:56,840 --> 00:36:00,830
I'm guessing half of your PNGs
are bed encoded as JPEGs and

913
00:36:00,830 --> 00:36:01,920
vice versa.

914
00:36:01,920 --> 00:36:04,360
This is a much harder problem to
solve, because it's likely

915
00:36:04,360 --> 00:36:07,355
that your PNG is hardcoded into
your app, which means you

916
00:36:07,355 --> 00:36:08,700
need to rewrite your code.

917
00:36:08,700 --> 00:36:11,110
But this is a huge, huge
opportunity that you should

918
00:36:11,110 --> 00:36:12,520
look at today.

919
00:36:12,520 --> 00:36:15,080
And you guys have a server-side
solution to do the

920
00:36:15,080 --> 00:36:16,110
image resizing.

921
00:36:16,110 --> 00:36:19,272
I think this is something that
more and more people need to

922
00:36:19,272 --> 00:36:22,820
deploy, because we just stick
images into a markup and

923
00:36:22,820 --> 00:36:24,300
resize them on a client.

924
00:36:24,300 --> 00:36:25,100
And that's a big problem.

925
00:36:25,100 --> 00:36:27,380
JACKSON GABBARD: The hard
problem, it's sort of an

926
00:36:27,380 --> 00:36:30,170
exponential nature, because if
you want to serve every single

927
00:36:30,170 --> 00:36:32,170
resolution, well, that's
a different image size.

928
00:36:32,170 --> 00:36:35,790
If you want a full width image
for every single resolution,

929
00:36:35,790 --> 00:36:38,405
that's a massive number
of resolutions.

930
00:36:38,405 --> 00:36:43,240
And so the coping mechanism we
use is to basically put it in

931
00:36:43,240 --> 00:36:43,885
four-ish categories.

932
00:36:43,885 --> 00:36:46,292
I think we have roughly
four sizes--

933
00:36:46,292 --> 00:36:51,052
very, very small, original
iPhone, high-end iPhone world,

934
00:36:51,052 --> 00:36:54,820
and then gigantic, tablet-y,
very high-resolution Android

935
00:36:54,820 --> 00:36:56,240
phone-y stuff.

936
00:36:56,240 --> 00:37:01,040
And then use careful CSS to let
it crop on the client in a

937
00:37:01,040 --> 00:37:02,216
way that's reasonable.

938
00:37:02,216 --> 00:37:06,160
And that way, you never quite
get exactly the right thing in

939
00:37:06,160 --> 00:37:09,667
all cases, but you end up having
to have not a mess, but

940
00:37:09,667 --> 00:37:10,917
not a server side storage.

941
00:37:10,917 --> 00:37:12,980

942
00:37:12,980 --> 00:37:16,270

943
00:37:16,270 --> 00:37:18,850
AUDIENCE: Yeah this is
[INAUDIBLE] from Mozilla.

944
00:37:18,850 --> 00:37:22,240
One thing we saw when we were
looking into doing WebP was

945
00:37:22,240 --> 00:37:26,770
that the reason it wasn't
commencing was we saw that

946
00:37:26,770 --> 00:37:28,775
people could just use better
JPEG compressors.

947
00:37:28,775 --> 00:37:32,910

948
00:37:32,910 --> 00:37:36,220
When you're encoding to JPEG,
if you just use better

949
00:37:36,220 --> 00:37:38,490
parameters to your JPEG
compressor, you can actually

950
00:37:38,490 --> 00:37:43,170
win about the same order of
magnitude as this 30% that

951
00:37:43,170 --> 00:37:45,900
WebP currently proposed.

952
00:37:45,900 --> 00:37:49,490
It's quite possible that WebP
can do even better.

953
00:37:49,490 --> 00:37:55,130
But the order, the wins that
people were shooting for could

954
00:37:55,130 --> 00:37:58,650
be had in many cases with just
passing better parameters to

955
00:37:58,650 --> 00:37:59,320
your compressor.

956
00:37:59,320 --> 00:38:01,640
ILYA GRIGORIK: So I think
there's a couple

957
00:38:01,640 --> 00:38:03,250
of threads in there.

958
00:38:03,250 --> 00:38:06,280
You have quality level.

959
00:38:06,280 --> 00:38:10,100
And most of the time today, we
save our JPEGs either as 100,

960
00:38:10,100 --> 00:38:14,100
or if you're advanced, you'll
save it as an 85.

961
00:38:14,100 --> 00:38:16,930
We can go way down into the
tail and actually get very

962
00:38:16,930 --> 00:38:20,080
good visual performance at
a fraction of the cost.

963
00:38:20,080 --> 00:38:24,120
WebP does have about 30%, on
average, better compression at

964
00:38:24,120 --> 00:38:27,220
the same quality level, the
same perceptual level.

965
00:38:27,220 --> 00:38:29,900
It is definitely the case that
you can take all your JPEGs,

966
00:38:29,900 --> 00:38:32,290
save at a lower quality,
basically re-compress them,

967
00:38:32,290 --> 00:38:35,860
and get much better bytes
on the [? wire. ?]

968
00:38:35,860 --> 00:38:37,470
So that is definitely true.

969
00:38:37,470 --> 00:38:40,040
And I think that's an
under-appreciated area

970
00:38:40,040 --> 00:38:41,290
generally today.

971
00:38:41,290 --> 00:38:44,120

972
00:38:44,120 --> 00:38:45,685
JOHN CLEVELEY: One thing as well
is, if you want to work

973
00:38:45,685 --> 00:38:48,170
it out from a UX perspective,
how many images you need to

974
00:38:48,170 --> 00:38:49,700
show [INAUDIBLE].

975
00:38:49,700 --> 00:38:53,700
You can fool around with
compression, but actually if

976
00:38:53,700 --> 00:38:55,930
you get to the desktop
BBC News site, we've

977
00:38:55,930 --> 00:38:57,320
got a lot of images.

978
00:38:57,320 --> 00:39:00,170
And so that's something we're
looking at to work on.

979
00:39:00,170 --> 00:39:02,690
In our mobile site,
we've only got 10.

980
00:39:02,690 --> 00:39:03,960
And that's just a massive win.

981
00:39:03,960 --> 00:39:08,360
And so it's working out just
trying to do less but do the

982
00:39:08,360 --> 00:39:09,570
stuff you do do really well.

983
00:39:09,570 --> 00:39:10,760
I think that that's the biggest

984
00:39:10,760 --> 00:39:12,310
thing for network stuff.

985
00:39:12,310 --> 00:39:14,240
STEVE THAIR: On the feature
phone, you drop the images

986
00:39:14,240 --> 00:39:16,005
altogether on the news
page, don't you?

987
00:39:16,005 --> 00:39:16,280
JOHN CLEVELEY: Yeah
that's right.

988
00:39:16,280 --> 00:39:19,820
So if you hit our site on a
feature phone, like a Nokia,

989
00:39:19,820 --> 00:39:21,770
you'd literally just get
the first image.

990
00:39:21,770 --> 00:39:23,980
And that gets replaced out with
a better quality image if

991
00:39:23,980 --> 00:39:25,100
you're on a wider screen.

992
00:39:25,100 --> 00:39:28,735
And then we post-load all the
other images with JavaScript.

993
00:39:28,735 --> 00:39:30,020
STEVE THAIR: We've got
a question from Colt.

994
00:39:30,020 --> 00:39:31,030
AUDIENCE: Yeah, quick
question--

995
00:39:31,030 --> 00:39:32,170
Colt McAnlis from Google.

996
00:39:32,170 --> 00:39:35,310
So can we actually talk about
how the fact that the smaller

997
00:39:35,310 --> 00:39:39,170
image compression formats we
have decreases our network hit

998
00:39:39,170 --> 00:39:41,210
and actually increases
our runtime hit.

999
00:39:41,210 --> 00:39:44,030
So all those JPEGs and PNGs have
to be decoded to a full

1000
00:39:44,030 --> 00:39:46,910
resolution 32-bit and then
transferred to the GPU, which

1001
00:39:46,910 --> 00:39:49,400
actually puts more pressure on
the GPU memory, causing more

1002
00:39:49,400 --> 00:39:51,440
invalidations and actually
hurts your runtime

1003
00:39:51,440 --> 00:39:52,400
performance.

1004
00:39:52,400 --> 00:39:56,130
What are our thoughts
on fixing this?

1005
00:39:56,130 --> 00:39:57,400
ILYA GRIGORIK: I don't think
there's a fix for it.

1006
00:39:57,400 --> 00:39:58,650
It's a trade-off.

1007
00:39:58,650 --> 00:40:01,540

1008
00:40:01,540 --> 00:40:05,210
How does WebP give you better
image compression?

1009
00:40:05,210 --> 00:40:07,190
Well, we have more advanced
algorithms that

1010
00:40:07,190 --> 00:40:08,630
take more CPU time.

1011
00:40:08,630 --> 00:40:11,620
And vice versa, you need
more time to decode it.

1012
00:40:11,620 --> 00:40:13,800
So this is an interesting
trade-off.

1013
00:40:13,800 --> 00:40:16,570
It will take more time to decode
a WebP image than it

1014
00:40:16,570 --> 00:40:18,690
does to decode a JPEG image.

1015
00:40:18,690 --> 00:40:23,040
And you need to look at, maybe
if you were building a game

1016
00:40:23,040 --> 00:40:26,900
and it's like you have a ton
of image [INAUDIBLE], maybe

1017
00:40:26,900 --> 00:40:30,220
your CPU, especially on
a ARM processor, is

1018
00:40:30,220 --> 00:40:32,340
your limiting factor.

1019
00:40:32,340 --> 00:40:34,660
Maybe be at that point, you
make a decision to use

1020
00:40:34,660 --> 00:40:35,720
something else.

1021
00:40:35,720 --> 00:40:37,580
We recently did some studies--

1022
00:40:37,580 --> 00:40:39,320
I don't think we've published
anything yet at this point,

1023
00:40:39,320 --> 00:40:40,690
but I think we will.

1024
00:40:40,690 --> 00:40:44,410
We looked at Image Search at
Google, where we moved

1025
00:40:44,410 --> 00:40:47,200
everything to WebP and just
looked at, what are the wins,

1026
00:40:47,200 --> 00:40:48,160
what are the losses?

1027
00:40:48,160 --> 00:40:50,270
We do take more time
in the CPU.

1028
00:40:50,270 --> 00:40:52,680
We take a lot less time
on the network.

1029
00:40:52,680 --> 00:40:55,620
Then that trade-off is we're
still better off using WebP in

1030
00:40:55,620 --> 00:40:56,930
that specific case.

1031
00:40:56,930 --> 00:41:00,070
And this is your Image Search
page, which has like 20 or 30

1032
00:41:00,070 --> 00:41:02,810
images at different
resolutions.

1033
00:41:02,810 --> 00:41:05,000
So this is, I think,
a great point.

1034
00:41:05,000 --> 00:41:06,910
It's something you need
to keep in mind.

1035
00:41:06,910 --> 00:41:07,090
STEVE THAIR: OK.

1036
00:41:07,090 --> 00:41:09,250
The I think we've done
images to death.

1037
00:41:09,250 --> 00:41:10,730
We've got about 10
minutes left.

1038
00:41:10,730 --> 00:41:14,590
I want to try to move on to two
semi-related topics that

1039
00:41:14,590 --> 00:41:16,740
are very network specific.

1040
00:41:16,740 --> 00:41:20,420
The first is some guy named Andy
Davies from Bristol asked

1041
00:41:20,420 --> 00:41:22,820
the question, with the adoption
of multiplexed

1042
00:41:22,820 --> 00:41:26,740
protocols like SPDY and HTTP2
and the prioritization of

1043
00:41:26,740 --> 00:41:30,820
resource downloads by the
browser based upon the type,

1044
00:41:30,820 --> 00:41:35,230
will data URIs become
an anti-pattern?

1045
00:41:35,230 --> 00:41:37,120
That's one question.

1046
00:41:37,120 --> 00:41:38,670
And then there was another
question that was basically

1047
00:41:38,670 --> 00:41:41,320
about web sockets and
stuff like that.

1048
00:41:41,320 --> 00:41:44,250
So I just want to move on
to talking about those.

1049
00:41:44,250 --> 00:41:46,500
So does anybody want
to answer Andy's

1050
00:41:46,500 --> 00:41:48,820
question other than Andy?

1051
00:41:48,820 --> 00:41:51,280
Or you can answer your own
question if you want to, Andy.

1052
00:41:51,280 --> 00:41:53,280
JACKSON GABBARD: I think it
echoes what you said earlier--

1053
00:41:53,280 --> 00:41:54,790
the idea that the best request
is no request.

1054
00:41:54,790 --> 00:41:55,670
So [INAUDIBLE]

1055
00:41:55,670 --> 00:41:56,980
is pretty sweet for that.

1056
00:41:56,980 --> 00:41:58,830
It's all there.

1057
00:41:58,830 --> 00:42:01,670
If you're [INAUDIBLE] mobile
app, you can put all your data

1058
00:42:01,670 --> 00:42:04,720
URLs into your CSS and you
have one CSS file.

1059
00:42:04,720 --> 00:42:05,850
That's a win.

1060
00:42:05,850 --> 00:42:09,790
I can't imagine a world where
going from no request to any

1061
00:42:09,790 --> 00:42:11,040
request isn't a better
trade-off.

1062
00:42:11,040 --> 00:42:14,020

1063
00:42:14,020 --> 00:42:16,150
ILYA GRIGORIK: Why do
we inline stuff?

1064
00:42:16,150 --> 00:42:19,060
It's because we have limitations
in HTTP 1.1, which

1065
00:42:19,060 --> 00:42:20,810
make small requests expense.

1066
00:42:20,810 --> 00:42:22,320
It's the same reason
we sprite images.

1067
00:42:22,320 --> 00:42:24,190
It's the same reason
we concatenate

1068
00:42:24,190 --> 00:42:25,930
files, all of this stuff.

1069
00:42:25,930 --> 00:42:30,040
With SPDY and HTTP2, that goes
away, because we can multiplex

1070
00:42:30,040 --> 00:42:31,570
all the stuff in parallel.

1071
00:42:31,570 --> 00:42:33,150
You can send all of your
requests at the same time.

1072
00:42:33,150 --> 00:42:35,160
We don't need multiple
parallel connections.

1073
00:42:35,160 --> 00:42:36,560
Yada, yada, yada.

1074
00:42:36,560 --> 00:42:38,980
Then coming back to inlining,
inlining is a

1075
00:42:38,980 --> 00:42:40,390
form of a server push.

1076
00:42:40,390 --> 00:42:43,100

1077
00:42:43,100 --> 00:42:44,110
Here's the idea.

1078
00:42:44,110 --> 00:42:47,630
In HTTP2, we have this proposal
to say, sometimes the

1079
00:42:47,630 --> 00:42:50,200
server actually knows what
you're going to request before

1080
00:42:50,200 --> 00:42:50,990
you request it.

1081
00:42:50,990 --> 00:42:52,360
Like I'm sending you
the damn page.

1082
00:42:52,360 --> 00:42:53,530
I know the resources on it.

1083
00:42:53,530 --> 00:42:56,090
So why don't I just send
you the resources?

1084
00:42:56,090 --> 00:42:57,850
Seems kind of obvious, right?

1085
00:42:57,850 --> 00:43:00,680
So that's the idea behind
server push.

1086
00:43:00,680 --> 00:43:03,750
And inlining is push, because
you're saying, look, I know

1087
00:43:03,750 --> 00:43:04,960
you're going to ask
for this icon.

1088
00:43:04,960 --> 00:43:07,680
So here, page 64 in the file.

1089
00:43:07,680 --> 00:43:08,600
Forget it.

1090
00:43:08,600 --> 00:43:09,670
Don't make the request.

1091
00:43:09,670 --> 00:43:12,010
That's a trade-off
of HTTP 1.1.

1092
00:43:12,010 --> 00:43:16,140
With 2, we can actually get away
from that and say, by the

1093
00:43:16,140 --> 00:43:17,040
way, here's the file.

1094
00:43:17,040 --> 00:43:17,940
And why is that a win?

1095
00:43:17,940 --> 00:43:20,320
So let's say you have to have a
small icon or a big icon or

1096
00:43:20,320 --> 00:43:22,690
whatnot, and you inline
into a page.

1097
00:43:22,690 --> 00:43:25,890
Now you're inlining that thing
into every single page.

1098
00:43:25,890 --> 00:43:27,290
It fits on multiple pages.

1099
00:43:27,290 --> 00:43:30,970
So you're just bloating
the size of each page.

1100
00:43:30,970 --> 00:43:33,840
Whereas with push, it can
actually be in your cache.

1101
00:43:33,840 --> 00:43:35,860
So I think it is mostly
an anti-pattern.

1102
00:43:35,860 --> 00:43:39,210
I'm sure there's one or two
use cases where there may

1103
00:43:39,210 --> 00:43:41,970
still-- like, if it's only
used on one page, it's

1104
00:43:41,970 --> 00:43:43,220
effectively the same.

1105
00:43:43,220 --> 00:43:46,540

1106
00:43:46,540 --> 00:43:47,830
STEVE THAIR: There's another
question here which is about

1107
00:43:47,830 --> 00:43:48,610
web sockets.

1108
00:43:48,610 --> 00:43:51,605
It seems that abstractions like
Socket.IO and Pusher are

1109
00:43:51,605 --> 00:43:53,750
the preferred way to
use web sockets.

1110
00:43:53,750 --> 00:43:56,690
Is this a failing in the
specification process?

1111
00:43:56,690 --> 00:43:59,340
Is it now the expectation that
new DOM APIs will be needed to

1112
00:43:59,340 --> 00:44:00,860
be wrapped by libraries
or frameworks?

1113
00:44:00,860 --> 00:44:03,850
So basically saying, does the
specification suck so bad

1114
00:44:03,850 --> 00:44:07,568
you've got to use another layer
on top to make it work?

1115
00:44:07,568 --> 00:44:08,818
AUDIENCE: [INAUDIBLE]?

1116
00:44:08,818 --> 00:44:13,024

1117
00:44:13,024 --> 00:44:14,520
[LAUGHTER]

1118
00:44:14,520 --> 00:44:15,570
STEVE THAIR: We'll take
that as a no.

1119
00:44:15,570 --> 00:44:20,540
So, apart from the guy from
Pusher in the audience, who's

1120
00:44:20,540 --> 00:44:22,910
using web sockets, and are they
using web sockets in a

1121
00:44:22,910 --> 00:44:23,630
mobile device?

1122
00:44:23,630 --> 00:44:25,970
Can I see a quick
show of hands?

1123
00:44:25,970 --> 00:44:29,320
So that's about four,
five people maybe.

1124
00:44:29,320 --> 00:44:33,980
Does anybody have any really bad
problems in a mobile world

1125
00:44:33,980 --> 00:44:35,540
that they think that causes?

1126
00:44:35,540 --> 00:44:38,608

1127
00:44:38,608 --> 00:44:41,850
AUDIENCE: [INAUDIBLE].

1128
00:44:41,850 --> 00:44:44,830
STEVE THAIR: One replay was,
the network provider is

1129
00:44:44,830 --> 00:44:46,490
blocking web sockets traffic.

1130
00:44:46,490 --> 00:44:47,462
AUDIENCE: Some of them.

1131
00:44:47,462 --> 00:44:47,948
Yeah.

1132
00:44:47,948 --> 00:44:50,378
STEVE THAIR: OK.

1133
00:44:50,378 --> 00:44:53,456
AUDIENCE: I haven't tested this,
but I've been told that

1134
00:44:53,456 --> 00:44:58,568
a web socket can just drop out
on a mobile connection.

1135
00:44:58,568 --> 00:45:01,953
I'm going to be listening
to the close events.

1136
00:45:01,953 --> 00:45:05,264
But I suppose the question is
simply to ask if that was

1137
00:45:05,264 --> 00:45:08,080
anything that anyone else
has come across.

1138
00:45:08,080 --> 00:45:09,740
ILYA GRIGORIK: So this is--

1139
00:45:09,740 --> 00:45:11,500
STEVE THAIR: Just repeat
the answer.

1140
00:45:11,500 --> 00:45:14,440
ILYA GRIGORIK: So the question
was, or the comment is that

1141
00:45:14,440 --> 00:45:17,300
sometimes website connections
just drop

1142
00:45:17,300 --> 00:45:18,930
out on mobile networks.

1143
00:45:18,930 --> 00:45:20,160
And this is a deployment
problem.

1144
00:45:20,160 --> 00:45:21,090
So I think there's
two problems.

1145
00:45:21,090 --> 00:45:23,770
First of all, web sockets did
go through a very elaborate

1146
00:45:23,770 --> 00:45:27,350
process of many revisions
and specifications.

1147
00:45:27,350 --> 00:45:29,970
Depending on which server you
use-- so I happen to have

1148
00:45:29,970 --> 00:45:30,980
worked on one--

1149
00:45:30,980 --> 00:45:32,890
it's the Ruby implementation,
the EM web socket.

1150
00:45:32,890 --> 00:45:35,300
If you actually look at the
implementation, we have, like,

1151
00:45:35,300 --> 00:45:37,260
15 implementations of
all the drafts.

1152
00:45:37,260 --> 00:45:40,700
It's a total nightmare in terms
of negotiating, oh, this

1153
00:45:40,700 --> 00:45:43,550
browser supports this
spec, et cetera.

1154
00:45:43,550 --> 00:45:44,570
That was problem number one.

1155
00:45:44,570 --> 00:45:47,720
So I think we did fail in the
specification process of that

1156
00:45:47,720 --> 00:45:49,840
specific standard.

1157
00:45:49,840 --> 00:45:53,160
The bigger problem today with
web sockets is you have to

1158
00:45:53,160 --> 00:45:55,160
deploy over SSL.

1159
00:45:55,160 --> 00:45:58,370
If you're deploying it on
mobile, you have to deploy it

1160
00:45:58,370 --> 00:46:03,530
over SSL, because most of the
carriers have some proxies in

1161
00:46:03,530 --> 00:46:07,690
between that try to optimize
traffic, whatever that means.

1162
00:46:07,690 --> 00:46:10,060
And they look web sockets, and
they're like, look, this

1163
00:46:10,060 --> 00:46:12,540
doesn't smell like HTTP.

1164
00:46:12,540 --> 00:46:13,470
Close.

1165
00:46:13,470 --> 00:46:16,710
Or even better, the blind
proxies, which don't even care

1166
00:46:16,710 --> 00:46:17,140
what's in there.

1167
00:46:17,140 --> 00:46:19,370
They're just substituting
bytes.

1168
00:46:19,370 --> 00:46:22,970
And this is why without SSL,
20% of your connections on

1169
00:46:22,970 --> 00:46:25,640
desktop will fail randomly.

1170
00:46:25,640 --> 00:46:27,190
You have a proxy that doesn't
understand web

1171
00:46:27,190 --> 00:46:29,300
sockets, end of story.

1172
00:46:29,300 --> 00:46:32,160
On mobile, it just happens to
be the other way around.

1173
00:46:32,160 --> 00:46:34,580
80% of your connections
will fail.

1174
00:46:34,580 --> 00:46:36,270
So if you want, you
can reliably

1175
00:46:36,270 --> 00:46:37,360
deploy web sockets today.

1176
00:46:37,360 --> 00:46:38,750
It's HTTPS.

1177
00:46:38,750 --> 00:46:43,480
And that's how anybody on mobile
deploys that at scale.

1178
00:46:43,480 --> 00:46:44,730
STEVE THAIR: Great.

1179
00:46:44,730 --> 00:46:48,130

1180
00:46:48,130 --> 00:46:49,850
AUDIENCE: [INAUDIBLE]
with Mozilla again.

1181
00:46:49,850 --> 00:46:52,100
Isn't the big reason for library
use that a lot of

1182
00:46:52,100 --> 00:46:54,522
browsers still don't support
web sockets, or a lot of

1183
00:46:54,522 --> 00:46:57,320
browsers that people use still
don't support web sockets,

1184
00:46:57,320 --> 00:46:58,750
which we can't really
get away from?

1185
00:46:58,750 --> 00:47:01,310
ILYA GRIGORIK: So we need HTTP
fallbacks for browsers that

1186
00:47:01,310 --> 00:47:03,720
don't support it.

1187
00:47:03,720 --> 00:47:06,760
Hence the reason for Socket.IO
and all these other

1188
00:47:06,760 --> 00:47:07,770
abstractions.

1189
00:47:07,770 --> 00:47:10,890
And that's just an unfortunate
reality of not everybody is

1190
00:47:10,890 --> 00:47:13,020
able to upgrade to an
evergreen browser.

1191
00:47:13,020 --> 00:47:16,000
Some people are just stuck on
an old IE machine that they

1192
00:47:16,000 --> 00:47:16,640
can't upgrade.

1193
00:47:16,640 --> 00:47:18,688
And I don't know how
to fix that.

1194
00:47:18,688 --> 00:47:21,620

1195
00:47:21,620 --> 00:47:22,000
AUDIENCE: Hi.

1196
00:47:22,000 --> 00:47:25,112
ILYA GRIGORIK: [INAUDIBLE].

1197
00:47:25,112 --> 00:47:26,400
STEVE THAIR: Got a question
right there.

1198
00:47:26,400 --> 00:47:27,390
AUDIENCE: Yes.

1199
00:47:27,390 --> 00:47:28,380
STEVE THAIR: Tell
us your name.

1200
00:47:28,380 --> 00:47:29,560
AUDIENCE: Hi, my name
is [INAUDIBLE]

1201
00:47:29,560 --> 00:47:31,720
from [INAUDIBLE].

1202
00:47:31,720 --> 00:47:35,380
If I use a web socket for
mobile, does it drain the

1203
00:47:35,380 --> 00:47:35,990
battery further.

1204
00:47:35,990 --> 00:47:41,820
Or as long as it's an idle
connection, it doesn't drain?

1205
00:47:41,820 --> 00:47:42,140
ILYA GRIGORIK: Yes and no.

1206
00:47:42,140 --> 00:47:44,580
It depends on how you
use your web socket.

1207
00:47:44,580 --> 00:47:47,850
If you're sending periodic
messages every five seconds,

1208
00:47:47,850 --> 00:47:50,520
you'll keep your radio
active all the time.

1209
00:47:50,520 --> 00:47:51,810
I think what a lot
of people confuse

1210
00:47:51,810 --> 00:47:53,580
about is you can have--

1211
00:47:53,580 --> 00:47:56,280
so your radio can be
off, but the TCP

1212
00:47:56,280 --> 00:47:59,210
connection is still alive.

1213
00:47:59,210 --> 00:48:00,750
I think a lot of people
confuse this.

1214
00:48:00,750 --> 00:48:04,190
They think the moment my radio
turns off, I've lost my

1215
00:48:04,190 --> 00:48:05,080
website connection.

1216
00:48:05,080 --> 00:48:06,300
That is not the case.

1217
00:48:06,300 --> 00:48:08,460
Your actual TCP connection
is still

1218
00:48:08,460 --> 00:48:10,810
maintained by the carrier.

1219
00:48:10,810 --> 00:48:13,560
And it's just the radio link
that goes missing.

1220
00:48:13,560 --> 00:48:18,890
So I guess the best practice
for web socket traffic on

1221
00:48:18,890 --> 00:48:21,630
mobile is, send as few requests

1222
00:48:21,630 --> 00:48:22,780
or messages as possible.

1223
00:48:22,780 --> 00:48:24,810
Or if you do, just
as with regular

1224
00:48:24,810 --> 00:48:26,230
traffic, send it in bursts.

1225
00:48:26,230 --> 00:48:29,940

1226
00:48:29,940 --> 00:48:32,520
STEVE THAIR: There were quite
a few questions on this list

1227
00:48:32,520 --> 00:48:33,730
about radio stuff.

1228
00:48:33,730 --> 00:48:37,592
I think Ilya covered it
in his introduction.

1229
00:48:37,592 --> 00:48:39,520
[INAUDIBLE]

1230
00:48:39,520 --> 00:48:40,545
AUDIENCE: Hello, yeah,
so I'm Phil.

1231
00:48:40,545 --> 00:48:42,310
STEVE THAIR: Hold
on one second.

1232
00:48:42,310 --> 00:48:44,884
So there were a few questions
there about battery use and

1233
00:48:44,884 --> 00:48:45,646
this kind of stuff.

1234
00:48:45,646 --> 00:48:48,202
I think Ilya covered it in his
introduction, that you've got

1235
00:48:48,202 --> 00:48:48,862
to be aware of it.

1236
00:48:48,862 --> 00:48:53,070
Just one question from me, as
a rule of thumb, do we have

1237
00:48:53,070 --> 00:48:55,240
any idea of how quickly
the radios turn off?

1238
00:48:55,240 --> 00:48:57,040
Is it once every five seconds,
once every 10 seconds?

1239
00:48:57,040 --> 00:48:59,500
If I want to beacon analytic
stuff back,

1240
00:48:59,500 --> 00:49:01,093
what's a rule of thumb?

1241
00:49:01,093 --> 00:49:01,860
ANDY DAVIES: It's carrier
dependent.

1242
00:49:01,860 --> 00:49:04,010
STEVE THAIR: It's carrier
dependent.

1243
00:49:04,010 --> 00:49:05,260
JACKSON GABBARD: [INAUDIBLE].

1244
00:49:05,260 --> 00:49:10,423

1245
00:49:10,423 --> 00:49:13,079
We got yelled at by some carrier
who was saying that

1246
00:49:13,079 --> 00:49:15,400
we-- basically, a time out
from one of our logged in

1247
00:49:15,400 --> 00:49:18,950
delivery services was
just underneath

1248
00:49:18,950 --> 00:49:20,710
the radio time limit.

1249
00:49:20,710 --> 00:49:26,680
We were always just keeping it
awake, over and over again.

1250
00:49:26,680 --> 00:49:29,420
You have a lowered [? wait. ?]

1251
00:49:29,420 --> 00:49:31,488
The radio [? wait ?] will
stay awake longer than

1252
00:49:31,488 --> 00:49:31,760
you think it would.

1253
00:49:31,760 --> 00:49:33,590
ILYA GRIGORIK: So its
network configured.

1254
00:49:33,590 --> 00:49:36,700
There's a great case study
paper published by AT&T--

1255
00:49:36,700 --> 00:49:37,210
STEVE THAIR: Three
minutes left.

1256
00:49:37,210 --> 00:49:39,030
ILYA GRIGORIK: Three minutes.

1257
00:49:39,030 --> 00:49:39,540
AT&T--

1258
00:49:39,540 --> 00:49:40,885
I don't remember
the name of it.

1259
00:49:40,885 --> 00:49:43,930
If you just search for AT&T
radio performance, I think

1260
00:49:43,930 --> 00:49:44,670
you'll find it.

1261
00:49:44,670 --> 00:49:46,310
They have the Pandora
case study.

1262
00:49:46,310 --> 00:49:47,360
Pandora app--

1263
00:49:47,360 --> 00:49:48,480
you play the song.

1264
00:49:48,480 --> 00:49:49,390
They did the right thing.

1265
00:49:49,390 --> 00:49:51,520
They downloaded the whole
song up front.

1266
00:49:51,520 --> 00:49:52,640
So they streamed the
whole thing.

1267
00:49:52,640 --> 00:49:53,830
They turn off the radio.

1268
00:49:53,830 --> 00:49:55,900
And then every 60 seconds,
they would send a beacon,

1269
00:49:55,900 --> 00:49:58,100
which is just a measurement
beacon.

1270
00:49:58,100 --> 00:50:00,680
And they measured it, and they
figured out that those beacons

1271
00:50:00,680 --> 00:50:04,190
accounted for 0.2% percent of
the traffic and 40% of the

1272
00:50:04,190 --> 00:50:06,850
battery use.

1273
00:50:06,850 --> 00:50:07,700
They eliminated that.

1274
00:50:07,700 --> 00:50:11,340
They doubled their battery
performance.

1275
00:50:11,340 --> 00:50:12,380
AUDIENCE: Just a few points--

1276
00:50:12,380 --> 00:50:13,680
I'm Phil Leggetter
from Pusher.

1277
00:50:13,680 --> 00:50:14,710
So obviously we use
web sockets.

1278
00:50:14,710 --> 00:50:16,360
So I handle most
of our support.

1279
00:50:16,360 --> 00:50:19,985
So I just want to back up that
SSL connections when you're

1280
00:50:19,985 --> 00:50:22,270
using web sockets, definite.

1281
00:50:22,270 --> 00:50:24,470
In terms of the web sockets
dropping, I think that's

1282
00:50:24,470 --> 00:50:27,850
because most of the browsers
don't implement ping pong from

1283
00:50:27,850 --> 00:50:29,270
the specification.

1284
00:50:29,270 --> 00:50:32,210
So we've added that as
our protocol layer.

1285
00:50:32,210 --> 00:50:34,930
So we are sending messages
when maybe we

1286
00:50:34,930 --> 00:50:36,300
shouldn't have to.

1287
00:50:36,300 --> 00:50:38,010
But obviously, there
would be a message

1288
00:50:38,010 --> 00:50:39,110
natively from the browser.

1289
00:50:39,110 --> 00:50:43,220
So again, if you're using web
sockets in a browser, have a

1290
00:50:43,220 --> 00:50:46,250
ping pong time out.

1291
00:50:46,250 --> 00:50:47,820
And we haven't had a lot
of problems with that.

1292
00:50:47,820 --> 00:50:49,760
We've obviously got HTTP
fallback as well,

1293
00:50:49,760 --> 00:50:51,010
because we need it.

1294
00:50:51,010 --> 00:50:54,680

1295
00:50:54,680 --> 00:50:57,990
AUDIENCE: With regards to a
radio power state, would it be

1296
00:50:57,990 --> 00:51:01,250
worth for the developer to
have a means to tell the

1297
00:51:01,250 --> 00:51:05,040
browser, here is the request,
and send it only whenever you

1298
00:51:05,040 --> 00:51:07,540
have the radio in full power.

1299
00:51:07,540 --> 00:51:11,040
If it's an idle state, don't
wake it up just to send this,

1300
00:51:11,040 --> 00:51:12,510
because it's not urgent.

1301
00:51:12,510 --> 00:51:14,730
This is something I would
like to see, personally.

1302
00:51:14,730 --> 00:51:18,220
STEVE THAIR: Military style
microburst, basically.

1303
00:51:18,220 --> 00:51:20,830
AUDIENCE: And avoiding excessive
signaling traffic,

1304
00:51:20,830 --> 00:51:24,770
which is what happens when
you switch radio states.

1305
00:51:24,770 --> 00:51:26,690
It's in the best interest
of everyone not to

1306
00:51:26,690 --> 00:51:27,940
clutter mobile networks.

1307
00:51:27,940 --> 00:51:30,790

1308
00:51:30,790 --> 00:51:32,280
ILYA GRIGORIK: So the
answer is yes.

1309
00:51:32,280 --> 00:51:34,980
And this is actually something
that we discussed at the W3C

1310
00:51:34,980 --> 00:51:39,490
Performance Group meeting that
we had back in November.

1311
00:51:39,490 --> 00:51:41,980
There's this new proposal that
we're going to start working

1312
00:51:41,980 --> 00:51:45,270
on in, I think, around
May of this year--

1313
00:51:45,270 --> 00:51:46,370
it's our timeline--

1314
00:51:46,370 --> 00:51:47,560
called the beacon API.

1315
00:51:47,560 --> 00:51:49,920
And the idea being that,
it's exactly that.

1316
00:51:49,920 --> 00:51:54,400
I want to send a request, like
an analytics request, that I

1317
00:51:54,400 --> 00:51:56,320
don't need to dispatch
right now.

1318
00:51:56,320 --> 00:51:58,770
Dispatch it any time you want.

1319
00:51:58,770 --> 00:52:00,630
In fact, even if you lose
it, maybe it's not

1320
00:52:00,630 --> 00:52:02,430
the end of the world.

1321
00:52:02,430 --> 00:52:04,180
But just don't wake
up my battery.

1322
00:52:04,180 --> 00:52:09,350
So it's almost like the async
keyword on an XHR to say,

1323
00:52:09,350 --> 00:52:10,900
sometime, make this happen.

1324
00:52:10,900 --> 00:52:13,530

1325
00:52:13,530 --> 00:52:18,890
STEVE THAIR: That's basically
the time up

1326
00:52:18,890 --> 00:52:19,750
for the network panel.

1327
00:52:19,750 --> 00:52:22,800
So I'd like to thank Jackson,
John, Andy, and Ilya.

1328
00:52:22,800 --> 00:52:28,440

1
00:00:00,000 --> 00:00:05,203

2
00:00:05,203 --> 00:00:07,100
AMBER WEINBERG: Hello,
everybody.

3
00:00:07,100 --> 00:00:08,546
Can you hear me?

4
00:00:08,546 --> 00:00:09,010
All right.

5
00:00:09,010 --> 00:00:10,200
Was lunch great?

6
00:00:10,200 --> 00:00:12,250
Lunch was great, huh?

7
00:00:12,250 --> 00:00:14,314
So in this panel we
will be talking

8
00:00:14,314 --> 00:00:16,010
about responsive layout.

9
00:00:16,010 --> 00:00:18,520
And George Crawford
is our opener.

10
00:00:18,520 --> 00:00:22,440
He is the Lead Developer of The
Economist's HTML5 project

11
00:00:22,440 --> 00:00:25,560
and the maintainer of FT
Columnflow, which is this

12
00:00:25,560 --> 00:00:28,350
really cool magazine-like thing
that I hope he will

13
00:00:28,350 --> 00:00:30,770
explain to all of us.

14
00:00:30,770 --> 00:00:32,840
Then we have Razvan.

15
00:00:32,840 --> 00:00:37,720
He works on CSS Regions, CSS
Exclusions, and other ways of

16
00:00:37,720 --> 00:00:40,580
improving digital publishing
on the web.

17
00:00:40,580 --> 00:00:42,810
Then we have Andy over here.

18
00:00:42,810 --> 00:00:46,110
He was formerly the Lead
Engineer on Bing maps and then

19
00:00:46,110 --> 00:00:49,470
worked for the awesome Clearleft
offices in Brighton.

20
00:00:49,470 --> 00:00:54,580
And currently, he does the
client-side work at Guardian.

21
00:00:54,580 --> 00:00:57,320
So George, if you want to come
up and give your presentation.

22
00:00:57,320 --> 00:01:06,330

23
00:01:06,330 --> 00:01:09,487
GEORGE CRAWFORD: So responsive
design is a bit of a buzzword.

24
00:01:09,487 --> 00:01:12,790
I'm sure you're all familiar
with it, but it sort of lacks

25
00:01:12,790 --> 00:01:14,040
definition.

26
00:01:14,040 --> 00:01:16,976

27
00:01:16,976 --> 00:01:19,990
First slide is coming up.

28
00:01:19,990 --> 00:01:22,860
So responsive design,
it lacks definition.

29
00:01:22,860 --> 00:01:24,750
We need some clarity.

30
00:01:24,750 --> 00:01:29,105
I'm sure you've all thought
from time to time about

31
00:01:29,105 --> 00:01:32,430
various considerations we need
to take in mind when thinking

32
00:01:32,430 --> 00:01:34,757
about responsive development.

33
00:01:34,757 --> 00:01:36,720
I liked a quote on
Andy's blog--

34
00:01:36,720 --> 00:01:39,710
"Responsiveness is what a
website does when it's loaded

35
00:01:39,710 --> 00:01:43,080
into an unknown browser on an
unknown device by an unknown

36
00:01:43,080 --> 00:01:46,970
individual." So websites need
to respond to the device and

37
00:01:46,970 --> 00:01:49,890
the environment and to the user
and to many other factors

38
00:01:49,890 --> 00:01:52,290
to offer the best experience.

39
00:01:52,290 --> 00:01:54,700
But dealing with all of these
considerations is far too

40
00:01:54,700 --> 00:01:57,430
broad for this session, so we're
just going to talk about

41
00:01:57,430 --> 00:01:58,680
responsive layout.

42
00:01:58,680 --> 00:02:01,614

43
00:02:01,614 --> 00:02:05,770
So here's a typical example of
a site that really thinks

44
00:02:05,770 --> 00:02:09,695
about responsive layout
that's only really

45
00:02:09,695 --> 00:02:11,862
based on viewport width.

46
00:02:11,862 --> 00:02:15,666
This is something I stole from
Amber's blog posts, the United

47
00:02:15,666 --> 00:02:16,250
Pixelworkers.

48
00:02:16,250 --> 00:02:20,630
Yeah, it's funky, and it's
a really nice sort of

49
00:02:20,630 --> 00:02:21,991
interactive experience.

50
00:02:21,991 --> 00:02:26,200
And that doesn't really answer
all of the questions that we

51
00:02:26,200 --> 00:02:28,045
need to answer.

52
00:02:28,045 --> 00:02:30,410
So we don't need to just
consider the aesthetics of a

53
00:02:30,410 --> 00:02:32,690
layout but also the whole
effect on the reading

54
00:02:32,690 --> 00:02:35,760
experience and the way that
a user will [INAUDIBLE]

55
00:02:35,760 --> 00:02:37,691
the sites.

56
00:02:37,691 --> 00:02:41,120
Like, if we need to do extra
processing to achieve a better

57
00:02:41,120 --> 00:02:44,640
layout, we might need to wait
longer for the network, we

58
00:02:44,640 --> 00:02:47,450
might need to wait for the CPU,
we might decrease the

59
00:02:47,450 --> 00:02:49,560
frame weight.

60
00:02:49,560 --> 00:02:52,284
So following the discussion we
had earlier in the network

61
00:02:52,284 --> 00:02:56,000
panel, we need to consider
things like this.

62
00:02:56,000 --> 00:02:58,640
With the Economist web app that
I've been working on, our

63
00:02:58,640 --> 00:03:02,690
first page load, we just use
real links to real images.

64
00:03:02,690 --> 00:03:06,290
But as the user navigates to
an addition, subsequent

65
00:03:06,290 --> 00:03:09,110
articles, we download
with Ajax requests.

66
00:03:09,110 --> 00:03:12,160
And we actually send the
dimensions of the viewports in

67
00:03:12,160 --> 00:03:15,180
the request, so that images can
be dynamically re-sized on

68
00:03:15,180 --> 00:03:19,240
the server, A64-encoded, added
in line to the HTML.

69
00:03:19,240 --> 00:03:20,880
Now, there are obviously
pros and cons to

70
00:03:20,880 --> 00:03:22,680
that, as we've discussed.

71
00:03:22,680 --> 00:03:28,410
But it has a great advantage in
that we don't need to do so

72
00:03:28,410 --> 00:03:29,950
much work on the client.

73
00:03:29,950 --> 00:03:34,680
And also, once the first type of
device, like the first iPad

74
00:03:34,680 --> 00:03:38,940
or the first PlayBook, has
rendered that article, we can

75
00:03:38,940 --> 00:03:41,510
store it in the cache
for faster

76
00:03:41,510 --> 00:03:43,740
performance in the future.

77
00:03:43,740 --> 00:03:47,130
So my experience is mostly with
the Financial Times and

78
00:03:47,130 --> 00:03:50,340
the Economist, which are very
much reading platforms.

79
00:03:50,340 --> 00:03:53,430
So let's look at some of the
problems that newspapers and

80
00:03:53,430 --> 00:03:56,730
magazines present on the web.

81
00:03:56,730 --> 00:04:00,440
So the FT wanted a column
layout, which is obviously

82
00:04:00,440 --> 00:04:03,210
inspired by their
print edition.

83
00:04:03,210 --> 00:04:06,160
CSS columns is useful, but
it's not enough, even to

84
00:04:06,160 --> 00:04:08,210
create a simple layout
like this.

85
00:04:08,210 --> 00:04:10,940
This headline that spans column
one and two, you can't

86
00:04:10,940 --> 00:04:12,120
do that with CSS columns.

87
00:04:12,120 --> 00:04:14,810
You have the options to span all
of the columns or one of

88
00:04:14,810 --> 00:04:15,920
the columns.

89
00:04:15,920 --> 00:04:18,950
So we need to turn to JavaScript
straightaway.

90
00:04:18,950 --> 00:04:22,630
And our first approach was to
iterate through every single

91
00:04:22,630 --> 00:04:26,680
word in a paragraph, even in
an optimized way, find out

92
00:04:26,680 --> 00:04:29,990
where to cut the paragraph, and
move the contents to the

93
00:04:29,990 --> 00:04:30,610
next column.

94
00:04:30,610 --> 00:04:34,340
You know that dealing with
text is really bad for

95
00:04:34,340 --> 00:04:36,650
performance, so we looked
into other ways of

96
00:04:36,650 --> 00:04:37,660
speeding this up.

97
00:04:37,660 --> 00:04:39,890
And we developed
FT Columnflow.

98
00:04:39,890 --> 00:04:41,970
This is Columnflow in action
on the Economist's app.

99
00:04:41,970 --> 00:04:45,170
And actually, the FT, the page
before, was also running

100
00:04:45,170 --> 00:04:46,630
Columnflow.

101
00:04:46,630 --> 00:04:50,620
And if we look a bit closer at
what's happening here, we can

102
00:04:50,620 --> 00:04:53,130
see the paragraphs highlighted
in red.

103
00:04:53,130 --> 00:04:55,420
And you can see that the
paragraph at the bottom of

104
00:04:55,420 --> 00:04:58,060
column one has been cloned
and moved to the

105
00:04:58,060 --> 00:04:59,840
top of column two.

106
00:04:59,840 --> 00:05:03,350
So yes, we have twice the
weight in the DOM.

107
00:05:03,350 --> 00:05:07,070
But if we hide the overflow,
we get a nice result.

108
00:05:07,070 --> 00:05:09,970
And it's actually much faster
than iterating through each

109
00:05:09,970 --> 00:05:11,220
word in the paragraph.

110
00:05:11,220 --> 00:05:14,140

111
00:05:14,140 --> 00:05:16,290
So Columnflow has some other
features which really help

112
00:05:16,290 --> 00:05:17,600
with responsive layout.

113
00:05:17,600 --> 00:05:21,920
You can add classes on to the
flowed elements to stop

114
00:05:21,920 --> 00:05:24,210
elements wrapping, so by
default, for example, it

115
00:05:24,210 --> 00:05:26,060
doesn't wrap images.

116
00:05:26,060 --> 00:05:28,210
You can also keep headings
attached to the paragraph

117
00:05:28,210 --> 00:05:30,350
which follows them.

118
00:05:30,350 --> 00:05:33,030
And you can position fixed
elements like headlines and

119
00:05:33,030 --> 00:05:36,440
images on a particular page, a
particular column, spanning

120
00:05:36,440 --> 00:05:37,930
any number of columns.

121
00:05:37,930 --> 00:05:41,100
Columnflow will try and avoid
orphaned lines at the ends of

122
00:05:41,100 --> 00:05:41,525
paragraphs.

123
00:05:41,525 --> 00:05:44,790
So it would prefer two lines in
the next column rather than

124
00:05:44,790 --> 00:05:47,420
one line on its own.

125
00:05:47,420 --> 00:05:51,320
And it will try and determine
the vertical grid height and

126
00:05:51,320 --> 00:05:54,120
add padding dynamically to
images and headlines so that

127
00:05:54,120 --> 00:05:59,260
they conform to the grid, so
that you get a nice vertical

128
00:05:59,260 --> 00:06:02,036
grid running through the page.

129
00:06:02,036 --> 00:06:04,100
Columnflow does have
some side effects.

130
00:06:04,100 --> 00:06:05,680
It's not perfect.

131
00:06:05,680 --> 00:06:09,380
And one interesting one is
that fonts must be loaded

132
00:06:09,380 --> 00:06:11,020
before it runs.

133
00:06:11,020 --> 00:06:14,240
If a font loads after Columnflow
has laid out the

134
00:06:14,240 --> 00:06:17,190
absolute position of each
paragraph, then you get into

135
00:06:17,190 --> 00:06:18,350
big problems.

136
00:06:18,350 --> 00:06:21,190
You can see here that there's
clipping at the bottom of

137
00:06:21,190 --> 00:06:23,730
column one and at the
top of column two.

138
00:06:23,730 --> 00:06:26,290
So in the Economist, we
actually use a font

139
00:06:26,290 --> 00:06:31,090
pre-loader, which presents a
whole load of other problems.

140
00:06:31,090 --> 00:06:34,525
Anyone who's looked into
determining precisely when a

141
00:06:34,525 --> 00:06:35,850
font loads, it's a nightmare.

142
00:06:35,850 --> 00:06:39,230
And there's a CSS3 fonts module,
which will hopefully,

143
00:06:39,230 --> 00:06:41,480
in the future, add an
onload event or

144
00:06:41,480 --> 00:06:43,160
something similar for fonts.

145
00:06:43,160 --> 00:06:45,930
But not much browser support
yet, of course.

146
00:06:45,930 --> 00:06:49,130
So taking it further, how
might we improve the

147
00:06:49,130 --> 00:06:50,390
Economist's responsive layout?

148
00:06:50,390 --> 00:06:53,530
I've hacked the code base
a little bit, added some

149
00:06:53,530 --> 00:06:54,150
experimental enhance--

150
00:06:54,150 --> 00:06:58,180
[AUDIO CUTS OUT]

151
00:06:58,180 --> 00:07:00,500
GEORGE CRAWFORD: So this
article layout is

152
00:07:00,500 --> 00:07:02,880
designed for the iPad.

153
00:07:02,880 --> 00:07:05,630
And what that means is that
the number of columns is

154
00:07:05,630 --> 00:07:06,780
hard-coded.

155
00:07:06,780 --> 00:07:09,460
And even the aspect ratio of
the image is determined,

156
00:07:09,460 --> 00:07:11,685
editorially, for the
iPad layout.

157
00:07:11,685 --> 00:07:14,360

158
00:07:14,360 --> 00:07:17,600
So when we launched on hardware
with a different

159
00:07:17,600 --> 00:07:20,760
aspect ratio, the easiest
solution is to add white

160
00:07:20,760 --> 00:07:22,410
gutters on the sides.

161
00:07:22,410 --> 00:07:26,530
It's not a terrible solution,
but it's losing a little

162
00:07:26,530 --> 00:07:30,310
element of that immersive
experience.

163
00:07:30,310 --> 00:07:32,200
So why can't we add some
flexibility to this?

164
00:07:32,200 --> 00:07:34,380
We don't need to hard-code
the number of columns.

165
00:07:34,380 --> 00:07:38,310
We can determine the optimum
number of columns by thinking

166
00:07:38,310 --> 00:07:41,220
about things like the
typographic measure.

167
00:07:41,220 --> 00:07:44,280
So the measure is the number
of characters in a line.

168
00:07:44,280 --> 00:07:47,400
And as the font size changes,
the number of characters you

169
00:07:47,400 --> 00:07:49,730
can fit in a line will
also change.

170
00:07:49,730 --> 00:07:53,310
So if we go for an ideal
typographic measure, then we

171
00:07:53,310 --> 00:07:57,190
can also, based on the viewport,
determine the ideal

172
00:07:57,190 --> 00:07:59,260
number of columns.

173
00:07:59,260 --> 00:08:01,230
We can improve legibility
a bit by

174
00:08:01,230 --> 00:08:03,350
modifying the line height.

175
00:08:03,350 --> 00:08:06,840
So for longer lines of text,
it's a generally-accepted

176
00:08:06,840 --> 00:08:10,280
principle that you want a bit
more space between lines, and

177
00:08:10,280 --> 00:08:13,240
for shorter lines, a bit
less line height.

178
00:08:13,240 --> 00:08:15,700
These are quite well-known print
concepts, but they're

179
00:08:15,700 --> 00:08:19,760
only slowly coming to the web
as our devices provide more

180
00:08:19,760 --> 00:08:21,880
and more immersive reading
experiences.

181
00:08:21,880 --> 00:08:23,720
And also, there's some
technology that we're

182
00:08:23,720 --> 00:08:25,760
waiting for, too.

183
00:08:25,760 --> 00:08:29,110
We can vary the number of
columns that the image spans

184
00:08:29,110 --> 00:08:31,100
based on the total number
of columns--

185
00:08:31,100 --> 00:08:34,380
and also the width and also the
height of the viewport,

186
00:08:34,380 --> 00:08:38,289
because we have to take the
aspect ratio into account.

187
00:08:38,289 --> 00:08:41,850
So this is the first draft.

188
00:08:41,850 --> 00:08:43,830
It's making better use of
the available space.

189
00:08:43,830 --> 00:08:45,180
It's more immersive.

190
00:08:45,180 --> 00:08:49,000
It feels like the app has been
tailor-made for your screen.

191
00:08:49,000 --> 00:08:52,670
And it does increase
the legibility.

192
00:08:52,670 --> 00:08:55,200
I'll just run through a range
of viewport sizes.

193
00:08:55,200 --> 00:09:00,160
You can see some of the things
that we're changing.

194
00:09:00,160 --> 00:09:03,650
So as the line length increases,
it goes too far for

195
00:09:03,650 --> 00:09:07,130
the ideal measure, so we
add in extra columns.

196
00:09:07,130 --> 00:09:10,070
And you can see the line height
changing slightly based

197
00:09:10,070 --> 00:09:11,910
on the length of the lines.

198
00:09:11,910 --> 00:09:14,810
And that image started off
spanning one column, then to

199
00:09:14,810 --> 00:09:16,060
two, then to three.

200
00:09:16,060 --> 00:09:19,380

201
00:09:19,380 --> 00:09:22,180
So the same logic can be applied
to a static viewport,

202
00:09:22,180 --> 00:09:24,230
but when the user is changing
the font size.

203
00:09:24,230 --> 00:09:28,740

204
00:09:28,740 --> 00:09:32,020
So as we increase the font size,
we have fewer characters

205
00:09:32,020 --> 00:09:34,675
per line, so we actually
need fewer columns.

206
00:09:34,675 --> 00:09:43,580

207
00:09:43,580 --> 00:09:45,660
We can go even further,
improving the article's

208
00:09:45,660 --> 00:09:46,310
typesetting.

209
00:09:46,310 --> 00:09:48,900
We can learn from techniques
used to layout newspaper

210
00:09:48,900 --> 00:09:51,550
columns like hyphenation
and justification.

211
00:09:51,550 --> 00:09:54,600
So the default here is a ragged
right edge, which with

212
00:09:54,600 --> 00:09:57,990
a narrow column gets a little
bit difficult to read.

213
00:09:57,990 --> 00:10:04,040
But if you set justification,
it doesn't help [INAUDIBLE].

214
00:10:04,040 --> 00:10:07,050
We get these large areas of
white space, and they can

215
00:10:07,050 --> 00:10:10,560
sometimes form very
ugly rivers.

216
00:10:10,560 --> 00:10:13,570
So we can add in hyphenation.

217
00:10:13,570 --> 00:10:15,990
CSS Hyphenation, again, doesn't
have great browser

218
00:10:15,990 --> 00:10:18,350
support, so I've used a
JavaScript library here.

219
00:10:18,350 --> 00:10:21,600
And performance analysts
might worry about this.

220
00:10:21,600 --> 00:10:25,660
It took 10 milliseconds to
hyphenate this entire article.

221
00:10:25,660 --> 00:10:28,550
So I think it's worth
considering

222
00:10:28,550 --> 00:10:32,360
for text-heavy layouts.

223
00:10:32,360 --> 00:10:36,180
Now, we mentioned in the network
session earlier that

224
00:10:36,180 --> 00:10:38,670
we might be able to do
more with images

225
00:10:38,670 --> 00:10:42,320
and responsive workflows.

226
00:10:42,320 --> 00:10:44,650
So maybe it's worth considering
on the editorial

227
00:10:44,650 --> 00:10:48,290
side that they might even embed
metadata into image

228
00:10:48,290 --> 00:10:50,830
files with a selection
of possible crops.

229
00:10:50,830 --> 00:10:54,170
So you might be able to choose,
on the client side, a

230
00:10:54,170 --> 00:10:55,640
range of aspect ratios.

231
00:10:55,640 --> 00:10:57,960
Some may be a tighter
crop if the image is

232
00:10:57,960 --> 00:10:59,280
going to be very small.

233
00:10:59,280 --> 00:11:02,020
And then you can determine,
based on the size and the

234
00:11:02,020 --> 00:11:04,890
aspect ratio of the space you
have, which would be the best

235
00:11:04,890 --> 00:11:06,560
one of those crops to use.

236
00:11:06,560 --> 00:11:10,820
So we can improve this layout by
maybe having a shorter and

237
00:11:10,820 --> 00:11:13,480
wider image or having a tighter
crop that can just

238
00:11:13,480 --> 00:11:16,720
occupy one column.

239
00:11:16,720 --> 00:11:19,480
So what technology do we have
around for our disposal for

240
00:11:19,480 --> 00:11:20,625
responsive layouts?

241
00:11:20,625 --> 00:11:21,875
And what's coming up?

242
00:11:21,875 --> 00:11:27,738

243
00:11:27,738 --> 00:11:31,220
You've probably all seen grids
like this, the 960 Grid and

244
00:11:31,220 --> 00:11:32,410
Twitter's Bootstrap.

245
00:11:32,410 --> 00:11:33,990
These don't give a perfect
solution for

246
00:11:33,990 --> 00:11:34,740
the responsive layout.

247
00:11:34,740 --> 00:11:37,920
They're either completely fixed
width, or they only

248
00:11:37,920 --> 00:11:40,340
adapt a little bit and then
instantly snap to a single

249
00:11:40,340 --> 00:11:42,205
column on mobile devices.

250
00:11:42,205 --> 00:11:45,030

251
00:11:45,030 --> 00:11:46,800
So we've got some emerging
technologies which

252
00:11:46,800 --> 00:11:47,810
will help us a lot.

253
00:11:47,810 --> 00:11:51,250
In the Economist and the FT,
we're using Flexbox to help

254
00:11:51,250 --> 00:11:54,430
with layouts, it's very powerful
and can be quite

255
00:11:54,430 --> 00:11:55,535
complicated.

256
00:11:55,535 --> 00:11:59,300
And then the CSS Grid Layout
module, which is only

257
00:11:59,300 --> 00:12:01,720
currently in Internet Explorer,
is going to help a

258
00:12:01,720 --> 00:12:05,492
lot with designing responsive
grid layouts.

259
00:12:05,492 --> 00:12:07,840
And then Razvan's team at Adobe
are working on some

260
00:12:07,840 --> 00:12:11,530
really nice proposals for
new CSS modules--

261
00:12:11,530 --> 00:12:15,150
the CSS Regions and Pagination
templates for rich,

262
00:12:15,150 --> 00:12:16,910
magazine-like layouts.

263
00:12:16,910 --> 00:12:20,200
So I've devoted quite a lot of
time to Columnflow, but with

264
00:12:20,200 --> 00:12:21,590
any luck, modules
like this will

265
00:12:21,590 --> 00:12:23,390
eventually make it redundant.

266
00:12:23,390 --> 00:12:26,190
Until we get browser support,
of course, we do need

267
00:12:26,190 --> 00:12:30,510
JavaScript polyfills
to do the same job.

268
00:12:30,510 --> 00:12:33,970
And then the CSS Exclusions,
allowing you to flow text

269
00:12:33,970 --> 00:12:38,210
inside and outside shapes
and even images.

270
00:12:38,210 --> 00:12:42,600

271
00:12:42,600 --> 00:12:45,320
And we've got technology like
seamless iframes, web

272
00:12:45,320 --> 00:12:48,970
components, the shadow DOM,
custom elements-- which, when

273
00:12:48,970 --> 00:12:52,900
they're combined, might lead
to give us context-agnostic

274
00:12:52,900 --> 00:12:56,700
encapsulated modules of HTML
and CSS which can adapt and

275
00:12:56,700 --> 00:12:59,600
respond to their available space
rather than actually

276
00:12:59,600 --> 00:13:01,840
worrying about the viewports
so much.

277
00:13:01,840 --> 00:13:04,970
So we're looking into this
a lot for the FT web app,

278
00:13:04,970 --> 00:13:07,600
creating individually-styled
modules which can be dropped

279
00:13:07,600 --> 00:13:10,240
into any part of any
page without

280
00:13:10,240 --> 00:13:12,590
interfering with other elements.

281
00:13:12,590 --> 00:13:14,930
So hopefully that's given you
some ideas about responsive

282
00:13:14,930 --> 00:13:16,890
layouts for magazines
and newspapers.

283
00:13:16,890 --> 00:13:18,840
But what about the
other problems

284
00:13:18,840 --> 00:13:20,310
that other sites have?

285
00:13:20,310 --> 00:13:23,320
And how else do people deal
with responsive layouts?

286
00:13:23,320 --> 00:13:26,755
I'll hand it back to Amber.

287
00:13:26,755 --> 00:13:33,185
[APPLAUSE]

288
00:13:33,185 --> 00:13:37,065

289
00:13:37,065 --> 00:13:38,050
AMBER WEINBERG: All right.

290
00:13:38,050 --> 00:13:41,630
So our first question is
actually going to be my

291
00:13:41,630 --> 00:13:44,770
question, because it is a
problem that I have been

292
00:13:44,770 --> 00:13:48,050
facing lately and I'm sure
many other devs have.

293
00:13:48,050 --> 00:13:52,410
Kind of with the performance
talk as well, but is it worth

294
00:13:52,410 --> 00:13:57,050
taking the performance hit and
extra time deving to serve up

295
00:13:57,050 --> 00:13:58,350
retina images?

296
00:13:58,350 --> 00:14:01,000
Or should we only pay attention
to retina images

297
00:14:01,000 --> 00:14:03,490
when it's really important--
for things like icons or

298
00:14:03,490 --> 00:14:04,880
photo-heavy websites?

299
00:14:04,880 --> 00:14:08,190
Because a lot of sites don't
really matter as far

300
00:14:08,190 --> 00:14:11,840
as the images go.

301
00:14:11,840 --> 00:14:14,091
So George?

302
00:14:14,091 --> 00:14:16,980
GEORGE CRAWFORD: Well, my
experience with the FT and the

303
00:14:16,980 --> 00:14:20,420
Economist is that first of all,
it is a shock to see your

304
00:14:20,420 --> 00:14:25,390
site on a retina display when
you haven't prepared for it.

305
00:14:25,390 --> 00:14:28,730
It's really interesting, the
difference between a large

306
00:14:28,730 --> 00:14:31,550
JPEG image, like the ones I
was showing, and the tiny

307
00:14:31,550 --> 00:14:32,960
interface icons.

308
00:14:32,960 --> 00:14:37,020
I think because we're so used to
really nice font rendering

309
00:14:37,020 --> 00:14:44,500
and really nice PDF support,
just seeing a PNG, a tiny file

310
00:14:44,500 --> 00:14:47,030
that could easily be doubled
without worrying too much

311
00:14:47,030 --> 00:14:49,600
about the overhead, it really
makes a big difference.

312
00:14:49,600 --> 00:14:54,250
And I think you can get away
with non-retina, large JPEGs.

313
00:14:54,250 --> 00:14:56,460
And I think that's definitely
the first step.

314
00:14:56,460 --> 00:15:00,020
And maybe then look into how
much overhead you're going to

315
00:15:00,020 --> 00:15:01,400
add with large feature images.

316
00:15:01,400 --> 00:15:03,920
But of course, some sites are
not using feature images to

317
00:15:03,920 --> 00:15:05,370
the extent that we do.

318
00:15:05,370 --> 00:15:08,790
ANDY HUME: Yeah, I think it
depends exactly what you're

319
00:15:08,790 --> 00:15:12,240
trying to do on a given
site or a given page.

320
00:15:12,240 --> 00:15:15,260
Clearly, a lot of the stuff
in the newspapers is about

321
00:15:15,260 --> 00:15:18,690
high-resolution imagery, and
we have apps that are

322
00:15:18,690 --> 00:15:22,500
specifically tailored to showing
those in engaging,

323
00:15:22,500 --> 00:15:23,180
beautiful ways.

324
00:15:23,180 --> 00:15:26,880
So those do need to be the
high-resolution stuff.

325
00:15:26,880 --> 00:15:31,560
I think for the more Chrome
interface stuff, I'm sort of

326
00:15:31,560 --> 00:15:33,350
in two minds.

327
00:15:33,350 --> 00:15:36,850
I think as much as you can get
the browser to render this

328
00:15:36,850 --> 00:15:42,180
stuff itself natively and get
away from images with some of

329
00:15:42,180 --> 00:15:45,830
the visual stuff in CSS, making
sure you're using

330
00:15:45,830 --> 00:15:48,330
rounded corners and drop
shadows as much as--

331
00:15:48,330 --> 00:15:50,180
GEORGE CRAWFORD: And then icon
fonts and things like that.

332
00:15:50,180 --> 00:15:50,620
ANDY HUME: Yeah.

333
00:15:50,620 --> 00:15:54,200
And SVG to a degree as well.

334
00:15:54,200 --> 00:15:55,880
And I think it depends.

335
00:15:55,880 --> 00:15:58,420
Some icons, I'm not that
fussed about them

336
00:15:58,420 --> 00:15:59,830
not looking as great.

337
00:15:59,830 --> 00:16:02,900
I think things like the logo
is where you notice it, and

338
00:16:02,900 --> 00:16:04,480
all other people notice
it as well.

339
00:16:04,480 --> 00:16:09,030
GEORGE CRAWFORD: I've worked
with the Economist on getting

340
00:16:09,030 --> 00:16:12,700
the articles to work offline,
and the number of stages you

341
00:16:12,700 --> 00:16:15,630
go through where you add
size to the data.

342
00:16:15,630 --> 00:16:22,215
So if we A64-encode our images
and then store them in Web SQL

343
00:16:22,215 --> 00:16:29,030
or IndexedDB, which tends to be
A16-encoded, every time you

344
00:16:29,030 --> 00:16:30,790
encode the image differently,
you're adding

345
00:16:30,790 --> 00:16:31,790
massively to the overhead.

346
00:16:31,790 --> 00:16:35,030
So if we then double the size
or quadruple the size of the

347
00:16:35,030 --> 00:16:37,980
image file as well, this
is a big issue.

348
00:16:37,980 --> 00:16:41,840
But as I say, I think interface
icons are really

349
00:16:41,840 --> 00:16:45,548
important and other
things not so.

350
00:16:45,548 --> 00:16:46,460
AMBER WEINBERG: OK.

351
00:16:46,460 --> 00:16:50,880
So our own Andrew over here
asked an important question.

352
00:16:50,880 --> 00:16:55,360
Is increased page weight an
inevitable side effect of

353
00:16:55,360 --> 00:16:59,310
responsive web design versus
just a regular

354
00:16:59,310 --> 00:17:02,162
separate mobile site?

355
00:17:02,162 --> 00:17:02,860
RAZVAN CALIMAN: Yeah.

356
00:17:02,860 --> 00:17:06,930
So if you talk about responsive
websites and you

357
00:17:06,930 --> 00:17:10,220
look at images, for example, or
written images, there's no

358
00:17:10,220 --> 00:17:12,490
clear-cut way of getting
around that.

359
00:17:12,490 --> 00:17:14,924
Yes, you will have increased
file size with

360
00:17:14,924 --> 00:17:16,859
the responsive website.

361
00:17:16,859 --> 00:17:20,869
But then again, as Ilya and
other people mentioned

362
00:17:20,869 --> 00:17:24,720
earlier, the overhead you have
afterwards is just some fishy

363
00:17:24,720 --> 00:17:26,109
amount, some CSS.

364
00:17:26,109 --> 00:17:29,070
And we're hoping to have the
extra markup you're using for

365
00:17:29,070 --> 00:17:36,330
responsive layouts fixed in
proposals such as grid layout

366
00:17:36,330 --> 00:17:37,080
or Flexbox.

367
00:17:37,080 --> 00:17:40,870
Because that's mainly where
you're adding extra markup or

368
00:17:40,870 --> 00:17:43,770
extra CSS to handle
various parts of

369
00:17:43,770 --> 00:17:45,110
your responsive layout.

370
00:17:45,110 --> 00:17:50,580
So in terms of adding size,
yes, I think right now

371
00:17:50,580 --> 00:17:55,460
responsive websites do incur a
price penalty in file size if

372
00:17:55,460 --> 00:17:57,620
you want to deal with different
size images, which

373
00:17:57,620 --> 00:18:01,290
you should if you do care
about the performance on

374
00:18:01,290 --> 00:18:03,592
different devices and
different browsers.

375
00:18:03,592 --> 00:18:06,610
ANDY HUME: I think you've got to
be careful about taking it

376
00:18:06,610 --> 00:18:08,060
to extremes, though.

377
00:18:08,060 --> 00:18:12,270
Because you can start going down
a road where you end up

378
00:18:12,270 --> 00:18:15,380
polyfilling things like
media queries in all

379
00:18:15,380 --> 00:18:16,790
the versions of [? IE8, ?]

380
00:18:16,790 --> 00:18:19,605
which there are libraries
to do that, and

381
00:18:19,605 --> 00:18:20,360
they do it very well.

382
00:18:20,360 --> 00:18:24,440
But I think that's kind
of missing the point.

383
00:18:24,440 --> 00:18:27,820
If you have to add more and more
of these pieces of these

384
00:18:27,820 --> 00:18:31,580
JavaScript libraries and
polyfills and the like to make

385
00:18:31,580 --> 00:18:34,320
stuff responsive, I think you
will end up in a situation

386
00:18:34,320 --> 00:18:38,540
where your responsive site's
mobile view, if you like, is

387
00:18:38,540 --> 00:18:40,900
worse than it would have been if
you had just optimized for

388
00:18:40,900 --> 00:18:42,130
mobile in the first place.

389
00:18:42,130 --> 00:18:43,280
RAZVAN CALIMAN: Yeah.

390
00:18:43,280 --> 00:18:44,872
I totally agree on this.

391
00:18:44,872 --> 00:18:48,360
Of course you need to look at
the device, the context, and

392
00:18:48,360 --> 00:18:49,910
where people are going
to use it.

393
00:18:49,910 --> 00:18:52,770
Of course it doesn't make any
sense to polyfill for media

394
00:18:52,770 --> 00:18:56,190
queries and the like.

395
00:18:56,190 --> 00:19:01,040
So yeah, I do agree.

396
00:19:01,040 --> 00:19:03,410
You find your lowest common
denominator, and you build up

397
00:19:03,410 --> 00:19:05,640
from that, but you ensure you
give your users a good

398
00:19:05,640 --> 00:19:07,170
experience.

399
00:19:07,170 --> 00:19:11,220
The point is that I am in
favor of quite a lot of

400
00:19:11,220 --> 00:19:14,120
polyfills right now, because
there's a lot of technology

401
00:19:14,120 --> 00:19:16,800
that hasn't been tested quite
yet, and everybody's waiting

402
00:19:16,800 --> 00:19:18,810
for it to come into browsers.

403
00:19:18,810 --> 00:19:21,550
And polyfills give you a very
good opportunity to build the

404
00:19:21,550 --> 00:19:24,610
technology experiment with it
and learn that some use cases

405
00:19:24,610 --> 00:19:25,700
just don't fit--

406
00:19:25,700 --> 00:19:28,210
like, see the AppCache model.

407
00:19:28,210 --> 00:19:30,570
ANDY HUME: Or the Columnflow
stuff.

408
00:19:30,570 --> 00:19:34,430
GEORGE CRAWFORD: I think at
every stage of the way we need

409
00:19:34,430 --> 00:19:38,830
to bear in mind the good
user interface as well.

410
00:19:38,830 --> 00:19:42,540
As soon as people get on to the
bandwagon of responsive

411
00:19:42,540 --> 00:19:47,440
design and layout and
development, it's so easy to

412
00:19:47,440 --> 00:19:50,780
add bells and whistles that
really aren't necessary or to

413
00:19:50,780 --> 00:19:54,810
change the feature image for
each 50 pixel breakpoint as

414
00:19:54,810 --> 00:19:57,860
the user resizes their browser
window and things like that.

415
00:19:57,860 --> 00:20:01,720
And you have to really consider
how your users are

416
00:20:01,720 --> 00:20:05,300
going to work through the site
and whether some of the

417
00:20:05,300 --> 00:20:08,186
enhancements are really
necessary.

418
00:20:08,186 --> 00:20:11,870
AMBER WEINBERG: Well, kind
of related to polyfills--

419
00:20:11,870 --> 00:20:15,740
the newest CSS3 specs and stuff
are getting really,

420
00:20:15,740 --> 00:20:18,330
really complicated in the
area of responsive

421
00:20:18,330 --> 00:20:19,800
development and stuff.

422
00:20:19,800 --> 00:20:22,190
And a user--

423
00:20:22,190 --> 00:20:23,690
you, George--

424
00:20:23,690 --> 00:20:27,610
asked, is it OK to continue to
push for more and more CSS

425
00:20:27,610 --> 00:20:31,130
modules like Regions, Grid
Layout, et cetera?

426
00:20:31,130 --> 00:20:32,930
Or is it actually
OK to just use

427
00:20:32,930 --> 00:20:37,010
JavaScript solutions instead?

428
00:20:37,010 --> 00:20:40,400
I kind of wonder that myself,
because CSS was known to be a

429
00:20:40,400 --> 00:20:42,030
simple language--

430
00:20:42,030 --> 00:20:43,640
easy to use, easy to learn.

431
00:20:43,640 --> 00:20:46,250
And now it's becoming so
much more complicated.

432
00:20:46,250 --> 00:20:48,820
GEORGE CRAWFORD: That's my point
totally-- that it's not

433
00:20:48,820 --> 00:20:51,430
that I believe that we should do
these things in JavaScript.

434
00:20:51,430 --> 00:20:55,760
Of course there are massive
performance gains to be had

435
00:20:55,760 --> 00:20:59,070
from pushing things to GPUs and
all that kind of stuff.

436
00:20:59,070 --> 00:21:04,860
But just looking at the average
CSS file now, it's

437
00:21:04,860 --> 00:21:08,220
already complicated enough.

438
00:21:08,220 --> 00:21:10,760
A lot of people who have
moved to Sass and other

439
00:21:10,760 --> 00:21:13,550
preprocessors would agree that
we're pushing the limits of

440
00:21:13,550 --> 00:21:16,390
what quite a simple syntax
can include.

441
00:21:16,390 --> 00:21:20,920
And as soon as we get other
modules coming in, it just

442
00:21:20,920 --> 00:21:21,830
gets more and more complex.

443
00:21:21,830 --> 00:21:26,230
And maybe the question is-- is
CSS the right language or the

444
00:21:26,230 --> 00:21:28,523
right technology to
deal with it?

445
00:21:28,523 --> 00:21:29,470
RAZVAN CALIMAN: OK.

446
00:21:29,470 --> 00:21:32,890
So first of all, that's
a very good question.

447
00:21:32,890 --> 00:21:35,960
And I'd like to start
out with Hakim, the

448
00:21:35,960 --> 00:21:37,590
guy that built Reveal.

449
00:21:37,590 --> 00:21:41,070
He sent a tweet recently that
we're asking so much more of

450
00:21:41,070 --> 00:21:43,770
HTML and CSS right now,
considering that it was meant

451
00:21:43,770 --> 00:21:53,030
as a textiling declarative
markup language.

452
00:21:53,030 --> 00:21:56,400
In response to your question,
I do think that we need to

453
00:21:56,400 --> 00:22:00,730
push for more CSS module and
more support in the browser,

454
00:22:00,730 --> 00:22:04,220
specifically on those areas
where JavaScript isn't really

455
00:22:04,220 --> 00:22:05,730
supposed to be working at.

456
00:22:05,730 --> 00:22:08,230
Like in terms of layout,
the browser itself

457
00:22:08,230 --> 00:22:08,760
is doing the layout.

458
00:22:08,760 --> 00:22:12,330
So I would much rather leave it
do the layout and focus my

459
00:22:12,330 --> 00:22:15,080
JavaScript resources, which are
oh-so-scarce, on various

460
00:22:15,080 --> 00:22:18,550
devices, given the complexity
of web applications, not

461
00:22:18,550 --> 00:22:21,110
necessarily the complexity
of web design.

462
00:22:21,110 --> 00:22:23,800
GEORGE CRAWFORD: We realize
that we're sort of almost

463
00:22:23,800 --> 00:22:26,070
wasting time by trying to
optimize things like

464
00:22:26,070 --> 00:22:29,680
Columnflow, because it's really,
as you say, a layout

465
00:22:29,680 --> 00:22:30,900
technology.

466
00:22:30,900 --> 00:22:36,290
And it feels counter-intuitive
to go over and over and over--

467
00:22:36,290 --> 00:22:38,210
why isn't JavaScript perfect
for this job?

468
00:22:38,210 --> 00:22:41,510
It's because it's not designed
for this job.

469
00:22:41,510 --> 00:22:43,530
RAZVAN CALIMAN: It's not
designed for this job, but the

470
00:22:43,530 --> 00:22:45,800
reality is that most CSS modules
don't really give you

471
00:22:45,800 --> 00:22:47,510
the access you need
in JavaScript.

472
00:22:47,510 --> 00:22:50,820
So up until now, there's
been a pretty much

473
00:22:50,820 --> 00:22:52,100
all-or-nothing solution.

474
00:22:52,100 --> 00:22:54,410
Is it all in CSS or
all in JavaScript?

475
00:22:54,410 --> 00:22:57,820
And I really think that stuff
like CSS Regions--

476
00:22:57,820 --> 00:23:00,680
it's intended to be a building
block, so it's not going to

477
00:23:00,680 --> 00:23:02,645
solve your complete
problem in CSS.

478
00:23:02,645 --> 00:23:05,890
But it gives you access via the
CSS object model, so you

479
00:23:05,890 --> 00:23:08,390
can understand how your layout
has been rendered and your

480
00:23:08,390 --> 00:23:09,330
various boxes.

481
00:23:09,330 --> 00:23:12,770
And I think that's really
where CSS and JavaScript

482
00:23:12,770 --> 00:23:15,400
should really work together--
in handing, for example,

483
00:23:15,400 --> 00:23:19,965
layout and event handlers and
content flow differently.

484
00:23:19,965 --> 00:23:23,950
GEORGE CRAWFORD: I was really
excited to hear, when I looked

485
00:23:23,950 --> 00:23:28,020
into Regions, that, yeah, you
start off with CSS, but when

486
00:23:28,020 --> 00:23:31,660
you run out of regions, when you
run out of flowed areas,

487
00:23:31,660 --> 00:23:34,580
JavaScript gets involved,
right?

488
00:23:34,580 --> 00:23:36,640
You have events, and you can
create new elements for

489
00:23:36,640 --> 00:23:37,640
content to flow into.

490
00:23:37,640 --> 00:23:40,270
And there's an

491
00:23:40,270 --> 00:23:41,380
interoperability between the two.

492
00:23:41,380 --> 00:23:42,700
RAZVAN CALIMAN: Yeah.

493
00:23:42,700 --> 00:23:46,190
And at this point, this is
because CSS Regions is

494
00:23:46,190 --> 00:23:49,960
supposed to be a building block,
and it doesn't handle

495
00:23:49,960 --> 00:23:51,340
the complete refill
of the content.

496
00:23:51,340 --> 00:23:56,280
And you go to use JavaScript to
listen to if your content

497
00:23:56,280 --> 00:23:58,320
has fit in all of
those regions.

498
00:23:58,320 --> 00:24:01,910
And that is seen as a limitation
by some people.

499
00:24:01,910 --> 00:24:04,800
And to some extent they're
right, because you need some

500
00:24:04,800 --> 00:24:06,380
sort of a method in CSS.

501
00:24:06,380 --> 00:24:08,580
If you think about layout,
CSS should handle

502
00:24:08,580 --> 00:24:09,670
the complete layout.

503
00:24:09,670 --> 00:24:15,210
So right now the spec is
supposed to work really fine

504
00:24:15,210 --> 00:24:18,480
with other specs like
Grid Layout.

505
00:24:18,480 --> 00:24:21,750
But it's using empty
developments and it's using

506
00:24:21,750 --> 00:24:26,500
the JavaScript just because we
don't have any other spec at

507
00:24:26,500 --> 00:24:27,550
this point that will work.

508
00:24:27,550 --> 00:24:29,960
What I personally would like
to see is some sort of

509
00:24:29,960 --> 00:24:32,960
adoption of multiples to do
elements, so you can actually

510
00:24:32,960 --> 00:24:37,820
define your complete
template in CSS.

511
00:24:37,820 --> 00:24:42,270
Because basically, that's what
I want from my CSS, right?

512
00:24:42,270 --> 00:24:45,980
I want it to easily swap out
templates, easily flow out

513
00:24:45,980 --> 00:24:49,480
content, and leave the markup
to handle just the semantics

514
00:24:49,480 --> 00:24:52,393
and describing my actual
content, right?

515
00:24:52,393 --> 00:24:55,580
ANDY HUME: Do you think part
of the complexity at the

516
00:24:55,580 --> 00:24:59,770
moment is that there are a
number of emerging new CSS

517
00:24:59,770 --> 00:25:03,230
layout modules, and it's not
necessarily clear until we've

518
00:25:03,230 --> 00:25:05,470
started playing around with them
and experimenting which

519
00:25:05,470 --> 00:25:09,360
ones are going to be good for
what type of problems?

520
00:25:09,360 --> 00:25:15,220
So for example, the Regions
stuff is enabling lots of very

521
00:25:15,220 --> 00:25:18,200
new kinds of layouts that
haven't been possible at all

522
00:25:18,200 --> 00:25:21,230
before, really, without things
like Columnflow, too, and

523
00:25:21,230 --> 00:25:24,010
Exclusions in the certain column
and things like that.

524
00:25:24,010 --> 00:25:27,720
Whereas Grid seems to me to be
more about helping us do the

525
00:25:27,720 --> 00:25:32,100
kind of layouts we've been doing
for a while but in a

526
00:25:32,100 --> 00:25:37,850
simpler way, a way that's more
suited to a real layout system

527
00:25:37,850 --> 00:25:39,775
rather than sort of hacking
floats and positionings.

528
00:25:39,775 --> 00:25:40,410
GEORGE CRAWFORD: Sure.

529
00:25:40,410 --> 00:25:42,980
And something the browser can
optimize as well, the

530
00:25:42,980 --> 00:25:43,770
performance of it.

531
00:25:43,770 --> 00:25:45,554
Yeah.

532
00:25:45,554 --> 00:25:47,070
AMBER WEINBERG: All right.

533
00:25:47,070 --> 00:25:51,460
So would it be useful to have
native CSS media queries at

534
00:25:51,460 --> 00:25:53,980
the element component
widget level and

535
00:25:53,980 --> 00:25:56,300
not just the viewport?

536
00:25:56,300 --> 00:25:59,630
And that is related
to our other

537
00:25:59,630 --> 00:26:01,130
question about page weight.

538
00:26:01,130 --> 00:26:04,050
Would that help?

539
00:26:04,050 --> 00:26:06,250
ANDY HUME: From my point of
view, that would be a very

540
00:26:06,250 --> 00:26:08,110
nice thing to be able to do.

541
00:26:08,110 --> 00:26:11,580

542
00:26:11,580 --> 00:26:14,645
That's not something you can
abstract into a system and

543
00:26:14,645 --> 00:26:18,100
have work at the moment
for various reasons.

544
00:26:18,100 --> 00:26:20,150
But it's desirable.

545
00:26:20,150 --> 00:26:21,840
And maybe there's something
around--

546
00:26:21,840 --> 00:26:26,000
George mentioned web components
and being able to

547
00:26:26,000 --> 00:26:29,820
codify behavior for a particular
type of interface

548
00:26:29,820 --> 00:26:32,430
element and deal with those kind
of exceptions that might

549
00:26:32,430 --> 00:26:34,545
arise on a sort of case-by-case
basis.

550
00:26:34,545 --> 00:26:38,210
GEORGE CRAWFORD: I think this
modular idea is really

551
00:26:38,210 --> 00:26:40,450
interesting, where in the
JavaScript world, we're

552
00:26:40,450 --> 00:26:43,040
leaning more and more towards
modularized code, which is

553
00:26:43,040 --> 00:26:46,090
good development practice
anyway.

554
00:26:46,090 --> 00:26:48,380
The work I mentioned that we
were doing is mostly being

555
00:26:48,380 --> 00:26:51,920
done by Wilson over there
on the FT's web app.

556
00:26:51,920 --> 00:26:56,730
And he's sort of almost faking
the shadow DOM and custom

557
00:26:56,730 --> 00:27:00,920
elements before it's arrived
by using media queries to

558
00:27:00,920 --> 00:27:05,090
write before and after
pseudo-elements with content

559
00:27:05,090 --> 00:27:09,200
on individual modules in the
page, and then in JavaScript

560
00:27:09,200 --> 00:27:12,850
reading those tags.

561
00:27:12,850 --> 00:27:15,700
So for example, for a certain
module, you might--

562
00:27:15,700 --> 00:27:19,930
with a before or after
pseudo-element, you might

563
00:27:19,930 --> 00:27:24,440
write the words "column" or
"row." And then the module now

564
00:27:24,440 --> 00:27:26,880
knows that it should behave
as a column or a row.

565
00:27:26,880 --> 00:27:31,580
So that's starting to
fake the media query

566
00:27:31,580 --> 00:27:32,480
on a modular level.

567
00:27:32,480 --> 00:27:35,820
And who knows what's
coming up?

568
00:27:35,820 --> 00:27:41,910
But the problem, of course, is
that we also always need to

569
00:27:41,910 --> 00:27:44,950
wait for the browsers to catch
up with what we need and that

570
00:27:44,950 --> 00:27:47,830
the spec writers need to wait
to hear what we want.

571
00:27:47,830 --> 00:27:51,340
But I think this kind of modular
layout is really

572
00:27:51,340 --> 00:27:51,750
interesting.

573
00:27:51,750 --> 00:27:55,780
AMBER WEINBERG: Do you think
that interrupts the idea that

574
00:27:55,780 --> 00:27:58,740
the content should be exactly
the same on the desktop and

575
00:27:58,740 --> 00:28:04,470
mobile that we're kind of
following right now, if we are

576
00:28:04,470 --> 00:28:06,360
able to swap out different
things

577
00:28:06,360 --> 00:28:08,600
for different viewports?

578
00:28:08,600 --> 00:28:11,220
GEORGE CRAWFORD: So this is
another question that I put in

579
00:28:11,220 --> 00:28:15,170
the Moderator is I think we
probably all come up against

580
00:28:15,170 --> 00:28:20,560
on our mobile devices sites that
are basically truncated

581
00:28:20,560 --> 00:28:23,470
in terms of their usability
until you get to the bottom of

582
00:28:23,470 --> 00:28:26,490
the page and you click
the link that says

583
00:28:26,490 --> 00:28:27,760
View Desktop Site.

584
00:28:27,760 --> 00:28:30,470
And then you can actually
use some functionality.

585
00:28:30,470 --> 00:28:33,240
This gets really,
really boring.

586
00:28:33,240 --> 00:28:37,490
And it's going back to the UI
and the content providers.

587
00:28:37,490 --> 00:28:42,030
Is designing for mobile simply
cutting out 30% of the useful

588
00:28:42,030 --> 00:28:42,930
information on the page?

589
00:28:42,930 --> 00:28:44,145
No, of course it's not.

590
00:28:44,145 --> 00:28:47,840
ANDY HUME: I think at some point
in the past, there's

591
00:28:47,840 --> 00:28:50,700
been a desire to try
and second guess

592
00:28:50,700 --> 00:28:52,865
what people call context.

593
00:28:52,865 --> 00:28:55,800
Why are you using the sites
on a mobile device?

594
00:28:55,800 --> 00:28:57,730
Oh, it's because you're walking
down the street and

595
00:28:57,730 --> 00:28:59,535
you want the phone number
of the restaurant

596
00:28:59,535 --> 00:29:01,780
you're going to.

597
00:29:01,780 --> 00:29:05,110
But whether that was ever true
or not is kind of irrelevant,

598
00:29:05,110 --> 00:29:07,340
because it's certainly
not true now.

599
00:29:07,340 --> 00:29:12,890
And deriving some kind
of context, I don't

600
00:29:12,890 --> 00:29:13,650
know how that works.

601
00:29:13,650 --> 00:29:14,690
I'm not sure that you can.

602
00:29:14,690 --> 00:29:16,970
GEORGE CRAWFORD: It was
immediately interesting for me

603
00:29:16,970 --> 00:29:19,430
to hear a proposal that, on
the server, for the first

604
00:29:19,430 --> 00:29:22,390
request, we might know the
viewport dimensions and not

605
00:29:22,390 --> 00:29:23,880
have to do user agent
sniffing.

606
00:29:23,880 --> 00:29:28,010
But actually, as was pointed
out, you can't tell very much

607
00:29:28,010 --> 00:29:30,230
about a device just from
the viewport dimension.

608
00:29:30,230 --> 00:29:31,690
You certainly can't tell
the conditions in

609
00:29:31,690 --> 00:29:32,810
which it's being viewed.

610
00:29:32,810 --> 00:29:36,590
So you don't know whether they
want a huge word displayed on

611
00:29:36,590 --> 00:29:38,900
the screen with the answer to
their question, or whether

612
00:29:38,900 --> 00:29:42,860
they want a 5,000-word article
to read, because you can't

613
00:29:42,860 --> 00:29:43,870
predict that kind
of information.

614
00:29:43,870 --> 00:29:45,930
So we need to give
them flexibility.

615
00:29:45,930 --> 00:29:48,420
But I think having a View
Desktop Site link at the

616
00:29:48,420 --> 00:29:50,714
bottom of the page is
not the answer.

617
00:29:50,714 --> 00:29:51,940
RAZVAN CALIMAN: Yeah.

618
00:29:51,940 --> 00:29:54,360
In terms of using web
components, I'm actually quite

619
00:29:54,360 --> 00:29:55,250
excited about this.

620
00:29:55,250 --> 00:29:57,870
Because when you think about
your content, it's not

621
00:29:57,870 --> 00:30:01,110
necessarily only to give it to
your users in full in mobile

622
00:30:01,110 --> 00:30:01,910
versus on desktop.

623
00:30:01,910 --> 00:30:04,560
You also have to think
about the context.

624
00:30:04,560 --> 00:30:08,440
And if you swap out and you
don't think about content like

625
00:30:08,440 --> 00:30:11,650
text content, you think about
web application controls,

626
00:30:11,650 --> 00:30:13,970
they're different on the
interaction mode on a mobile

627
00:30:13,970 --> 00:30:16,730
device rather than on
a desktop device.

628
00:30:16,730 --> 00:30:21,640
And to answer the question if
media queries are OK inside of

629
00:30:21,640 --> 00:30:24,520
web components or small,
isolated elements, I think

630
00:30:24,520 --> 00:30:28,330
that's really important and
useful, because it gives you

631
00:30:28,330 --> 00:30:34,881
the flexibility of reusing
most of your elements.

632
00:30:34,881 --> 00:30:36,940
GEORGE CRAWFORD: It's not just
that they're isolated from

633
00:30:36,940 --> 00:30:39,640
each other but also that they
can be dropped into other

634
00:30:39,640 --> 00:30:40,250
projects, right?

635
00:30:40,250 --> 00:30:41,650
ANDY HUME: Isolated from
the layout from

636
00:30:41,650 --> 00:30:43,110
the particular page.

637
00:30:43,110 --> 00:30:45,570
MALE SPEAKER: So this is a great
discussion, but I think

638
00:30:45,570 --> 00:30:48,150
that media queries
on other elements

639
00:30:48,150 --> 00:30:50,330
is the wrong approach--

640
00:30:50,330 --> 00:30:53,510
in part because if you look at
how the browsers today treat

641
00:30:53,510 --> 00:30:56,770
media queries, they don't work
too well when the page is

642
00:30:56,770 --> 00:30:57,890
being constructed.

643
00:30:57,890 --> 00:30:59,800
We don't have access
to the viewport.

644
00:30:59,800 --> 00:31:01,300
We don't evaluate the rules.

645
00:31:01,300 --> 00:31:03,510
Like if you look at your rule
right now, if you look at the

646
00:31:03,510 --> 00:31:06,430
webkit, it says, hey, this looks
complicated in the sense

647
00:31:06,430 --> 00:31:07,850
that it's not [? screened, ?]

648
00:31:07,850 --> 00:31:09,095
which means that we're
just going to

649
00:31:09,095 --> 00:31:10,930
download the resource.

650
00:31:10,930 --> 00:31:12,700
And this is a fundamental
trade off.

651
00:31:12,700 --> 00:31:14,950
We don't know the viewport
information when we're

652
00:31:14,950 --> 00:31:16,190
constructing this page.

653
00:31:16,190 --> 00:31:17,950
So this is not the
right mechanism.

654
00:31:17,950 --> 00:31:20,720
Right now, if you declare a
bunch of CSS [INAUDIBLE],

655
00:31:20,720 --> 00:31:22,620
we'll download them all.

656
00:31:22,620 --> 00:31:25,230
So having this information
on elements is not the

657
00:31:25,230 --> 00:31:25,870
right way to do it.

658
00:31:25,870 --> 00:31:28,520
What we're talking about here
is service-side adaptation.

659
00:31:28,520 --> 00:31:33,150
So I think the premise that we
need some way to exclude

660
00:31:33,150 --> 00:31:36,390
certain chunks of functionality
is right.

661
00:31:36,390 --> 00:31:39,265
I think media queries is
the wrong way to do it.

662
00:31:39,265 --> 00:31:40,490
ANDY HUME: Yeah.

663
00:31:40,490 --> 00:31:42,630
I don't think we're necessarily
saying media

664
00:31:42,630 --> 00:31:44,910
queries is the right
technology.

665
00:31:44,910 --> 00:31:50,200
In fact, media queries at the
moment, they make us fixate on

666
00:31:50,200 --> 00:31:50,850
the viewport.

667
00:31:50,850 --> 00:31:56,660
Because in terms of measuring
the width of something, that's

668
00:31:56,660 --> 00:31:58,480
the only thing we have.

669
00:31:58,480 --> 00:32:01,760
And it's actually not
very interesting

670
00:32:01,760 --> 00:32:02,650
that you can do that.

671
00:32:02,650 --> 00:32:04,560
You can do some interesting
things with it, and that's why

672
00:32:04,560 --> 00:32:07,570
responsive design now has
a name and everyone's

673
00:32:07,570 --> 00:32:08,270
talking about it.

674
00:32:08,270 --> 00:32:12,160
But I think, yeah, it's more
granular than that.

675
00:32:12,160 --> 00:32:16,360
The context which you want to
respond to from a layout point

676
00:32:16,360 --> 00:32:19,480
of view is more granular
than just the viewport.

677
00:32:19,480 --> 00:32:25,325
And yeah, whatever you guys
think is the right way to let

678
00:32:25,325 --> 00:32:27,785
us do these kind of things,
I'll go with that.

679
00:32:27,785 --> 00:32:31,410
AMBER WEINBERG: So are there any
front-end alternatives to

680
00:32:31,410 --> 00:32:34,940
responsive web design that can
fulfill the promise of being

681
00:32:34,940 --> 00:32:36,050
device-agnostic?

682
00:32:36,050 --> 00:32:38,787
Or could there be?

683
00:32:38,787 --> 00:32:42,000
ANDY HUME: Java.

684
00:32:42,000 --> 00:32:43,990
RAZVAN CALIMAN: I don't
know what you mean by

685
00:32:43,990 --> 00:32:44,960
device-agnostic.

686
00:32:44,960 --> 00:32:48,540
If you look at the web as we
see it right now, yes.

687
00:32:48,540 --> 00:32:52,550
HTML, CSS, that fulfills the
job of making something

688
00:32:52,550 --> 00:32:53,170
responsive.

689
00:32:53,170 --> 00:32:57,650
But if you look only just a bit
ahead of what devices are

690
00:32:57,650 --> 00:32:59,950
coming and what device-agnostic
means for

691
00:32:59,950 --> 00:33:01,700
Google Glass, for example--

692
00:33:01,700 --> 00:33:08,740
does responsive web design work
for your contact lens?

693
00:33:08,740 --> 00:33:11,530
I think we need to think
about that technology.

694
00:33:11,530 --> 00:33:15,580
And that's maybe a space where
native will actually win.

695
00:33:15,580 --> 00:33:18,300
Because the web as we see it
right now, it works really OK

696
00:33:18,300 --> 00:33:21,070
for one-dimensional,
two-dimensional layout.

697
00:33:21,070 --> 00:33:24,410
What happens in three
dimensions?

698
00:33:24,410 --> 00:33:27,000
I don't have a clear-cut
answer to that.

699
00:33:27,000 --> 00:33:30,500
So whatever we're doing right
now, it's optimized for touch.

700
00:33:30,500 --> 00:33:36,030
It's optimized for pointing,
different screen sizes.

701
00:33:36,030 --> 00:33:39,340
But whenever you change the
screen sizing, whenever you

702
00:33:39,340 --> 00:33:43,410
change the interaction model
from touching to speaking, for

703
00:33:43,410 --> 00:33:48,510
example, does the web offer
the same flexibility to

704
00:33:48,510 --> 00:33:50,850
building responsive?

705
00:33:50,850 --> 00:33:52,115
What do you guys think?

706
00:33:52,115 --> 00:33:54,840
ANDY HUME: I guess it depends
how you define the

707
00:33:54,840 --> 00:33:57,120
scope of the web.

708
00:33:57,120 --> 00:33:59,640
Is it any client technology
ever?

709
00:33:59,640 --> 00:34:00,750
What defines the web?

710
00:34:00,750 --> 00:34:02,360
Is it the open nature of it?

711
00:34:02,360 --> 00:34:05,562
Or is it the--

712
00:34:05,562 --> 00:34:08,632
GEORGE CRAWFORD: Yeah, I
think you've said it.

713
00:34:08,632 --> 00:34:12,120
RAZVAN CALIMAN: The
answer is no.

714
00:34:12,120 --> 00:34:14,810
There isn't a catch-all
technology right now.

715
00:34:14,810 --> 00:34:15,800
AMBER WEINBERG: Right.

716
00:34:15,800 --> 00:34:21,429
So should the browser be more
chatty about its environment,

717
00:34:21,429 --> 00:34:25,420
which we spoke about
in another session?

718
00:34:25,420 --> 00:34:28,350
Should we know what the
viewport size is, what

719
00:34:28,350 --> 00:34:32,290
connection it is,
their bandwidth?

720
00:34:32,290 --> 00:34:34,639
GEORGE CRAWFORD: From the work
I've been doing, step one is

721
00:34:34,639 --> 00:34:39,810
just, well, give us the right
information and ideally, give

722
00:34:39,810 --> 00:34:42,449
it in a unified way
across browsers.

723
00:34:42,449 --> 00:34:45,070
That would really, really
help, right?

724
00:34:45,070 --> 00:34:50,750
When a device incorrectly just
announces its pixel ratio or

725
00:34:50,750 --> 00:34:53,179
something like that, it
basically means you either

726
00:34:53,179 --> 00:34:58,370
added another seven lines of
hack or you have to not query

727
00:34:58,370 --> 00:34:59,740
that information.

728
00:34:59,740 --> 00:35:02,900
And I find that more
frustrating, I think, than not

729
00:35:02,900 --> 00:35:05,040
knowing some things about
the environment.

730
00:35:05,040 --> 00:35:09,240
I think we've probably covered
network and bandwidth and

731
00:35:09,240 --> 00:35:09,870
things like that.

732
00:35:09,870 --> 00:35:17,340
But I think if what we're trying
to do is to provide as

733
00:35:17,340 --> 00:35:20,840
immersive an experience as
native apps, then yeah, we do

734
00:35:20,840 --> 00:35:25,250
need to know a lot about
the device that is

735
00:35:25,250 --> 00:35:26,490
displaying the app.

736
00:35:26,490 --> 00:35:26,980
But--

737
00:35:26,980 --> 00:35:28,160
ANDY HUME: Do we need to
know about that on

738
00:35:28,160 --> 00:35:31,385
the server as well?

739
00:35:31,385 --> 00:35:33,060
GEORGE CRAWFORD: I think
it would help.

740
00:35:33,060 --> 00:35:37,830
I think if I'm working really
hard to store as many issues

741
00:35:37,830 --> 00:35:40,580
of the Economist offline on
someone's device, I know I've

742
00:35:40,580 --> 00:35:42,900
only got 50 meg and that that's
actually 25, because

743
00:35:42,900 --> 00:35:45,150
it's all A16-encoded.

744
00:35:45,150 --> 00:35:50,580
And I would really like to be
able to optimize my images and

745
00:35:50,580 --> 00:35:55,180
to package things up and
effectively do what a native

746
00:35:55,180 --> 00:35:57,990
iOS app is going to do, which is
sort of prepare everything

747
00:35:57,990 --> 00:35:59,470
in advance and ship it.

748
00:35:59,470 --> 00:36:01,900
And then you can cache the hell
out of that, and you get

749
00:36:01,900 --> 00:36:04,940
a really, really good
experience.

750
00:36:04,940 --> 00:36:07,190
You do run into issues where,
if you're running a

751
00:36:07,190 --> 00:36:09,960
JavaScript-heavy site, you
have to, we've already

752
00:36:09,960 --> 00:36:11,760
mentioned, like Mustache
templates on

753
00:36:11,760 --> 00:36:12,710
the server and client.

754
00:36:12,710 --> 00:36:16,080
You even have to start preparing
articles and

755
00:36:16,080 --> 00:36:18,810
additions using Node on the
server, because you have to

756
00:36:18,810 --> 00:36:21,080
use the same logic that you're
using on the client.

757
00:36:21,080 --> 00:36:24,670
But maybe that's fine.

758
00:36:24,670 --> 00:36:30,690
I do understand that any changes
to HTTP are enormous.

759
00:36:30,690 --> 00:36:34,250
And adding one line to a header
is going to massively

760
00:36:34,250 --> 00:36:35,680
affect web traffic as a whole.

761
00:36:35,680 --> 00:36:40,490
But I think in return, we can
stop wasting bandwidth by

762
00:36:40,490 --> 00:36:43,892
delivering totally
useless images.

763
00:36:43,892 --> 00:36:46,790
ANDY HUME: And people are
still doing user agent

764
00:36:46,790 --> 00:36:48,755
detection on the server to--

765
00:36:48,755 --> 00:36:50,160
GEORGE CRAWFORD: Sure,
as was said in an--

766
00:36:50,160 --> 00:36:51,370
ANDY HUME: [INAUDIBLE] --device
into mobile, tablet,

767
00:36:51,370 --> 00:36:52,350
or desktop or whatever.

768
00:36:52,350 --> 00:36:54,550
GEORGE CRAWFORD: As we said in
an earlier session, we're

769
00:36:54,550 --> 00:36:55,510
doing it already.

770
00:36:55,510 --> 00:37:00,960
So test to see which approach
is fastest.

771
00:37:00,960 --> 00:37:04,640
And please, browser vendors,
either don't declare a

772
00:37:04,640 --> 00:37:07,960
property or declare it correctly
or let us know that

773
00:37:07,960 --> 00:37:08,410
it's buggy.

774
00:37:08,410 --> 00:37:11,930
But it really, really makes our
life a lot harder when you

775
00:37:11,930 --> 00:37:13,180
give the wrong information.

776
00:37:13,180 --> 00:37:15,772

777
00:37:15,772 --> 00:37:17,860
RAZVAN CALIMAN: Just one
point to add to this.

778
00:37:17,860 --> 00:37:21,720
It does actually happen on
server-side right now.

779
00:37:21,720 --> 00:37:24,740
And it's particularly useful for
digital publications when

780
00:37:24,740 --> 00:37:27,030
you want to target a whole
slew of devices.

781
00:37:27,030 --> 00:37:30,040
So even though it's not
responsive in the responsive

782
00:37:30,040 --> 00:37:32,680
sense that it happens on the
client side and it reacts to

783
00:37:32,680 --> 00:37:36,030
anything, there's a lot of
versions of the same

784
00:37:36,030 --> 00:37:38,020
publication rendered
server-side.

785
00:37:38,020 --> 00:37:42,040
And you just go there, and
your device is just the

786
00:37:42,040 --> 00:37:43,870
terminal, and it receives
the end result.

787
00:37:43,870 --> 00:37:46,910
And right now that works
pretty fine because

788
00:37:46,910 --> 00:37:47,730
everything is stored.

789
00:37:47,730 --> 00:37:49,190
Everything is controlled.

790
00:37:49,190 --> 00:37:52,090
Ideally, you would want to give
this to the end user,

791
00:37:52,090 --> 00:37:55,500
because you can't really
simulate all of the user

792
00:37:55,500 --> 00:37:58,540
agent's font rendering--

793
00:37:58,540 --> 00:38:01,670
does it have or doesn't it have

794
00:38:01,670 --> 00:38:03,530
hyphenation, stuff like that.

795
00:38:03,530 --> 00:38:07,950
So it's happening right now,
and I think we should move

796
00:38:07,950 --> 00:38:08,880
away from that.

797
00:38:08,880 --> 00:38:12,660
But we need to wait for browser
vendors to catch up on

798
00:38:12,660 --> 00:38:16,980
the technologies we actually
need like decent layout, grid

799
00:38:16,980 --> 00:38:19,880
template, Flexbox, all of that,
because we're actually

800
00:38:19,880 --> 00:38:21,880
hacking right now with those.

801
00:38:21,880 --> 00:38:26,640
So up until we get these HTML
and CSS improvements, we're

802
00:38:26,640 --> 00:38:28,750
going to see a lot more digital
publications which are

803
00:38:28,750 --> 00:38:30,590
just images at this
point because

804
00:38:30,590 --> 00:38:31,600
they're simple to render.

805
00:38:31,600 --> 00:38:35,130
And yes, that's a 700 megabyte
magazine, but it will work

806
00:38:35,130 --> 00:38:38,045
across all of your devices,
because they're pre-rendered

807
00:38:38,045 --> 00:38:40,135
for each screen size.

808
00:38:40,135 --> 00:38:44,440
GEORGE CRAWFORD: But do you
agree in principle that it's

809
00:38:44,440 --> 00:38:47,730
an advantage if you know at
least a little information

810
00:38:47,730 --> 00:38:50,660
about the viewport dimensions,
for example, on the server,

811
00:38:50,660 --> 00:38:54,740
and that you accept that there's
going to be a bit of

812
00:38:54,740 --> 00:38:56,030
downscaling of images?

813
00:38:56,030 --> 00:39:02,100
But rather than enormous to
very small, you can ship a

814
00:39:02,100 --> 00:39:04,380
medium-sized image at the very
least, because you know

815
00:39:04,380 --> 00:39:06,470
something about the viewport
dimensions on the server?

816
00:39:06,470 --> 00:39:07,260
RAZVAN CALIMAN: Definitely.

817
00:39:07,260 --> 00:39:10,350
I agree we need that kind of
information, but you need to

818
00:39:10,350 --> 00:39:12,490
be responsible in
how you use it.

819
00:39:12,490 --> 00:39:15,640
For example, we had an
example earlier--

820
00:39:15,640 --> 00:39:17,850
knowing the bandwidth and the
bandwidth being wrong, you

821
00:39:17,850 --> 00:39:22,920
might assume something wrong
about the device and give it a

822
00:39:22,920 --> 00:39:26,900
bad user experience or a very
good user experience.

823
00:39:26,900 --> 00:39:29,210
But the device cannot
download it.

824
00:39:29,210 --> 00:39:31,910
So yeah, I do agree you need
that kind of information

825
00:39:31,910 --> 00:39:33,270
server-side.

826
00:39:33,270 --> 00:39:36,330
As a developer, you need to use
it and not make too many

827
00:39:36,330 --> 00:39:37,830
assumptions about the device.

828
00:39:37,830 --> 00:39:39,240
GEORGE CRAWFORD: It's
interesting, then, Ilya's

829
00:39:39,240 --> 00:39:42,540
points on media queries that
that's actually responsible

830
00:39:42,540 --> 00:39:45,050
for so much of what we discuss
when it comes to responsive

831
00:39:45,050 --> 00:39:45,730
layout, right?

832
00:39:45,730 --> 00:39:47,740
And the reason we're obsessed
with viewport dimensions is

833
00:39:47,740 --> 00:39:51,040
because that's the one thing
we have on the client to--

834
00:39:51,040 --> 00:39:53,370
well, one of the chief
things we have in

835
00:39:53,370 --> 00:39:55,200
CSS to control behavior.

836
00:39:55,200 --> 00:39:58,930
So it's got a lot to answer
for in a way.

837
00:39:58,930 --> 00:40:00,770
AMBER WEINBERG: Well,
let's move on to the

838
00:40:00,770 --> 00:40:02,760
flip side of the coin.

839
00:40:02,760 --> 00:40:05,000
With all this new stuff that
we have to take into

840
00:40:05,000 --> 00:40:08,600
consideration, what about the
arguments that responsive web

841
00:40:08,600 --> 00:40:12,620
design isn't worth it at all
and that there is merit to

842
00:40:12,620 --> 00:40:16,050
just having normal
zoom-and-swipe sites?

843
00:40:16,050 --> 00:40:18,810
Considering that's
originally--

844
00:40:18,810 --> 00:40:22,510
when Steve Jobs came on stage,
he touted you could have the

845
00:40:22,510 --> 00:40:24,610
full web on your phone.

846
00:40:24,610 --> 00:40:28,578

847
00:40:28,578 --> 00:40:34,600
ANDY HUME: I guess people want
to create designs that fit

848
00:40:34,600 --> 00:40:35,940
that device.

849
00:40:35,940 --> 00:40:38,520
And if you look at what people
create for the iPhone natively

850
00:40:38,520 --> 00:40:43,000
and the iPad natively, it's not
double-tap to zoom in on a

851
00:40:43,000 --> 00:40:44,800
column and swipe around.

852
00:40:44,800 --> 00:40:47,370
And I think that's what's
driving what we want to do

853
00:40:47,370 --> 00:40:49,990
with web technology, is the
stuff that's happening native,

854
00:40:49,990 --> 00:40:52,370
to try and create more engaging

855
00:40:52,370 --> 00:40:54,560
experiences, to coin a phrase.

856
00:40:54,560 --> 00:40:56,360
GEORGE CRAWFORD: We've struggled
to define what a web

857
00:40:56,360 --> 00:40:58,110
app really is sometimes.

858
00:40:58,110 --> 00:41:02,350
But one possible definition is
to do with how immersive it is

859
00:41:02,350 --> 00:41:04,150
and whether you feel
your app has been

860
00:41:04,150 --> 00:41:05,680
designed for your screen.

861
00:41:05,680 --> 00:41:10,140
And if you see the whole of the
BBC News front page on a

862
00:41:10,140 --> 00:41:13,300
screen that size, it's
fantastically easy to get to

863
00:41:13,300 --> 00:41:15,580
the-- if you know the layout of
the page, you don't need to

864
00:41:15,580 --> 00:41:16,060
read the words.

865
00:41:16,060 --> 00:41:18,530
You know that the link you're
looking for is in the

866
00:41:18,530 --> 00:41:19,720
bottom-right of the page.

867
00:41:19,720 --> 00:41:23,320
It's super quick to get to that
content, but it doesn't

868
00:41:23,320 --> 00:41:25,500
feel so immersive.

869
00:41:25,500 --> 00:41:28,360
But then maybe we go too far the
other way that you get a

870
00:41:28,360 --> 00:41:30,650
beautiful layout with
a full-sized image.

871
00:41:30,650 --> 00:41:33,560
And you know you can swipe
through 12 images, and it's a

872
00:41:33,560 --> 00:41:34,790
satisfying experience.

873
00:41:34,790 --> 00:41:37,580
But where the hell are the
links to find my content?

874
00:41:37,580 --> 00:41:43,080
And we really have to take
both kinds of directions

875
00:41:43,080 --> 00:41:44,200
before we find the answer.

876
00:41:44,200 --> 00:41:48,660
We were talking earlier about
pagination and what the

877
00:41:48,660 --> 00:41:54,600
solution is for presenting
text-heavy sites and visual

878
00:41:54,600 --> 00:41:57,290
media-heavy sites in
terms of pages.

879
00:41:57,290 --> 00:41:58,840
Do we want the content
to scroll?

880
00:41:58,840 --> 00:42:01,010
Do we want it to be
split into pages?

881
00:42:01,010 --> 00:42:02,580
And I think this
kind of thing--

882
00:42:02,580 --> 00:42:04,980
the third option maybe is to
present everything at once and

883
00:42:04,980 --> 00:42:08,690
then to have a tap-to-zoom
kind of paradigm.

884
00:42:08,690 --> 00:42:12,820
It really depends
on the content.

885
00:42:12,820 --> 00:42:17,060
The point I made was, for the FT
and the Economist, I think

886
00:42:17,060 --> 00:42:18,160
pagination's really useful.

887
00:42:18,160 --> 00:42:20,770
Because if you are distracted or
look away for some reason,

888
00:42:20,770 --> 00:42:22,160
everyone knows how
to read a book.

889
00:42:22,160 --> 00:42:25,380
We all know that if you look
away and you look back to the

890
00:42:25,380 --> 00:42:27,650
book, you have a rough idea that
you were halfway down the

891
00:42:27,650 --> 00:42:29,535
right-hand column.

892
00:42:29,535 --> 00:42:31,910
But when you're looking at a
single-scrolling column of

893
00:42:31,910 --> 00:42:33,300
text, it's sometimes
very hard.

894
00:42:33,300 --> 00:42:37,220
And I find that I have to
concentrate more on the

895
00:42:37,220 --> 00:42:39,660
mechanics of what I'm doing
when I'm scrolling.

896
00:42:39,660 --> 00:42:42,210
And just to simply tap
or swipe to go to the

897
00:42:42,210 --> 00:42:43,610
next page is great.

898
00:42:43,610 --> 00:42:45,890
But then you made the point
that this is not at all

899
00:42:45,890 --> 00:42:47,450
appropriate for some
other sites.

900
00:42:47,450 --> 00:42:47,980
RAZVAN CALIMAN: Yeah.

901
00:42:47,980 --> 00:42:51,210
We need to take into
consideration media-rich

902
00:42:51,210 --> 00:42:52,690
digital publications.

903
00:42:52,690 --> 00:42:55,470
And you want to do it in a
paginated responsive view.

904
00:42:55,470 --> 00:42:58,820
You easily find that you're
going to lose context between

905
00:42:58,820 --> 00:43:01,820
the text and illustrations or
pictures the text is referring

906
00:43:01,820 --> 00:43:04,770
to if you want to embrace
responsiveness.

907
00:43:04,770 --> 00:43:08,800
And cutting off an image
at the middle page is

908
00:43:08,800 --> 00:43:10,110
not really an option.

909
00:43:10,110 --> 00:43:12,750
And if you do move the image
or the illustration to a

910
00:43:12,750 --> 00:43:15,590
different page, you end up with
a lot of white space on

911
00:43:15,590 --> 00:43:18,060
your pages, which you can't
really control.

912
00:43:18,060 --> 00:43:20,670
And you have to understand
that a lot of digital

913
00:43:20,670 --> 00:43:23,640
publications are coming
from print.

914
00:43:23,640 --> 00:43:26,340
And that's where designers are
used to having a lot of

915
00:43:26,340 --> 00:43:30,110
control over where content goes,
where text is on the

916
00:43:30,110 --> 00:43:32,030
same page with the
illustration.

917
00:43:32,030 --> 00:43:36,130
And the trade off when you take
on responsive web design

918
00:43:36,130 --> 00:43:39,240
with paginated view is that
you lose a lot of that

919
00:43:39,240 --> 00:43:41,960
fine-grain control over where
your content is heading.

920
00:43:41,960 --> 00:43:45,800
So I am actually keen to
understand even more how

921
00:43:45,800 --> 00:43:50,280
people see pagination as an
advantage on the web when we

922
00:43:50,280 --> 00:43:53,650
are accustomed to the paradigm
of scrolling or tapping.

923
00:43:53,650 --> 00:43:58,270
And where it makes sense, for
example, in text-heavy

924
00:43:58,270 --> 00:44:01,090
articles, like you mentioned,
that's a very valid point.

925
00:44:01,090 --> 00:44:03,650
But does it make sense
for anything else?

926
00:44:03,650 --> 00:44:06,610
AMBER WEINBERG: So should
responsive web design, then,

927
00:44:06,610 --> 00:44:08,270
emulate print?

928
00:44:08,270 --> 00:44:12,380
On a 27-inch screen, is having
six columns go all the way

929
00:44:12,380 --> 00:44:16,020
down and all the way across
going to be easy to read?

930
00:44:16,020 --> 00:44:17,710
RAZVAN CALIMAN: I think
web design should

931
00:44:17,710 --> 00:44:18,940
emulate a bit of print.

932
00:44:18,940 --> 00:44:22,870
And that's something the
Exclusions spec is doing.

933
00:44:22,870 --> 00:44:25,060
And that's something
specifically that should be in

934
00:44:25,060 --> 00:44:28,640
CSS, because JavaScript is not
really meant to do something

935
00:44:28,640 --> 00:44:31,290
like that, flowing text inside
of shapes or around shapes.

936
00:44:31,290 --> 00:44:33,670
GEORGE CRAWFORD: And typography
as well, like the

937
00:44:33,670 --> 00:44:34,560
hyphenation and stuff.

938
00:44:34,560 --> 00:44:37,400
It would be great to have good
support for that, right?

939
00:44:37,400 --> 00:44:41,550
RAZVAN CALIMAN: In terms of
moving the complete idea of

940
00:44:41,550 --> 00:44:45,860
print to digital, I think
that's the wrong idea.

941
00:44:45,860 --> 00:44:49,030
You don't really get anything
with six columns of text.

942
00:44:49,030 --> 00:44:55,280
You don't get more information
out of that page.

943
00:44:55,280 --> 00:44:57,910
You have to understand that
print has evolved like that

944
00:44:57,910 --> 00:45:00,530
into multi-column layout and
having multiple articles on

945
00:45:00,530 --> 00:45:02,750
the same page because of the
physical constraints of the

946
00:45:02,750 --> 00:45:05,620
page, something we don't
have on the web.

947
00:45:05,620 --> 00:45:10,930
You can actually use the device
size to your advantage.

948
00:45:10,930 --> 00:45:14,960
And if you do have a large
screen size, that doesn't mean

949
00:45:14,960 --> 00:45:16,540
you have to put in more columns

950
00:45:16,540 --> 00:45:18,660
because you have space.

951
00:45:18,660 --> 00:45:20,980
There's the point that
George made.

952
00:45:20,980 --> 00:45:24,700
What's the distance between
the user and the device?

953
00:45:24,700 --> 00:45:26,550
Are you reading that on a TV?

954
00:45:26,550 --> 00:45:27,920
Six columns is not
going to help.

955
00:45:27,920 --> 00:45:31,620
You're going to need larger type
and something optimized

956
00:45:31,620 --> 00:45:34,680
for your laying back on the
couch and reading the content.

957
00:45:34,680 --> 00:45:36,890
GEORGE CRAWFORD: Any graphic
designer will draw your

958
00:45:36,890 --> 00:45:39,670
attention to the whole concept
of white space, that that

959
00:45:39,670 --> 00:45:40,940
really helps.

960
00:45:40,940 --> 00:45:43,900
Maybe I was wrong with my slide
going from the white

961
00:45:43,900 --> 00:45:46,410
gutters on the side to filling
all the available space.

962
00:45:46,410 --> 00:45:49,010
Because it's quite an assault,
visually, to deal with that

963
00:45:49,010 --> 00:45:49,410
kind of thing.

964
00:45:49,410 --> 00:45:51,130
And white space is incredibly
important.

965
00:45:51,130 --> 00:45:54,730
So for sure, the answer is no,
we don't want to fill a

966
00:45:54,730 --> 00:45:56,580
27-inch monitor with columns.

967
00:45:56,580 --> 00:46:00,507
But we need to really learn a
lot from print and then adopt

968
00:46:00,507 --> 00:46:01,410
it to our own.

969
00:46:01,410 --> 00:46:04,060
ANDY HUME: Yeah, I think it's
natural that we look at things

970
00:46:04,060 --> 00:46:07,690
like print or what's been in
the past to kind of inform

971
00:46:07,690 --> 00:46:09,470
what we're trying to
do in a new medium.

972
00:46:09,470 --> 00:46:11,740
But the reality is it
is a new medium, and

973
00:46:11,740 --> 00:46:13,120
it's still quite young.

974
00:46:13,120 --> 00:46:16,040
And these things, as we learn
by adopting bits of print--

975
00:46:16,040 --> 00:46:19,560
and some stuff does work,
some stuff doesn't--

976
00:46:19,560 --> 00:46:21,490
we'll learn more about the
medium that we're actually

977
00:46:21,490 --> 00:46:22,580
working in.

978
00:46:22,580 --> 00:46:25,850
That's assuming it doesn't
move so fast that lessons

979
00:46:25,850 --> 00:46:30,280
we've learned one week aren't
relevant the next, when you

980
00:46:30,280 --> 00:46:33,800
consider we're now talking about
TVs and the distance

981
00:46:33,800 --> 00:46:37,740
from the screen and things.

982
00:46:37,740 --> 00:46:38,440
AMBER WEINBERG: OK.

983
00:46:38,440 --> 00:46:45,570
So kind of on the same layout
issue, Oliver asked-- current

984
00:46:45,570 --> 00:46:47,710
responsive web design solutions
to grid systems make

985
00:46:47,710 --> 00:46:51,140
for very complicated
presentational HTML.

986
00:46:51,140 --> 00:46:53,630
Defining the same behaviors with
CSS, on the other hand,

987
00:46:53,630 --> 00:46:54,640
is very tricky.

988
00:46:54,640 --> 00:46:56,260
So what needs to be
the middleman?

989
00:46:56,260 --> 00:46:58,160
Is that still JavaScript?

990
00:46:58,160 --> 00:46:59,920
Or is there going to
be something else?

991
00:46:59,920 --> 00:47:04,030

992
00:47:04,030 --> 00:47:07,020
ANDY HUME: So I'm not sure
that there is a middleman

993
00:47:07,020 --> 00:47:08,370
available at the moment.

994
00:47:08,370 --> 00:47:11,270

995
00:47:11,270 --> 00:47:15,960
I think I understand what he's
saying when he says there's

996
00:47:15,960 --> 00:47:19,280
lots of presentational
class names in HTML.

997
00:47:19,280 --> 00:47:25,050
And I think at the current
point in time, that's the

998
00:47:25,050 --> 00:47:27,605
solution you should
move towards.

999
00:47:27,605 --> 00:47:33,890
As I said, I find being able to
have a layout system that

1000
00:47:33,890 --> 00:47:36,600
is abstracted from everything
else, a grid system, and then

1001
00:47:36,600 --> 00:47:41,460
implement it in markup easily
is very valuable for all the

1002
00:47:41,460 --> 00:47:42,440
reasons we've talked about--

1003
00:47:42,440 --> 00:47:44,390
making sure components
are extracted

1004
00:47:44,390 --> 00:47:46,580
from layouts and pages.

1005
00:47:46,580 --> 00:47:49,610
And at the moment, the easiest
and simplest, most

1006
00:47:49,610 --> 00:47:52,680
maintainable way of doing that,
in my view, is with more

1007
00:47:52,680 --> 00:47:54,320
presentational class names.

1008
00:47:54,320 --> 00:47:58,090
What we have coming in the
future that I think will help

1009
00:47:58,090 --> 00:47:59,960
this is the Grid
Layout module.

1010
00:47:59,960 --> 00:48:04,378

1011
00:48:04,378 --> 00:48:05,515
AMBER WEINBERG: Is that it?

1012
00:48:05,515 --> 00:48:06,850
OK.

1013
00:48:06,850 --> 00:48:09,410
So we just have a couple
of minutes left.

1014
00:48:09,410 --> 00:48:11,310
I have one more question
for you.

1015
00:48:11,310 --> 00:48:16,130
Very quickly, if you could have
one thing, anything in

1016
00:48:16,130 --> 00:48:19,760
responsive web design approved
by the spec or majorly

1017
00:48:19,760 --> 00:48:22,770
implemented in any browsers,
what would your

1018
00:48:22,770 --> 00:48:26,802
dream feature be?

1019
00:48:26,802 --> 00:48:29,200
RAZVAN CALIMAN: Overnight
grid layout templates.

1020
00:48:29,200 --> 00:48:32,100

1021
00:48:32,100 --> 00:48:33,930
GEORGE CRAWFORD: I think,
because of my work on

1022
00:48:33,930 --> 00:48:35,670
Columnflow, I think Regions.

1023
00:48:35,670 --> 00:48:39,430
Maybe I'm not so clear on how
they all interlink, but the

1024
00:48:39,430 --> 00:48:43,080
demos I've seen of Regions
just look great.

1025
00:48:43,080 --> 00:48:46,340
I've spent a long time flowing
text into areas.

1026
00:48:46,340 --> 00:48:47,690
And just to have something
that will do that

1027
00:48:47,690 --> 00:48:51,042
for me would be great.

1028
00:48:51,042 --> 00:48:53,690
ANDY HUME: I'm inclined to
agree with grids mainly

1029
00:48:53,690 --> 00:48:57,740
because I get just as excited
about new stuff that's going

1030
00:48:57,740 --> 00:49:03,290
to make my life easier rather
than new, shiny stuff.

1031
00:49:03,290 --> 00:49:09,220
And also media queries at a
component level, however that

1032
00:49:09,220 --> 00:49:10,300
might be implemented.

1033
00:49:10,300 --> 00:49:12,336
And call it media queries.

1034
00:49:12,336 --> 00:49:15,550
AMBER WEINBERG: Well, I would
like something for retina,

1035
00:49:15,550 --> 00:49:17,850
something easy.

1036
00:49:17,850 --> 00:49:18,220
All right.

1037
00:49:18,220 --> 00:49:20,610
Well, that is it for the
responsive panel.

1038
00:49:20,610 --> 00:49:21,880
And thank you, guys.

1039
00:49:21,880 --> 00:49:28,113
[APPLAUSE]

1
00:00:00,000 --> 00:00:04,880

2
00:00:04,880 --> 00:00:07,320
CHRIS HELLMANN: Hello and
welcome to the one before last

3
00:00:07,320 --> 00:00:09,810
session on privileged access.

4
00:00:09,810 --> 00:00:10,910
That's why I brought
the [? Politsi ?]

5
00:00:10,910 --> 00:00:14,690
tee shirt to give you, not
there, not there, we go there.

6
00:00:14,690 --> 00:00:16,180
So it has to be organized.

7
00:00:16,180 --> 00:00:18,300
So we've got a panel of
illustrious people here.

8
00:00:18,300 --> 00:00:20,000
So we got Diana from Vodafone.

9
00:00:20,000 --> 00:00:22,560
We've got Paul Kinlan
from Google.

10
00:00:22,560 --> 00:00:25,093
We've got Petro Soininen--

11
00:00:25,093 --> 00:00:26,650
PETRO SOININEN: [INAUDIBLE].

12
00:00:26,650 --> 00:00:26,960
CHRIS HELLMANN: OK.

13
00:00:26,960 --> 00:00:27,960
Fair enough.

14
00:00:27,960 --> 00:00:29,720
ex Nokia and now at Five.

15
00:00:29,720 --> 00:00:32,369
And as we didn't have enough
blanket statements and

16
00:00:32,369 --> 00:00:34,610
outrageous swearing, we actually
brought Brian Leroux

17
00:00:34,610 --> 00:00:37,660
from PhoneGap with us as well
who is actually going to start

18
00:00:37,660 --> 00:00:39,450
the whole session by
telling us-- for 10

19
00:00:39,450 --> 00:00:41,890
minutes and not longer--

20
00:00:41,890 --> 00:00:45,060
what we are all about here
about privileged access.

21
00:00:45,060 --> 00:00:47,535
So take it away.

22
00:00:47,535 --> 00:00:50,930
Take your closed technology and
show us what you can do.

23
00:00:50,930 --> 00:00:55,310

24
00:00:55,310 --> 00:00:55,385
BRIAN LEROUX: OK.

25
00:00:55,385 --> 00:00:55,820
Can you guys hear
me all right?

26
00:00:55,820 --> 00:00:57,596
AUDIENCE: Yeah.

27
00:00:57,596 --> 00:00:58,040
BRIAN LEROUX: Yeah.

28
00:00:58,040 --> 00:00:59,860
Well except for old man Russell
in the front there.

29
00:00:59,860 --> 00:01:02,580

30
00:01:02,580 --> 00:01:05,110
So I'm going to talk to you guys
today about privileged

31
00:01:05,110 --> 00:01:07,760
applications, packaged
applications, sometimes we

32
00:01:07,760 --> 00:01:09,700
call them installable
web applications.

33
00:01:09,700 --> 00:01:13,660
I've even heard it called
a thick client.

34
00:01:13,660 --> 00:01:14,190
So--

35
00:01:14,190 --> 00:01:16,220
oh come on pointer events.

36
00:01:16,220 --> 00:01:17,830
There we go.

37
00:01:17,830 --> 00:01:20,380
I work on a PhoneGap project
which you may have heard of.

38
00:01:20,380 --> 00:01:23,930
It's for building apps using
HTML, CSS, and JavaScript.

39
00:01:23,930 --> 00:01:26,240
And it's very much like a
packaged application.

40
00:01:26,240 --> 00:01:28,400
You host the assets
on a device and

41
00:01:28,400 --> 00:01:29,750
we load them locally.

42
00:01:29,750 --> 00:01:31,740
They're intrinsically offline.

43
00:01:31,740 --> 00:01:33,450
And it's also a powerful
extensibility layer.

44
00:01:33,450 --> 00:01:36,380
So PhoneGap lets you get
at, basically, anything

45
00:01:36,380 --> 00:01:37,750
the device can do.

46
00:01:37,750 --> 00:01:39,310
And that's what we're
talking about.

47
00:01:39,310 --> 00:01:44,600
So the question that we were
posing was, did the web solve

48
00:01:44,600 --> 00:01:45,860
cross platform?

49
00:01:45,860 --> 00:01:48,220
And I think when it comes to
things like screen sizes and

50
00:01:48,220 --> 00:01:50,150
operating systems, the
web did solve cross

51
00:01:50,150 --> 00:01:52,300
platform really well.

52
00:01:52,300 --> 00:01:54,180
Somebody was talking about Steve
Jobs earlier when he

53
00:01:54,180 --> 00:01:56,200
said, you're going to build
apps and you're going

54
00:01:56,200 --> 00:01:57,400
to build web apps.

55
00:01:57,400 --> 00:01:58,390
And I love that.

56
00:01:58,390 --> 00:02:01,390
I thought that was
a great vision.

57
00:02:01,390 --> 00:02:04,790
But web didn't solve
everything.

58
00:02:04,790 --> 00:02:08,120
Web intrinsically is sandboxed,
and this is

59
00:02:08,120 --> 00:02:09,960
actually not a bug.

60
00:02:09,960 --> 00:02:11,080
This is a feature.

61
00:02:11,080 --> 00:02:14,650
This is how the web works.

62
00:02:14,650 --> 00:02:17,140
But because it has this
capability or this feature

63
00:02:17,140 --> 00:02:19,650
that it's sandboxed, it
also doesn't have

64
00:02:19,650 --> 00:02:21,690
access to device APIs.

65
00:02:21,690 --> 00:02:23,480
And so it's at a disadvantage
when it comes to native

66
00:02:23,480 --> 00:02:23,830
applications.

67
00:02:23,830 --> 00:02:26,780
It's sandboxing.

68
00:02:26,780 --> 00:02:28,660
I guess another disadvantage
of the web is that it can't

69
00:02:28,660 --> 00:02:30,200
participate in app stores
which maybe

70
00:02:30,200 --> 00:02:31,200
we'll talk about later.

71
00:02:31,200 --> 00:02:33,230
I don't think this is exactly
what packaged

72
00:02:33,230 --> 00:02:34,930
applications are all about.

73
00:02:34,930 --> 00:02:38,110
So I don't know if you guys have
noticed but there's this

74
00:02:38,110 --> 00:02:41,360
trend lately towards web
operating systems.

75
00:02:41,360 --> 00:02:42,840
Google's got Chrome OS.

76
00:02:42,840 --> 00:02:45,710
Microsoft has Windows 8, which
uses HTML, CSS, and JavaScript

77
00:02:45,710 --> 00:02:48,040
to build applications.

78
00:02:48,040 --> 00:02:49,740
Some guys called Mozilla
are doing a thing

79
00:02:49,740 --> 00:02:51,590
called Firefox OS.

80
00:02:51,590 --> 00:02:53,770
There's this thing called Tizen,
which is an open source

81
00:02:53,770 --> 00:02:57,956
web operating system by
Samsung and Intel.

82
00:02:57,956 --> 00:02:59,425
And then there's
Web OS from HP.

83
00:02:59,425 --> 00:03:01,160
It kind of makes me sad so
I don't like to talk

84
00:03:01,160 --> 00:03:01,730
about it too much.

85
00:03:01,730 --> 00:03:03,730
But there's all these things.

86
00:03:03,730 --> 00:03:07,450
So if you think about Google,
Microsoft, Mozilla, Samsung,

87
00:03:07,450 --> 00:03:10,110
Intel, and HP are all betting
on the web for their next

88
00:03:10,110 --> 00:03:12,760
operating systems which is a
pretty interesting thing.

89
00:03:12,760 --> 00:03:15,480
And these are all privileged
applications and packaged

90
00:03:15,480 --> 00:03:17,240
applications.

91
00:03:17,240 --> 00:03:20,440
Mobile is not quite so kind, but
luckily, with PhoneGap we

92
00:03:20,440 --> 00:03:21,680
can get to these things
and we can get

93
00:03:21,680 --> 00:03:23,150
inside these app stores.

94
00:03:23,150 --> 00:03:26,030
And this is not a cheap shot--
this is just a statement of

95
00:03:26,030 --> 00:03:28,140
fact and it's kind
of interesting--

96
00:03:28,140 --> 00:03:29,880
all of these app stores
themselves are web

97
00:03:29,880 --> 00:03:30,580
applications.

98
00:03:30,580 --> 00:03:31,930
They're hybrid apps.

99
00:03:31,930 --> 00:03:32,720
You can't install an

100
00:03:32,720 --> 00:03:33,800
application without the network.

101
00:03:33,800 --> 00:03:35,790
And typically when you're
browsing for apps in an app

102
00:03:35,790 --> 00:03:38,610
store, you're going
to the web.

103
00:03:38,610 --> 00:03:41,330
So forgive me if you've heard
this before because packaged

104
00:03:41,330 --> 00:03:42,460
apps are not a new concept.

105
00:03:42,460 --> 00:03:44,110
This has been around
a long time.

106
00:03:44,110 --> 00:03:46,490
It used to be widgets
inside of Vodafone.

107
00:03:46,490 --> 00:03:49,320
There's this thing called
confabulator from Yahoo.

108
00:03:49,320 --> 00:03:49,980
Think it was Yahoo.

109
00:03:49,980 --> 00:03:51,100
PETRO SOININEN: Yeah.

110
00:03:51,100 --> 00:03:52,350
BRIAN LEROUX: It was Yahoo.

111
00:03:52,350 --> 00:03:54,930

112
00:03:54,930 --> 00:03:57,150
Maybe this thing called AIR
from this other company.

113
00:03:57,150 --> 00:03:58,870
I can't remember who they are.

114
00:03:58,870 --> 00:04:00,300
The idea has been around
for a while though and

115
00:04:00,300 --> 00:04:01,670
it's not a new thing.

116
00:04:01,670 --> 00:04:04,600
So apps that are designed for
a particular platform are

117
00:04:04,600 --> 00:04:06,345
incompatible by their nature.

118
00:04:06,345 --> 00:04:08,640
If you build for a particular
operating system, you're not

119
00:04:08,640 --> 00:04:11,540
going to ship it on other
operating system unless you

120
00:04:11,540 --> 00:04:14,130
believe Blackberry 10, you can
put Android apps on it but

121
00:04:14,130 --> 00:04:16,410
that's another thing
all together.

122
00:04:16,410 --> 00:04:20,070
So that's why we
have standards.

123
00:04:20,070 --> 00:04:21,779
That's the point of
web standards.

124
00:04:21,779 --> 00:04:23,410
And there's actually some
emergent standards that are

125
00:04:23,410 --> 00:04:25,520
around this, and there's
some older ones too.

126
00:04:25,520 --> 00:04:29,100
So there's a thing called the
Widget Spec, which kind of

127
00:04:29,100 --> 00:04:31,870
died in a horrible death, but
it's around in its own way.

128
00:04:31,870 --> 00:04:32,750
Bruce is going to cry.

129
00:04:32,750 --> 00:04:34,810
I'm sorry, Bruce.

130
00:04:34,810 --> 00:04:36,460
It's not around anymore.

131
00:04:36,460 --> 00:04:40,120
There's the device API Working
Group at the W3C that thought

132
00:04:40,120 --> 00:04:41,540
we need all these device APIs.

133
00:04:41,540 --> 00:04:43,870
Let's standardize all this
stuff, but they didn't think

134
00:04:43,870 --> 00:04:46,455
about the security model with
enabling things like camera

135
00:04:46,455 --> 00:04:49,390
and contacts and all
these device APIs.

136
00:04:49,390 --> 00:04:51,270
So there's a new group now
called the System Applications

137
00:04:51,270 --> 00:04:52,200
Working Group.

138
00:04:52,200 --> 00:04:55,220
And it's starting with the idea
of the runtime context

139
00:04:55,220 --> 00:04:56,030
and security model.

140
00:04:56,030 --> 00:04:58,700
And I'll talk about that
in a little bit.

141
00:04:58,700 --> 00:05:00,870
So to be really clear, what
we're talking about here is

142
00:05:00,870 --> 00:05:02,150
packaged web applications.

143
00:05:02,150 --> 00:05:04,600
We're not just talking about
packaged applications because

144
00:05:04,600 --> 00:05:05,630
packaged applications
have happened

145
00:05:05,630 --> 00:05:07,210
before and they've failed.

146
00:05:07,210 --> 00:05:08,880
The web is naturally
interoperable.

147
00:05:08,880 --> 00:05:12,160
The web has this DNA where
things are portable, and this

148
00:05:12,160 --> 00:05:13,070
is what we're looking for.

149
00:05:13,070 --> 00:05:15,980
And this is why packaged web
applications are important.

150
00:05:15,980 --> 00:05:19,910
So this is where shit gets
a little bit boring.

151
00:05:19,910 --> 00:05:21,950
Every application, or every
packaged application has to

152
00:05:21,950 --> 00:05:22,395
have a manifest.

153
00:05:22,395 --> 00:05:24,380
And a manifest is going to have
things like your title,

154
00:05:24,380 --> 00:05:28,100
your icon, your license, your
author, the things we need to

155
00:05:28,100 --> 00:05:30,020
know what to display
when we have a

156
00:05:30,020 --> 00:05:31,530
springboard for the app.

157
00:05:31,530 --> 00:05:33,080
But then it starts to get a
little bit more interesting.

158
00:05:33,080 --> 00:05:34,850
It also has to have an origin
because we need to know where

159
00:05:34,850 --> 00:05:37,320
to go to update it, which
kind of comes back

160
00:05:37,320 --> 00:05:39,130
to the offline stuff.

161
00:05:39,130 --> 00:05:41,110
And it also needs to have white
listing for the network

162
00:05:41,110 --> 00:05:43,640
because a packaged application
typically runs local on the

163
00:05:43,640 --> 00:05:46,210
device but it needs to
know where it can

164
00:05:46,210 --> 00:05:48,640
go to go get data.

165
00:05:48,640 --> 00:05:51,780
Packaged applications also have
permissions for features.

166
00:05:51,780 --> 00:05:53,740
We don't want every application
to have access to

167
00:05:53,740 --> 00:05:56,130
your front facing camera, and
so you have to be able to

168
00:05:56,130 --> 00:05:57,960
declare this.

169
00:05:57,960 --> 00:05:59,940
Packaged applications are
also a runtime context.

170
00:05:59,940 --> 00:06:02,170
So in the case of PhoneGap, we
run on the file protocol.

171
00:06:02,170 --> 00:06:06,610
So file://indexHTML is
where we load stuff.

172
00:06:06,610 --> 00:06:10,000
But this means that all these
applications intrinsically can

173
00:06:10,000 --> 00:06:12,450
do cross domain requests, which
is dangerous, which is

174
00:06:12,450 --> 00:06:14,760
why we have to white listing.

175
00:06:14,760 --> 00:06:16,930
The runtime context also has
some weird properties that are

176
00:06:16,930 --> 00:06:18,720
a little bit different than
other types of applications.

177
00:06:18,720 --> 00:06:21,480
So window.open, for example,
might open an in-app browser

178
00:06:21,480 --> 00:06:24,200
instead spawning a new tab.

179
00:06:24,200 --> 00:06:28,680
File system locations can be
different, that kind of thing.

180
00:06:28,680 --> 00:06:32,000
Thank god there's beer.

181
00:06:32,000 --> 00:06:32,650
OK.

182
00:06:32,650 --> 00:06:36,400
So I'm trying to go
quick here, Chris.

183
00:06:36,400 --> 00:06:37,520
Apps live a really
weird lifecycle.

184
00:06:37,520 --> 00:06:40,710
So an application right now in
a browser, you open a tab, it

185
00:06:40,710 --> 00:06:42,800
starts up, you're good to go.

186
00:06:42,800 --> 00:06:45,920
An application running in a
packaged application runs in

187
00:06:45,920 --> 00:06:47,810
kind of these different modes
and so we have online and

188
00:06:47,810 --> 00:06:49,480
offline events.

189
00:06:49,480 --> 00:06:52,100
I'm of the opinion that we
actually need more information

190
00:06:52,100 --> 00:06:54,370
than just online and offline
but we can talk about that

191
00:06:54,370 --> 00:06:55,810
over the beers later.

192
00:06:55,810 --> 00:06:57,570
We also have pause and resume
so there's something called

193
00:06:57,570 --> 00:07:00,510
the page visibility API in the
web but it's a little bit

194
00:07:00,510 --> 00:07:01,180
nascent right now.

195
00:07:01,180 --> 00:07:02,670
And it's the same thing, but
when you're looking at

196
00:07:02,670 --> 00:07:04,970
applications that are running on
a phone, we can put them in

197
00:07:04,970 --> 00:07:05,550
the background.

198
00:07:05,550 --> 00:07:08,760
They may or may not be able
to do anything about that.

199
00:07:08,760 --> 00:07:10,990
Then there's system
notifications.

200
00:07:10,990 --> 00:07:13,400
And so the classic example I
like to give here is a battery

201
00:07:13,400 --> 00:07:15,350
notification event-- if your
battery is about to die, you

202
00:07:15,350 --> 00:07:17,270
might want to back up
your information.

203
00:07:17,270 --> 00:07:19,240
We implemented this in PhoneGap
and unfortunately,

204
00:07:19,240 --> 00:07:22,560
polling the battery drained
the battery.

205
00:07:22,560 --> 00:07:24,900
So we didn't know what
to do to fix that.

206
00:07:24,900 --> 00:07:26,910
This is a property of packaged
applications too.

207
00:07:26,910 --> 00:07:29,480

208
00:07:29,480 --> 00:07:32,100
So there's runtime security
beyond the sandbox and this is

209
00:07:32,100 --> 00:07:33,830
where stuff is most
interesting.

210
00:07:33,830 --> 00:07:35,110
There's things like
network security.

211
00:07:35,110 --> 00:07:38,050
There's encrypted key stores
possibly on some devices where

212
00:07:38,050 --> 00:07:40,640
you can store data on
the phone securely.

213
00:07:40,640 --> 00:07:42,330
And that's where we get
to device APIs.

214
00:07:42,330 --> 00:07:45,240
So I like to put device
APIs into two buckets.

215
00:07:45,240 --> 00:07:48,360
You've got system sensors
and you've got data.

216
00:07:48,360 --> 00:07:50,270
Sensors are things like your
camera, your accelerometer,

217
00:07:50,270 --> 00:07:52,430
your geolocation, and
that kind of stuff.

218
00:07:52,430 --> 00:07:53,760
GPS.

219
00:07:53,760 --> 00:07:59,080
Data is like your file, your
contacts, your media.

220
00:07:59,080 --> 00:08:00,110
That's what we want to get at.

221
00:08:00,110 --> 00:08:01,780
That's what the web
can't do today.

222
00:08:01,780 --> 00:08:03,850
And that's where the web needs
to go if it wants to compete

223
00:08:03,850 --> 00:08:05,740
with the native platforms
that are out there.

224
00:08:05,740 --> 00:08:07,780
And that's why we're seeing
all this work going into

225
00:08:07,780 --> 00:08:09,380
standardization.

226
00:08:09,380 --> 00:08:12,700
So all this stuff is cool and
everybody wants it, but if

227
00:08:12,700 --> 00:08:13,720
we're not careful, we're
going to shoot

228
00:08:13,720 --> 00:08:15,200
ourselves in the face.

229
00:08:15,200 --> 00:08:17,720
And this is why runtime
security

230
00:08:17,720 --> 00:08:18,970
context is super important.

231
00:08:18,970 --> 00:08:21,650

232
00:08:21,650 --> 00:08:23,090
Awesome, right?

233
00:08:23,090 --> 00:08:24,410
I just wanted to use that GIF.

234
00:08:24,410 --> 00:08:25,428
It's all I got.

235
00:08:25,428 --> 00:08:26,678
Thanks.

236
00:08:26,678 --> 00:08:31,642

237
00:08:31,642 --> 00:08:34,039
Do you want to leave that?

238
00:08:34,039 --> 00:08:37,130
CHRIS HELLMANN: It might be a
bit annoying after a while.

239
00:08:37,130 --> 00:08:39,210
Let's just switch to
something nicer.

240
00:08:39,210 --> 00:08:41,059
How do I type Mozilla's hiring?

241
00:08:41,059 --> 00:08:42,169
No.

242
00:08:42,169 --> 00:08:43,049
OK.

243
00:08:43,049 --> 00:08:44,820
It's good when you get the
speakers drunk first because

244
00:08:44,820 --> 00:08:46,853
then they're much faster
than normally.

245
00:08:46,853 --> 00:08:48,460
BRIAN LEROUX: Did
I go too quick?

246
00:08:48,460 --> 00:08:48,780
CHRIS HELLMANN: No.

247
00:08:48,780 --> 00:08:49,430
That's OK.

248
00:08:49,430 --> 00:08:51,000
We've got more time for
questions then.

249
00:08:51,000 --> 00:08:52,300
That's pretty good.

250
00:08:52,300 --> 00:08:56,210
So as you said, it's an
interesting concept because I

251
00:08:56,210 --> 00:08:59,330
spent the last few months now
talking about Firefox OS to

252
00:08:59,330 --> 00:09:01,560
people and talking about
packaged apps to people.

253
00:09:01,560 --> 00:09:06,080
And every time you talk about
web apps and people are like,

254
00:09:06,080 --> 00:09:06,770
what is that?

255
00:09:06,770 --> 00:09:10,060
I don't quite understand it and
it seems to be this hybrid

256
00:09:10,060 --> 00:09:12,650
that people just don't
get around first.

257
00:09:12,650 --> 00:09:18,210
So to start with that, what do
you think is the main thing

258
00:09:18,210 --> 00:09:23,530
that keeps us from having proper
apps that could be, in

259
00:09:23,530 --> 00:09:27,030
terms of privileges,
on par with

260
00:09:27,030 --> 00:09:29,530
native apps at the moment?

261
00:09:29,530 --> 00:09:30,990
Is it an understanding
problem?

262
00:09:30,990 --> 00:09:35,060
Is it that every provider has
a different manifest format?

263
00:09:35,060 --> 00:09:37,670
Is it that people just don't
trust web apps yet?

264
00:09:37,670 --> 00:09:39,370
What do you think is the biggest
barrier that we have

265
00:09:39,370 --> 00:09:39,970
to overcome?

266
00:09:39,970 --> 00:09:41,190
Let's go through
you one by one.

267
00:09:41,190 --> 00:09:43,640
Diana, what do think?

268
00:09:43,640 --> 00:09:43,890
DIANA CHENG: OK.

269
00:09:43,890 --> 00:09:45,290
There are few things.

270
00:09:45,290 --> 00:09:47,520
Application packaging
is an issue.

271
00:09:47,520 --> 00:09:50,082
It's completely fragmented
at the moment.

272
00:09:50,082 --> 00:09:50,560
Yeah.

273
00:09:50,560 --> 00:09:53,490
This is the way I'm supposed
to hold it.

274
00:09:53,490 --> 00:09:56,370
Another issue is security.

275
00:09:56,370 --> 00:09:59,280
So everything that runs
in the browser has to

276
00:09:59,280 --> 00:10:01,950
have limited access.

277
00:10:01,950 --> 00:10:06,620
So as has been mentioned,
[INAUDIBLE] had a different

278
00:10:06,620 --> 00:10:07,190
device APIs.

279
00:10:07,190 --> 00:10:12,630
Working Group had a different
surface [? cope ?] first and

280
00:10:12,630 --> 00:10:15,930
it was called device APIs and
policy working group.

281
00:10:15,930 --> 00:10:20,020
And then the policy bit got
dropped because websites are

282
00:10:20,020 --> 00:10:20,810
intrinsically--

283
00:10:20,810 --> 00:10:22,770
or you have to assume that
they're going to be malicious,

284
00:10:22,770 --> 00:10:24,110
that they can do
a lot of harm.

285
00:10:24,110 --> 00:10:28,756
So they cannot get write
access to a lot

286
00:10:28,756 --> 00:10:31,300
of data on the device.

287
00:10:31,300 --> 00:10:32,890
They need to be sandboxed
and all that.

288
00:10:32,890 --> 00:10:36,480
So we need a different
sort of runtime.

289
00:10:36,480 --> 00:10:37,730
We need a security model.

290
00:10:37,730 --> 00:10:40,670

291
00:10:40,670 --> 00:10:46,560
You know that the new working
group is working on new APIs

292
00:10:46,560 --> 00:10:53,130
that have extended permissions
that will be installable, that

293
00:10:53,130 --> 00:10:54,980
will, hopefully, be certified
by an app

294
00:10:54,980 --> 00:10:58,240
store, will be signed.

295
00:10:58,240 --> 00:11:01,590
And this is one of the
things that is new.

296
00:11:01,590 --> 00:11:04,650
And it's great that we have
implementations like Firefox

297
00:11:04,650 --> 00:11:08,000
OS and they're going to
put this in the wild.

298
00:11:08,000 --> 00:11:09,110
It's not going to
be just specs.

299
00:11:09,110 --> 00:11:11,580
It's going to be an
implementation.

300
00:11:11,580 --> 00:11:13,880
CHRIS HELLMANN: Cool.

301
00:11:13,880 --> 00:11:14,135
PAUL KINLAN: Yeah.

302
00:11:14,135 --> 00:11:17,600
So I think the biggest thing
for me is we haven't got a

303
00:11:17,600 --> 00:11:19,550
unified permissions model.

304
00:11:19,550 --> 00:11:20,520
We don't know.

305
00:11:20,520 --> 00:11:22,490
If you're on the open web and
you're kind of driving past a

306
00:11:22,490 --> 00:11:25,790
URL, we haven't got anything
that's even slightly

307
00:11:25,790 --> 00:11:28,800
considered compatible
across browsers.

308
00:11:28,800 --> 00:11:31,870
And I also think we haven't even
dealt with the fact that

309
00:11:31,870 --> 00:11:33,210
a lot of the things that
we want to do in native

310
00:11:33,210 --> 00:11:35,970
applications we want to do
with things like USB.

311
00:11:35,970 --> 00:11:39,300
And we don't even know how
to like opt the user

312
00:11:39,300 --> 00:11:41,220
into access a device.

313
00:11:41,220 --> 00:11:45,270
In Chrome, we've got the ability
to query some device

314
00:11:45,270 --> 00:11:47,770
ID to see if it's present on the
USB bus and then you can

315
00:11:47,770 --> 00:11:49,270
open it up and read
and write to it.

316
00:11:49,270 --> 00:11:51,300
But we're still trying to make
sure that we've got that

317
00:11:51,300 --> 00:11:53,000
permissions model quite right.

318
00:11:53,000 --> 00:11:54,204
BRIAN LEROUX: And isn't
that like a

319
00:11:54,204 --> 00:11:56,220
fingerprinting issue too?

320
00:11:56,220 --> 00:11:57,530
PAUL KINLAN: Yes.

321
00:11:57,530 --> 00:12:00,310
Well, that's actually why it
changed relatively recently.

322
00:12:00,310 --> 00:12:01,800
Well, not exactly
why it changed.

323
00:12:01,800 --> 00:12:02,708
BRIAN LEROUX: You've
accepted that

324
00:12:02,708 --> 00:12:04,524
fingerprinting is going to happen?

325
00:12:04,524 --> 00:12:07,200
PAUL KINLAN: Well I think
everyone always has to accept

326
00:12:07,200 --> 00:12:09,520
fingerprinting at some point
is going to happen.

327
00:12:09,520 --> 00:12:11,415
You can look at the EFF website
or whatever it is and

328
00:12:11,415 --> 00:12:13,490
they'll show you all the unique
characteristics of your

329
00:12:13,490 --> 00:12:15,440
normal browsing session.

330
00:12:15,440 --> 00:12:18,070
The thing from the USB side of
things is that we're trying to

331
00:12:18,070 --> 00:12:20,850
get to this place where, maybe
in the manifest, you say that

332
00:12:20,850 --> 00:12:24,020
this application can have access
to your Fitbit or those

333
00:12:24,020 --> 00:12:26,980
types of different devices
because you normally have a

334
00:12:26,980 --> 00:12:28,420
vendor ID and a product ID.

335
00:12:28,420 --> 00:12:31,740
And then that might actually put
people off from actually

336
00:12:31,740 --> 00:12:32,950
installing the application,
especially if

337
00:12:32,950 --> 00:12:33,570
they don't have it.

338
00:12:33,570 --> 00:12:38,430
So we're starting to also move
to this idea of a runtime

339
00:12:38,430 --> 00:12:40,670
permissions model for those
types of things.

340
00:12:40,670 --> 00:12:42,720
And I don't think any of the
browser vendors have even got

341
00:12:42,720 --> 00:12:45,710
to any level of consistency.

342
00:12:45,710 --> 00:12:47,190
That's my biggest thing.

343
00:12:47,190 --> 00:12:48,470
CHRIS HELLMANN: Cool.

344
00:12:48,470 --> 00:12:51,620
PETRO SOININEN: I think for me
it's the thing that even if

345
00:12:51,620 --> 00:12:56,080
you actually understand what
the hybrid concept or the

346
00:12:56,080 --> 00:12:59,000
package web app concept is, is
that a lot of the customers

347
00:12:59,000 --> 00:13:03,410
that we work with just say that
they don't have enough

348
00:13:03,410 --> 00:13:07,980
experience or enough examples
of packaged web apps that

349
00:13:07,980 --> 00:13:10,680
actually do deliver the
UX that they're

350
00:13:10,680 --> 00:13:11,580
going to be happy with.

351
00:13:11,580 --> 00:13:16,330
So I think that we still lack
real showcases and real kick

352
00:13:16,330 --> 00:13:20,170
ass applications that
actually deliver.

353
00:13:20,170 --> 00:13:21,890
CHRIS HELLMANN: Which is quite
bizarre because seeing that

354
00:13:21,890 --> 00:13:24,400
even in the native markets,
a lot of them are actually

355
00:13:24,400 --> 00:13:26,560
packaged apps with PhoneGap.

356
00:13:26,560 --> 00:13:28,570
They're just not advertised
as those.

357
00:13:28,570 --> 00:13:29,370
BRIAN LEROUX: That's right.

358
00:13:29,370 --> 00:13:30,190
Yeah.

359
00:13:30,190 --> 00:13:32,546
CHRIS HELLMANN: And some AIR
ones as well, funnily enough.

360
00:13:32,546 --> 00:13:33,340
BRIAN LEROUX: Tons.

361
00:13:33,340 --> 00:13:35,442
CHRIS HELLMANN: Yeah.

362
00:13:35,442 --> 00:13:38,800
So the questions to moderator
are actually all going around

363
00:13:38,800 --> 00:13:42,330
the same topic, which is the
biggest topic that everybody

364
00:13:42,330 --> 00:13:47,160
has to deal with, how do I make
my end users realize that

365
00:13:47,160 --> 00:13:49,320
they're giving permission
right now?

366
00:13:49,320 --> 00:13:52,050
Do we really need to ask for
permission for everything?

367
00:13:52,050 --> 00:13:54,430
And how do we make sure we don't
overload people with a

368
00:13:54,430 --> 00:13:56,750
question every time they
do one action?

369
00:13:56,750 --> 00:13:58,120
Do you want to move
the mouse left?

370
00:13:58,120 --> 00:13:58,700
Are you sure?

371
00:13:58,700 --> 00:13:59,080
BRIAN LEROUX: Yeah.

372
00:13:59,080 --> 00:14:00,820
CHRIS HELLMANN: These
kind of things.

373
00:14:00,820 --> 00:14:01,890
Where do we draw the line?

374
00:14:01,890 --> 00:14:03,910
What is the real problem
with that?

375
00:14:03,910 --> 00:14:06,820
BRIAN LEROUX: This is the key
issue to me because we don't

376
00:14:06,820 --> 00:14:10,200
want to have web Vista where
it's like asking permission

377
00:14:10,200 --> 00:14:11,030
for everything.

378
00:14:11,030 --> 00:14:12,430
Can I access your camera?

379
00:14:12,430 --> 00:14:13,600
Can I access your contacts?

380
00:14:13,600 --> 00:14:15,000
Can I use your file system?

381
00:14:15,000 --> 00:14:16,780
That user experience
would totally suck.

382
00:14:16,780 --> 00:14:20,840
At the same time, we don't want
the user experience to be

383
00:14:20,840 --> 00:14:24,380
website XXX has access to my
front facing camera and my

384
00:14:24,380 --> 00:14:28,180
contacts, and yeah, we don't
have to go any further with

385
00:14:28,180 --> 00:14:31,385
that analogy to know that
that's a bad thing.

386
00:14:31,385 --> 00:14:31,820
CHRIS HELLMANN: Speak
for yourself.

387
00:14:31,820 --> 00:14:33,750
BRIAN LEROUX: So browser vendors
are challenged by this

388
00:14:33,750 --> 00:14:37,420
too because I think Google's
proposing something.

389
00:14:37,420 --> 00:14:39,160
They're trying to come up with
language in the system

390
00:14:39,160 --> 00:14:41,450
applications working group.

391
00:14:41,450 --> 00:14:43,610
How do we have this thing called
like a trust gesture

392
00:14:43,610 --> 00:14:47,390
where you say to the browser,
hey, I trust this thing maybe

393
00:14:47,390 --> 00:14:50,130
one time, or I trust it
for all the time.

394
00:14:50,130 --> 00:14:52,280
We wanted to be able to get back
to those permissions and

395
00:14:52,280 --> 00:14:55,430
look at them and maybe revoke
them possibly in case website

396
00:14:55,430 --> 00:14:58,000
XXX turns a new leaf.

397
00:14:58,000 --> 00:14:59,610
CHRIS HELLMANN: It's also
no timely access.

398
00:14:59,610 --> 00:15:01,790
It always seems like it would
be a black and white thing.

399
00:15:01,790 --> 00:15:04,020
I give access and that's it,
but I could grant, for

400
00:15:04,020 --> 00:15:07,460
example, a guest pass for an
app to access my camera for

401
00:15:07,460 --> 00:15:11,230
the next five minutes and then
I have to revoke that again,

402
00:15:11,230 --> 00:15:13,130
or it revokes automatically.

403
00:15:13,130 --> 00:15:16,730
I mean, Flickr had this for
guest access to your photos,

404
00:15:16,730 --> 00:15:19,640
for example, that you could
send somebody a string and

405
00:15:19,640 --> 00:15:22,020
like within an hour they could
look at your stuff but after

406
00:15:22,020 --> 00:15:23,790
an hour they can't
login anymore.

407
00:15:23,790 --> 00:15:25,260
That would be another
way of dealing with

408
00:15:25,260 --> 00:15:26,860
that, wouldn't it?

409
00:15:26,860 --> 00:15:28,700
That I could say, OK, for the
next five minutes I want to

410
00:15:28,700 --> 00:15:31,040
try that app out but after that,
you don't get access to

411
00:15:31,040 --> 00:15:32,440
the camera anymore.

412
00:15:32,440 --> 00:15:34,900
PAUL KINLAN: I mean, we could,
but that exists anyway, right,

413
00:15:34,900 --> 00:15:38,070
in the sense that if you do a
get-user media it normally

414
00:15:38,070 --> 00:15:41,580
pops up a little bar
across the top.

415
00:15:41,580 --> 00:15:43,320
It's because the hardware
manufacturer actually puts a

416
00:15:43,320 --> 00:15:45,690
little LED at the front so you
know it's on, it's actually

417
00:15:45,690 --> 00:15:46,220
doing stuff.

418
00:15:46,220 --> 00:15:49,050
But once you actually finish
with the stream, then it

419
00:15:49,050 --> 00:15:49,570
closes down.

420
00:15:49,570 --> 00:15:51,310
The next time that you request
it you get the

421
00:15:51,310 --> 00:15:52,250
prompt again normally.

422
00:15:52,250 --> 00:15:54,180
CHRIS HELLMANN: Yeah.

423
00:15:54,180 --> 00:15:54,510
PAUL KINLAN: I don't know.

424
00:15:54,510 --> 00:15:57,240
I look at kind of having to
re-grant storage permissions

425
00:15:57,240 --> 00:15:58,730
and increase storage.

426
00:15:58,730 --> 00:16:01,470
People just press the buttons
normally and we don't know

427
00:16:01,470 --> 00:16:02,400
what's going to happen, right?

428
00:16:02,400 --> 00:16:03,880
BRIAN LEROUX: That's the
Android problem.

429
00:16:03,880 --> 00:16:06,190
It's like, oh, this app wants
to do everything.

430
00:16:06,190 --> 00:16:07,510
Cool.

431
00:16:07,510 --> 00:16:08,436
Install.

432
00:16:08,436 --> 00:16:10,210
That's what happens.

433
00:16:10,210 --> 00:16:12,538
Then, later on, you don't know
what permissions you've

434
00:16:12,538 --> 00:16:14,435
granted this thing because you
can't find it because it's

435
00:16:14,435 --> 00:16:16,660
buried in the system.

436
00:16:16,660 --> 00:16:18,620
CHRIS HELLMANN: One good
question was also when you

437
00:16:18,620 --> 00:16:21,050
look at Facebook, for example,
you can give access to

438
00:16:21,050 --> 00:16:22,080
everything in the world.

439
00:16:22,080 --> 00:16:24,850
Then this app turns out to be
evil and you can actually stop

440
00:16:24,850 --> 00:16:25,700
that access.

441
00:16:25,700 --> 00:16:28,900
So you have a dashboard of all
the apps and what access they

442
00:16:28,900 --> 00:16:30,210
have to which device.

443
00:16:30,210 --> 00:16:32,115
So there's a centralized
way of doing that.

444
00:16:32,115 --> 00:16:34,700
Would that be a solution that
we could think about?

445
00:16:34,700 --> 00:16:38,560
That instead of every app having
to ask these things, I

446
00:16:38,560 --> 00:16:40,750
have a dashboard of this
app has access

447
00:16:40,750 --> 00:16:41,690
to these five things.

448
00:16:41,690 --> 00:16:45,520
So you have one grid on your
system that actually allows

449
00:16:45,520 --> 00:16:48,180
you to control all of that.

450
00:16:48,180 --> 00:16:48,306
PETRO SOININEN: Yeah.

451
00:16:48,306 --> 00:16:52,060
I think I'm in this on
the previous kind of

452
00:16:52,060 --> 00:16:53,010
proposal that you make.

453
00:16:53,010 --> 00:16:53,930
They both make sense.

454
00:16:53,930 --> 00:16:56,690
And there are a lot of
other good ideas on

455
00:16:56,690 --> 00:16:57,490
this front as well.

456
00:16:57,490 --> 00:17:00,440
But I think one of the key
things is also just to make

457
00:17:00,440 --> 00:17:03,210
sure that users actually
understand what are they

458
00:17:03,210 --> 00:17:04,819
accepting and then, again,
the mechanisms--

459
00:17:04,819 --> 00:17:06,540
how they can actually
control it.

460
00:17:06,540 --> 00:17:09,500
So as you said, that they're
probably just going to be

461
00:17:09,500 --> 00:17:12,738
pressing the OK, OK, OK and
not really think about it.

462
00:17:12,738 --> 00:17:14,349
But that's not really
technology.

463
00:17:14,349 --> 00:17:18,200
It's more like psychology and
trying to figure out how

464
00:17:18,200 --> 00:17:19,470
humans think.

465
00:17:19,470 --> 00:17:21,550
BRIAN LEROUX: Paul , you were
talking about this at lunch.

466
00:17:21,550 --> 00:17:26,920
You guys had difficulty with
the messaging or something.

467
00:17:26,920 --> 00:17:28,430
PAUL KINLAN: Yeah.

468
00:17:28,430 --> 00:17:30,630
If you look at the way that we
have our installable kind of

469
00:17:30,630 --> 00:17:34,040
hosted apps and packaged apps
in the next packaged apps,

470
00:17:34,040 --> 00:17:39,190
essentially, we have had kind
of this messaging issue.

471
00:17:39,190 --> 00:17:41,600
If you go to install the
application, and you're on,

472
00:17:41,600 --> 00:17:43,160
say, the detail page, it'll
tell you all the

473
00:17:43,160 --> 00:17:44,510
things that it does.

474
00:17:44,510 --> 00:17:46,030
I don't know how many users
actually look at that.

475
00:17:46,030 --> 00:17:49,840
But when you press install,
there are at least three

476
00:17:49,840 --> 00:17:52,650
different levels of ways that
we prompt the user.

477
00:17:52,650 --> 00:17:56,030
So for some things like
unlimited storage, which is a

478
00:17:56,030 --> 00:17:58,810
permission that you can have,
we don't even tell the user.

479
00:17:58,810 --> 00:18:00,210
It's just kind of assumed.

480
00:18:00,210 --> 00:18:01,680
There is, to your point before,
there's actually a

481
00:18:01,680 --> 00:18:04,390
dashboard inside Chrome where
you can normally access like

482
00:18:04,390 --> 00:18:07,430
the levels of permissions that
your applications have and

483
00:18:07,430 --> 00:18:08,550
revoke them.

484
00:18:08,550 --> 00:18:10,100
But normally, when you revoke
something, it means

485
00:18:10,100 --> 00:18:11,230
uninstalling the application.

486
00:18:11,230 --> 00:18:13,670
So that's a different
part as well.

487
00:18:13,670 --> 00:18:14,900
CHRIS HELLMANN: Is it
an innovation thing?

488
00:18:14,900 --> 00:18:18,230
Because we had app cache, then
we had local storage, then we

489
00:18:18,230 --> 00:18:21,760
have Nxdb, then we got web SQL,
and we put an interface

490
00:18:21,760 --> 00:18:24,510
for each of them in the browser
rather than having one

491
00:18:24,510 --> 00:18:27,350
interface for storage and saying
OK, this app wants to

492
00:18:27,350 --> 00:18:29,870
store stuff offline, wants to
store things in a database,

493
00:18:29,870 --> 00:18:31,710
and wants to store things
only for this session.

494
00:18:31,710 --> 00:18:33,420
Do you want to allow this?

495
00:18:33,420 --> 00:18:36,390
Is it now the time to actually
look at all the browsers again

496
00:18:36,390 --> 00:18:38,720
and find a unified interface
for that?

497
00:18:38,720 --> 00:18:40,500
PAUL KINLAN: I mean, there's
also this idea of quota system

498
00:18:40,500 --> 00:18:43,140
which has been banging around
for a little while.

499
00:18:43,140 --> 00:18:45,870
You can request some storage
or an increase in unlimited

500
00:18:45,870 --> 00:18:47,630
storage, for instance, and
it goes across all of the

501
00:18:47,630 --> 00:18:49,720
different types of persistence
mechanisms that you have

502
00:18:49,720 --> 00:18:50,460
inside the browser.

503
00:18:50,460 --> 00:18:52,360
BRIAN LEROUX: Is that
the Quota API?

504
00:18:52,360 --> 00:18:52,640
PAUL KINLAN: Yeah.

505
00:18:52,640 --> 00:18:53,240
BRIAN LEROUX: Yeah,
yeah, yeah.

506
00:18:53,240 --> 00:18:54,050
PAUL KINLAN: Yeah.

507
00:18:54,050 --> 00:18:55,190
These things exist.

508
00:18:55,190 --> 00:18:56,710
We just don't think we've
got consensus

509
00:18:56,710 --> 00:18:59,960
amongst the vendors yet.

510
00:18:59,960 --> 00:19:01,130
I don't know what we do
other than talk more.

511
00:19:01,130 --> 00:19:03,480
CHRIS HELLMANN: Diana,
you wanted to--

512
00:19:03,480 --> 00:19:03,710
DIANA CHENG: Yeah.

513
00:19:03,710 --> 00:19:06,030
I just wanted to say with
regards to that, it's a

514
00:19:06,030 --> 00:19:09,270
difficult thing to agree on
because there is no place to

515
00:19:09,270 --> 00:19:09,920
agree on that.

516
00:19:09,920 --> 00:19:12,700
So this is not something you
can write on a spec.

517
00:19:12,700 --> 00:19:13,160
Right?

518
00:19:13,160 --> 00:19:16,780
On the spec you write things
that are testable, that are

519
00:19:16,780 --> 00:19:20,190
verifiable, but you don't
test UI stuff.

520
00:19:20,190 --> 00:19:24,050
Even in geolocation there was
only so much we could ask.

521
00:19:24,050 --> 00:19:28,700
You should specify the host of
the site that is requesting

522
00:19:28,700 --> 00:19:30,340
the permission and
you show that.

523
00:19:30,340 --> 00:19:35,380
But it's very, very hard to find
a place where you make

524
00:19:35,380 --> 00:19:37,270
people agree on this.

525
00:19:37,270 --> 00:19:38,990
CHRIS HELLMANN: So during lunch,
we talked about widgets

526
00:19:38,990 --> 00:19:41,150
already and I remember
both Vodaphone--

527
00:19:41,150 --> 00:19:43,360
I worked back then on it-- and
Opera were the first ones to

528
00:19:43,360 --> 00:19:46,200
do W3C widgets to actually
have little apps on your

529
00:19:46,200 --> 00:19:49,410
desktop that can run even
when Opera was closed.

530
00:19:49,410 --> 00:19:52,590
So that didn't take on.

531
00:19:52,590 --> 00:19:54,300
Why do you think?

532
00:19:54,300 --> 00:19:57,270
We needed the app model on
mobile phones for people to go

533
00:19:57,270 --> 00:19:58,600
back to the app idea?

534
00:19:58,600 --> 00:20:01,840
Or is it just that on a desktop
nobody understood the

535
00:20:01,840 --> 00:20:04,905
concept of having an app that
actually is in web standards?

536
00:20:04,905 --> 00:20:09,490

537
00:20:09,490 --> 00:20:11,470
PAUL KINLAN: I don't know what
the official answer is, but

538
00:20:11,470 --> 00:20:13,870
it's like just generally
widget was a

539
00:20:13,870 --> 00:20:15,400
weird word, for one.

540
00:20:15,400 --> 00:20:17,920
It didn't denote anything like
an installable application for

541
00:20:17,920 --> 00:20:19,500
me at least when I was
looking at it.

542
00:20:19,500 --> 00:20:21,110
BRIAN LEROUX: I believe they're
an evangelism team.

543
00:20:21,110 --> 00:20:25,950

544
00:20:25,950 --> 00:20:28,854
AUDIENCE: At the time somebody
begged them to change the

545
00:20:28,854 --> 00:20:30,320
stupid name.

546
00:20:30,320 --> 00:20:30,790
PAUL KINLAN: Yeah.

547
00:20:30,790 --> 00:20:33,210
If you look at the spec, a lot
of this stuff is very similar

548
00:20:33,210 --> 00:20:36,790
across all the manifests that we
have apart from it's an XML

549
00:20:36,790 --> 00:20:38,040
and not in the JavaScript
notation.

550
00:20:38,040 --> 00:20:40,710

551
00:20:40,710 --> 00:20:42,880
It's kind of interesting.

552
00:20:42,880 --> 00:20:45,890
CHRIS HELLMANN: So one question
that people had was,

553
00:20:45,890 --> 00:20:49,710
now that every single app
platform, like packaged app

554
00:20:49,710 --> 00:20:52,810
platform in HTML has a different
manifest file, is

555
00:20:52,810 --> 00:20:55,480
there a way to actually
automate that?

556
00:20:55,480 --> 00:20:56,900
Is there already a script
out there--

557
00:20:56,900 --> 00:20:57,306
PAUL KINLAN: Appmeter.com.

558
00:20:57,306 --> 00:20:59,290
CHRIS HELLMANN: --to generate
all of them?

559
00:20:59,290 --> 00:20:59,560
PAUL KINLAN: Yep.

560
00:20:59,560 --> 00:21:01,920
We made one called Appmeter
which did Chrome apps, that

561
00:21:01,920 --> 00:21:04,210
was very specific to Chrome apps
but Firefox apps aren't

562
00:21:04,210 --> 00:21:05,710
too dissimilar.

563
00:21:05,710 --> 00:21:08,060
I think, Bruce, you had one?

564
00:21:08,060 --> 00:21:08,530
Or you--

565
00:21:08,530 --> 00:21:11,722
AUDIENCE: Scott Wilson from
Apache Project had--

566
00:21:11,722 --> 00:21:12,178
PAUL KINLAN: OK.

567
00:21:12,178 --> 00:21:13,550
AUDIENCE: [INAUDIBLE]
translate Chrome.

568
00:21:13,550 --> 00:21:13,625
PAUL KINLAN: Yeah.

569
00:21:13,625 --> 00:21:16,290
There's been a couple of these
ones where the core

570
00:21:16,290 --> 00:21:17,720
functionality in most
of the browsers is

571
00:21:17,720 --> 00:21:18,830
pretty much the same.

572
00:21:18,830 --> 00:21:20,960
We are diverging now a little
bit where we're starting to

573
00:21:20,960 --> 00:21:22,240
get more hardware access.

574
00:21:22,240 --> 00:21:24,640
But we're still, as an industry,
exploring what that

575
00:21:24,640 --> 00:21:27,560
means and kind of what
that entails.

576
00:21:27,560 --> 00:21:29,740
But yeah, we've had the ability
to kind of convert

577
00:21:29,740 --> 00:21:32,850
between them but I've not seen
a huge appetite for it.

578
00:21:32,850 --> 00:21:35,230
BRIAN LEROUX: We've got a
library called Confetti in the

579
00:21:35,230 --> 00:21:37,470
PhoneGap project that
will spit out all

580
00:21:37,470 --> 00:21:39,610
the different formats.

581
00:21:39,610 --> 00:21:42,990
So instead of trying to push
an agenda on one format, we

582
00:21:42,990 --> 00:21:44,864
just decided we would
support all of them.

583
00:21:44,864 --> 00:21:48,040

584
00:21:48,040 --> 00:21:49,430
CHRIS HELLMANN: It's interesting
because the apps

585
00:21:49,430 --> 00:21:51,090
themselves are they
that different?

586
00:21:51,090 --> 00:21:54,460
It's like, can you just build
one app and just render it on

587
00:21:54,460 --> 00:21:55,550
all the different platforms?

588
00:21:55,550 --> 00:21:58,580
Because if we're not
inter-compatible in HTML5

589
00:21:58,580 --> 00:22:02,530
itself, then we can not really
tell the native clients off

590
00:22:02,530 --> 00:22:04,030
that they're on.

591
00:22:04,030 --> 00:22:06,710
DIANA CHENG: Besides from the
manifest format, I don't know.

592
00:22:06,710 --> 00:22:08,360
I mean, the technologies
are the same.

593
00:22:08,360 --> 00:22:10,680
It's a package directory.

594
00:22:10,680 --> 00:22:14,080
And I think since Alex is at the
front that maybe this is

595
00:22:14,080 --> 00:22:18,560
something that TAG could
address, like the

596
00:22:18,560 --> 00:22:21,310
fragmentation, in terms
of packaging format.

597
00:22:21,310 --> 00:22:25,880
It's a long term problem in the
W3C and it would be good

598
00:22:25,880 --> 00:22:28,000
to find solutions.

599
00:22:28,000 --> 00:22:29,370
BRIAN LEROUX: Save the
internet, Alex.

600
00:22:29,370 --> 00:22:31,470
PAUL KINLAN: Yeah.

601
00:22:31,470 --> 00:22:36,120
Yeah so we've got different APIs
at the moment as well.

602
00:22:36,120 --> 00:22:37,750
Fundamentally, I think Mozilla's
got the web API

603
00:22:37,750 --> 00:22:40,430
system and we've got our
own Chrome name space.

604
00:22:40,430 --> 00:22:42,470
Until that kind of settles down
and we know exactly what

605
00:22:42,470 --> 00:22:45,860
we need from APIs.

606
00:22:45,860 --> 00:22:48,400
A normal web application, like
something that you would

607
00:22:48,400 --> 00:22:50,200
expect to get in your browser
but that's got a little bit of

608
00:22:50,200 --> 00:22:52,440
installability and all this type
of stuff, we've probably

609
00:22:52,440 --> 00:22:55,260
got broadly compatible across
a lot of these platforms.

610
00:22:55,260 --> 00:22:59,560
It's when you get to these new
bits like UDP, TCP, USB,

611
00:22:59,560 --> 00:23:01,700
Bluetooth, these things that
people want from their native

612
00:23:01,700 --> 00:23:03,370
applications, but we don't
have access to

613
00:23:03,370 --> 00:23:05,430
them inside the browser.

614
00:23:05,430 --> 00:23:07,130
We have to work on that
all together.

615
00:23:07,130 --> 00:23:08,400
CHRIS HELLMANN: Shouldn't
they already want to?

616
00:23:08,400 --> 00:23:10,450
Isn't the big problem that I
can't take a photo at the

617
00:23:10,450 --> 00:23:13,130
moment across browsers?

618
00:23:13,130 --> 00:23:15,190
Aren't we already thinking about
the hard projects where

619
00:23:15,190 --> 00:23:17,770
we don't even have parity with
native apps at the moment?

620
00:23:17,770 --> 00:23:18,950
PAUL KINLAN: I mean, the latest
browsers we can take

621
00:23:18,950 --> 00:23:21,670
photos and we can save
them in the gallery.

622
00:23:21,670 --> 00:23:22,600
We can do these things.

623
00:23:22,600 --> 00:23:25,110
We might have not done a greater
job at evangelizing

624
00:23:25,110 --> 00:23:25,610
these bits--

625
00:23:25,610 --> 00:23:28,190
CHRIS HELLMANN: Well then,
do it in the iPhone.

626
00:23:28,190 --> 00:23:30,050
PAUL KINLAN: You can, in the
latest one, I think.

627
00:23:30,050 --> 00:23:30,470
BRIAN LEROUX: You can.

628
00:23:30,470 --> 00:23:31,530
Media capture is there.

629
00:23:31,530 --> 00:23:32,260
PAUL KINLAN: Yeah.

630
00:23:32,260 --> 00:23:32,770
Input type.

631
00:23:32,770 --> 00:23:34,810
BRIAN LEROUX: It's [INAUDIBLE]
user media but it's input type

632
00:23:34,810 --> 00:23:35,710
in the camera.

633
00:23:35,710 --> 00:23:37,530
It declared [INAUDIBLE].

634
00:23:37,530 --> 00:23:38,880
CHRIS HELLMANN: OK.

635
00:23:38,880 --> 00:23:39,950
Question there?

636
00:23:39,950 --> 00:23:40,490
AUDIENCE: Yes.

637
00:23:40,490 --> 00:23:42,050
[? Jonas Sicking ?]

638
00:23:42,050 --> 00:23:43,130
from Mozilla.

639
00:23:43,130 --> 00:23:45,970
I've done a lot of work on that
platform for Firefox OS

640
00:23:45,970 --> 00:23:48,620
including the web
APIs and so on.

641
00:23:48,620 --> 00:23:51,590
One of the reasons we don't have
compatible manifests, is

642
00:23:51,590 --> 00:23:53,500
that we haven't actually
tried.

643
00:23:53,500 --> 00:23:56,960
The device API group went off
and did all the APIs but it's

644
00:23:56,960 --> 00:23:59,100
kind of like they came at it
from the wrong way of not

645
00:23:59,100 --> 00:24:03,190
doing the runtime first which
is why there was no common

646
00:24:03,190 --> 00:24:06,450
ground to sort of build these
things on top of it.

647
00:24:06,450 --> 00:24:09,510
The sys apps working group is
the first real time we're

648
00:24:09,510 --> 00:24:12,780
actually trying to standardize
the packaging format, the

649
00:24:12,780 --> 00:24:15,950
runtime model.

650
00:24:15,950 --> 00:24:19,730
There are proposals a couple
of them including one from

651
00:24:19,730 --> 00:24:23,800
Mozilla for defining a
standardized manifest and

652
00:24:23,800 --> 00:24:25,900
packaging format and so on.

653
00:24:25,900 --> 00:24:27,390
I also wanted, since I
have the microphone--

654
00:24:27,390 --> 00:24:31,260

655
00:24:31,260 --> 00:24:35,180
the app model in Firefox
OS is absolutely not

656
00:24:35,180 --> 00:24:37,860
packaged apps only.

657
00:24:37,860 --> 00:24:41,420
We do a lot to enable web
applications to run just like

658
00:24:41,420 --> 00:24:45,345
a normal website runs today, but
as much as possible enable

659
00:24:45,345 --> 00:24:48,170
it offline, which it's not quite
there yet but we are

660
00:24:48,170 --> 00:24:49,360
hoping to get it there.

661
00:24:49,360 --> 00:24:52,460
BRIAN LEROUX: I honestly don't
think it's an issue either.

662
00:24:52,460 --> 00:24:54,070
It's just a metafile format.

663
00:24:54,070 --> 00:24:56,510
And it's kind of the
most boring bits.

664
00:24:56,510 --> 00:24:59,130
The permissions is going to be
the thing that needs be solved

665
00:24:59,130 --> 00:25:02,450
and the rest of it's like
where's your app icons and

666
00:25:02,450 --> 00:25:04,870
what's the title on the
springboard and that type of

667
00:25:04,870 --> 00:25:05,830
thing which is--

668
00:25:05,830 --> 00:25:06,700
PAUL KINLAN: There's also the
point that [? Jonas ?]

669
00:25:06,700 --> 00:25:09,160
mentioned a second
ago is offline.

670
00:25:09,160 --> 00:25:11,350
That was like the very first
thing that we tried to do in

671
00:25:11,350 --> 00:25:13,390
the next version of Chrome Maps
is make sure the offline

672
00:25:13,390 --> 00:25:15,760
is kind of deep like baked in
completely, which means that

673
00:25:15,760 --> 00:25:18,630
we've gone away on that side of
things from like the hosted

674
00:25:18,630 --> 00:25:20,690
model right now.

675
00:25:20,690 --> 00:25:22,110
But we thought that was the
biggest thing because if you

676
00:25:22,110 --> 00:25:27,290
move into phones and iPad,
iPhone, and Android, it's a

677
00:25:27,290 --> 00:25:28,070
different development model.

678
00:25:28,070 --> 00:25:29,680
You're offline straight away and
then you need [? to put ?]

679
00:25:29,680 --> 00:25:31,440
online functionality
into your app.

680
00:25:31,440 --> 00:25:34,050
And we believe that, at least
for installable apps right

681
00:25:34,050 --> 00:25:37,010
now, that's the way we
should be going.

682
00:25:37,010 --> 00:25:39,960
CHRIS HELLMANN: One question
here is, to go back into the

683
00:25:39,960 --> 00:25:44,150
UX what everybody asked about,
how do we ensure that people

684
00:25:44,150 --> 00:25:47,760
know the impact of what
they're granting?

685
00:25:47,760 --> 00:25:49,700
How do we make sure that people
don't go through the

686
00:25:49,700 --> 00:25:52,200
Android way of like yeah,
yeah, yeah, I give you

687
00:25:52,200 --> 00:25:54,870
everything because I want to
throw these birds at those

688
00:25:54,870 --> 00:25:56,120
pigs or whatever?

689
00:25:56,120 --> 00:25:58,870

690
00:25:58,870 --> 00:26:00,370
Isn't it the problem
that we have?

691
00:26:00,370 --> 00:26:02,880
Like already the press is saying
that HTML5 will never

692
00:26:02,880 --> 00:26:05,610
be secure and native is secure
and when we start actually

693
00:26:05,610 --> 00:26:07,830
advertising like, yeah, there's
things you shouldn't

694
00:26:07,830 --> 00:26:09,780
give grant access to.

695
00:26:09,780 --> 00:26:14,250
Would there be a bad backlash
towards the platform?

696
00:26:14,250 --> 00:26:16,560
BRIAN LEROUX: It's an education
issue absolutely.

697
00:26:16,560 --> 00:26:18,700
We have to teach people what
these things mean.

698
00:26:18,700 --> 00:26:20,160
And I think we're going to have
to teach people how to

699
00:26:20,160 --> 00:26:22,760
use their devices in
a responsible way.

700
00:26:22,760 --> 00:26:25,740
And that's probably going to,
unfortunately, take a massive

701
00:26:25,740 --> 00:26:29,980
privacy fail before we can truly
appreciate how important

702
00:26:29,980 --> 00:26:32,280
these things are.

703
00:26:32,280 --> 00:26:35,590
DIANA CHENG: One thing that many
people claim, and that I

704
00:26:35,590 --> 00:26:37,640
actually agree for
certain APIs is

705
00:26:37,640 --> 00:26:39,360
through keeping the locality.

706
00:26:39,360 --> 00:26:42,250
So the relationship between the
permission and the action

707
00:26:42,250 --> 00:26:45,440
that needs this permission makes
it clearer to the user.

708
00:26:45,440 --> 00:26:49,760
So having an API that allows you
to specify up front for a

709
00:26:49,760 --> 00:26:52,970
website or web app what are all
of the permissions and for

710
00:26:52,970 --> 00:26:56,240
the user to approve them in a
batch might not be the best

711
00:26:56,240 --> 00:26:57,250
for all applications.

712
00:26:57,250 --> 00:26:59,920
It could work in many cases.

713
00:26:59,920 --> 00:27:02,890
If I just want your
location, then why

714
00:27:02,890 --> 00:27:05,590
would I ask this upfront?

715
00:27:05,590 --> 00:27:10,380
I want to be asked for this when
I actually want to see my

716
00:27:10,380 --> 00:27:13,230
location with relation to
my car in a map, right?

717
00:27:13,230 --> 00:27:16,010
So that helps the
user, I think.

718
00:27:16,010 --> 00:27:16,720
CHRIS HELLMANN: Well,
that's the power of

719
00:27:16,720 --> 00:27:17,390
the web, isn't it?

720
00:27:17,390 --> 00:27:20,520
The immediacy and the on demand
delivery of content and

721
00:27:20,520 --> 00:27:22,340
on demand delivery
of functionality.

722
00:27:22,340 --> 00:27:24,280
Whereas, with packaged
apps and native apps,

723
00:27:24,280 --> 00:27:25,370
we don't have that.

724
00:27:25,370 --> 00:27:28,020
It's like one app per thing
that does it perfectly.

725
00:27:28,020 --> 00:27:31,810
That's fine but I have to
install an app to convert

726
00:27:31,810 --> 00:27:34,730
Celsius and Fahrenheit where I
could enter that in Google in

727
00:27:34,730 --> 00:27:37,940
the search bar as well and
get the same result.

728
00:27:37,940 --> 00:27:42,920
So the question is, how do we
make people aware that the web

729
00:27:42,920 --> 00:27:44,500
apps can't do more than that?

730
00:27:44,500 --> 00:27:47,060
With packaged apps, don't we
just simulate what the other

731
00:27:47,060 --> 00:27:49,540
apps are doing but we don't
have the same access to

732
00:27:49,540 --> 00:27:53,690
hardware and we can't give
the same experience?

733
00:27:53,690 --> 00:27:56,050
BRIAN LEROUX: Well, with the
PhoneGap hack we're just

734
00:27:56,050 --> 00:27:58,040
utilizing what the operating
system does.

735
00:27:58,040 --> 00:28:00,450
So in the case of Apple,
the security

736
00:28:00,450 --> 00:28:01,940
model is to be reviewed.

737
00:28:01,940 --> 00:28:04,630
In the case of Android, the
security model is to have a

738
00:28:04,630 --> 00:28:06,640
permissions manifest.

739
00:28:06,640 --> 00:28:09,480
And then that's all we can do.

740
00:28:09,480 --> 00:28:14,540
Chrome apps, Windows 8 apps,
all these new web operating

741
00:28:14,540 --> 00:28:18,050
systems, Firefox OS, this is the
opportunity to define this

742
00:28:18,050 --> 00:28:19,510
and teach people.

743
00:28:19,510 --> 00:28:24,490
So basically what I'm saying is,
that's your guys' problem.

744
00:28:24,490 --> 00:28:27,030
CHRIS HELLMANN: Because the
issue is I scare a lot of

745
00:28:27,030 --> 00:28:30,180
users off when I just show
them like I want to have

746
00:28:30,180 --> 00:28:31,390
access to 20 things.

747
00:28:31,390 --> 00:28:33,180
This app can do this
and that and that.

748
00:28:33,180 --> 00:28:38,530
Whereas, if the usage of the app
is basic and later on they

749
00:28:38,530 --> 00:28:41,050
go to other levels and
need more access.

750
00:28:41,050 --> 00:28:43,670
And then, the question
should come.

751
00:28:43,670 --> 00:28:45,640
But that's again, a UX
problem, isn't it?

752
00:28:45,640 --> 00:28:47,850
PAUL KINLAN: I don't know.

753
00:28:47,850 --> 00:28:49,640
You have to work it out.

754
00:28:49,640 --> 00:28:51,400
It's actually a really complex
problem because you've got

755
00:28:51,400 --> 00:28:55,100
different times that you might
want elevated access, like the

756
00:28:55,100 --> 00:28:57,570
unlimited storage one is we can
let you know at install

757
00:28:57,570 --> 00:29:01,040
time that this application's
got unlimited storage.

758
00:29:01,040 --> 00:29:03,240
I don't think we do at the
moment for that one, but there

759
00:29:03,240 --> 00:29:05,290
are other ones like when you can
do cross domain requests

760
00:29:05,290 --> 00:29:08,450
without breaking out the normal
site, like the sandbox,

761
00:29:08,450 --> 00:29:10,590
like the domain isolation
at least.

762
00:29:10,590 --> 00:29:12,620
We let you know at install time
that this application can

763
00:29:12,620 --> 00:29:15,650
do that, but it all depends
on the message that we do.

764
00:29:15,650 --> 00:29:17,780
If you put one or two sites
in, we'll tell you you can

765
00:29:17,780 --> 00:29:20,360
access Twitter.com, it
can access Facebook.

766
00:29:20,360 --> 00:29:23,940
But if you put 10 different
like domain sources in, we

767
00:29:23,940 --> 00:29:27,000
basically say this application
can access the

768
00:29:27,000 --> 00:29:28,710
content of your sites.

769
00:29:28,710 --> 00:29:29,860
Because you can't list all 20.

770
00:29:29,860 --> 00:29:32,220
And especially when it's like
a weird regular expression

771
00:29:32,220 --> 00:29:35,270
which is *.Facebook.com/*.

772
00:29:35,270 --> 00:29:37,850
Like normal users aren't going
to even know what that means.

773
00:29:37,850 --> 00:29:39,400
They're just going to see some
weird stuff when they install

774
00:29:39,400 --> 00:29:41,110
it which increases the
likelihood that they'll just

775
00:29:41,110 --> 00:29:47,310
click OK without understanding
the ramifications.

776
00:29:47,310 --> 00:29:49,960
AUDIENCE: I believe greatly in
the belief you should give

777
00:29:49,960 --> 00:29:51,560
control to users.

778
00:29:51,560 --> 00:29:55,040
This is a question regarding
to the permission system.

779
00:29:55,040 --> 00:29:59,340
So I'm wondering about the
problem with education

780
00:29:59,340 --> 00:30:00,760
regarding the user.

781
00:30:00,760 --> 00:30:03,920
The problem I see is that
there's no control to use

782
00:30:03,920 --> 00:30:06,240
actually at the moment.

783
00:30:06,240 --> 00:30:10,180
Users giving a question
regarding giving access to all

784
00:30:10,180 --> 00:30:13,310
of these permissions without
[INAUDIBLE] actually giving

785
00:30:13,310 --> 00:30:17,590
updates set on the specific
permissions.

786
00:30:17,590 --> 00:30:19,660
They don't wan to give access
to contacts, for example.

787
00:30:19,660 --> 00:30:22,220
I think that should
be possible.

788
00:30:22,220 --> 00:30:22,710
CHRIS HELLMANN: Yeah.

789
00:30:22,710 --> 00:30:26,490
The question is you have to give
all permissions and if

790
00:30:26,490 --> 00:30:28,860
you don't give one of them, you
just don't get the app,

791
00:30:28,860 --> 00:30:31,950
rather than it should be up to
you which ones to give and the

792
00:30:31,950 --> 00:30:34,200
app should apply to that or
the app should change

793
00:30:34,200 --> 00:30:35,290
accordingly?

794
00:30:35,290 --> 00:30:36,520
BRIAN LEROUX: I think Chrome
got this [INAUDIBLE].

795
00:30:36,520 --> 00:30:38,300
PAUL KINLAN: We're exploring
that at the moment where you

796
00:30:38,300 --> 00:30:40,640
can request access.

797
00:30:40,640 --> 00:30:42,450
Basically, it's an optional
permission where you can

798
00:30:42,450 --> 00:30:43,190
request access.

799
00:30:43,190 --> 00:30:45,690
You have it in the manifest so
you know the application's at

800
00:30:45,690 --> 00:30:47,010
least going to ask for
it at some point.

801
00:30:47,010 --> 00:30:51,850
And then when you come to ask
for it, you can ask the user

802
00:30:51,850 --> 00:30:53,500
are they sure they want
to do this action.

803
00:30:53,500 --> 00:30:56,290
I think the problem it comes
down to is, one, it's

804
00:30:56,290 --> 00:30:58,240
relatively awkward to tell
developers to go and do this

805
00:30:58,240 --> 00:31:00,780
and the easier one is just to
put the non-optional optional

806
00:31:00,780 --> 00:31:03,840
permissions in.

807
00:31:03,840 --> 00:31:04,870
It all depends on the
functionality

808
00:31:04,870 --> 00:31:05,500
of the app as well.

809
00:31:05,500 --> 00:31:07,810
If the app can live with
it, then it's fine.

810
00:31:07,810 --> 00:31:09,480
If it can't live with it, what's
the point of installing

811
00:31:09,480 --> 00:31:11,920
the app if you need access to
the camera and then every so

812
00:31:11,920 --> 00:31:14,320
often you don't give access
to the camera.

813
00:31:14,320 --> 00:31:15,090
I don't quite know.

814
00:31:15,090 --> 00:31:16,480
CHRIS HELLMANN: In Firefox
OS, we've got

815
00:31:16,480 --> 00:31:17,370
three different levels.

816
00:31:17,370 --> 00:31:19,910
We've got an app that you host
yourself which only has access

817
00:31:19,910 --> 00:31:22,040
to the things that the browser
has in there now as well like

818
00:31:22,040 --> 00:31:24,930
local storage and geolocation.

819
00:31:24,930 --> 00:31:26,730
And then we have an app that
has to go through the

820
00:31:26,730 --> 00:31:29,700
marketplace and we have an app
that only Mozilla and partners

821
00:31:29,700 --> 00:31:32,340
can do that get access to like
telephony and sending text

822
00:31:32,340 --> 00:31:33,840
messages and things.

823
00:31:33,840 --> 00:31:37,560
Is that a good idea or is it
maybe something other people

824
00:31:37,560 --> 00:31:38,420
should mimic?

825
00:31:38,420 --> 00:31:42,960
Because the one size fits all,
that app can access everything

826
00:31:42,960 --> 00:31:46,160
or nothing, is not getting us
anywhere at the moment.

827
00:31:46,160 --> 00:31:48,740
People want to host things on
their own server but they also

828
00:31:48,740 --> 00:31:51,680
want to get access
to the hardware.

829
00:31:51,680 --> 00:31:52,900
BRIAN LEROUX: I like
that model too.

830
00:31:52,900 --> 00:31:55,050
I think these things
are compatible.

831
00:31:55,050 --> 00:31:58,260
If people happen to be running
Chrome right now, you could

832
00:31:58,260 --> 00:32:02,390
click on the favicon icon, and
you can get this contacts menu

833
00:32:02,390 --> 00:32:04,460
in your desktop browser that
shows you all these different

834
00:32:04,460 --> 00:32:04,990
permissions.

835
00:32:04,990 --> 00:32:07,550
And I think this is the early
manifestation of these ideas,

836
00:32:07,550 --> 00:32:09,250
but it is an all or nothing.

837
00:32:09,250 --> 00:32:12,050
You don't have this idea of
different levels of privilege,

838
00:32:12,050 --> 00:32:17,130
the system apps, user apps, wild
west apps, I guess, would

839
00:32:17,130 --> 00:32:19,350
be the third part.

840
00:32:19,350 --> 00:32:22,350
And then there's like the idea
of federation in app stores.

841
00:32:22,350 --> 00:32:26,440
So right now app stores are all
walled gardens per vendor,

842
00:32:26,440 --> 00:32:28,910
essentially, but it
makes no sense.

843
00:32:28,910 --> 00:32:32,610
Why is EA getting permission
from Apple to ship a game?

844
00:32:32,610 --> 00:32:33,700
It's crazy, right?

845
00:32:33,700 --> 00:32:34,920
EA should have its own store.

846
00:32:34,920 --> 00:32:35,570
I trust EA.

847
00:32:35,570 --> 00:32:37,330
I want to play games.

848
00:32:37,330 --> 00:32:39,650
CHRIS HELLMANN: Well if only we
had an open marketplace API

849
00:32:39,650 --> 00:32:41,260
but I'm not going to talk about
that now, but you can

850
00:32:41,260 --> 00:32:44,130
ask me later.

851
00:32:44,130 --> 00:32:46,630
What is interesting about this
is that you said like I trust

852
00:32:46,630 --> 00:32:48,300
EA, but you can't trust
any server.

853
00:32:48,300 --> 00:32:50,400
It doesn't really matter
who it is.

854
00:32:50,400 --> 00:32:53,980
It's like larger companies
can get their

855
00:32:53,980 --> 00:32:55,100
service hacked as well.

856
00:32:55,100 --> 00:32:57,570
It's just a matter of
how do you do it

857
00:32:57,570 --> 00:32:59,320
unless you host it yourself?

858
00:32:59,320 --> 00:33:01,890
And that, to me, is the main
crux of the matter.

859
00:33:01,890 --> 00:33:05,510
I just got an update on an
Android app that asked me for

860
00:33:05,510 --> 00:33:08,090
1.81 gig update.

861
00:33:08,090 --> 00:33:10,120
And you're like, you haven't
understood mobile devices, did

862
00:33:10,120 --> 00:33:12,860
you because I only got 8 gig
on this machine anyway.

863
00:33:12,860 --> 00:33:17,710
So how could we do an app that
are already granted access to

864
00:33:17,710 --> 00:33:21,410
allow it to update
automatically, to only get

865
00:33:21,410 --> 00:33:24,600
parts, to load a new level, to
load to new extra in a game

866
00:33:24,600 --> 00:33:27,250
rather than replace the whole
packaging system?

867
00:33:27,250 --> 00:33:29,460
I think that is failing
on the web.

868
00:33:29,460 --> 00:33:31,210
I don't want to download
an app every

869
00:33:31,210 --> 00:33:32,520
time there is a change.

870
00:33:32,520 --> 00:33:35,850
But the change should be in
an extra API somehow.

871
00:33:35,850 --> 00:33:38,060
BRIAN LEROUX: That's an
imperative API for the cache

872
00:33:38,060 --> 00:33:39,260
manifest would do that.

873
00:33:39,260 --> 00:33:42,150
So you could do delta updating
which I think is the stuff

874
00:33:42,150 --> 00:33:44,860
that Alex and Jake have
been proposing.

875
00:33:44,860 --> 00:33:45,430
Yeah.

876
00:33:45,430 --> 00:33:46,230
It's a big issue.

877
00:33:46,230 --> 00:33:48,540
So PhoneGap apps have this
one all the time.

878
00:33:48,540 --> 00:33:51,920
We have a game and that game
could be gigabytes.

879
00:33:51,920 --> 00:33:53,990
They only want to load the first
level because you want

880
00:33:53,990 --> 00:33:56,080
to be available over the network
and if the user gets

881
00:33:56,080 --> 00:33:59,090
to level two in whatever game
they're playing, then download

882
00:33:59,090 --> 00:34:01,400
those assets then.

883
00:34:01,400 --> 00:34:03,320
It's a huge issue for sure.

884
00:34:03,320 --> 00:34:07,090

885
00:34:07,090 --> 00:34:08,560
AUDIENCE: I think when we were
talking on the permission

886
00:34:08,560 --> 00:34:11,300
stuff, I can give a very short
run down on what we're doing

887
00:34:11,300 --> 00:34:18,330
in Firefox OS, which is we
essentially have two types of

888
00:34:18,330 --> 00:34:19,670
privileges for APIs.

889
00:34:19,670 --> 00:34:22,889
We have APIs where the user gets
asked the question very

890
00:34:22,889 --> 00:34:27,780
similar to GPS and
geolocation.

891
00:34:27,780 --> 00:34:30,090
But there's a lot of APIs where
we just can't ask the

892
00:34:30,090 --> 00:34:32,788
user, like asking the user do
you want to allow this app to

893
00:34:32,788 --> 00:34:33,639
use TCP socket?

894
00:34:33,639 --> 00:34:35,790
It doesn't mean anything.

895
00:34:35,790 --> 00:34:38,510
So for those types of APIs where
we didn't feel we could

896
00:34:38,510 --> 00:34:43,560
ask the user, we have to do it
through a review process which

897
00:34:43,560 --> 00:34:45,239
is very unfortunate.

898
00:34:45,239 --> 00:34:48,420
Because it does mean that it's
much more similar to the iOS

899
00:34:48,420 --> 00:34:52,350
model where it has to be someone
that is a trusted

900
00:34:52,350 --> 00:34:54,260
party that has actually
done code reviews.

901
00:34:54,260 --> 00:34:56,590
Code reviews doesn't really work
but it's kind of the only

902
00:34:56,590 --> 00:34:58,790
thing we have right now.

903
00:34:58,790 --> 00:35:01,800
We sort of have a third model
where it has to go both

904
00:35:01,800 --> 00:35:05,110
through code review and we ask
the user where the code review

905
00:35:05,110 --> 00:35:07,310
sort of covers the security
aspect and the asking the user

906
00:35:07,310 --> 00:35:10,350
covers the privacy aspect.

907
00:35:10,350 --> 00:35:13,170
But these are sort of
the models we have.

908
00:35:13,170 --> 00:35:16,140
The code review part does mean
that it has to be a packaged

909
00:35:16,140 --> 00:35:18,850
app because that's the only
way to ensure that the

910
00:35:18,850 --> 00:35:21,920
reviewed code is what's actually
being executed.

911
00:35:21,920 --> 00:35:26,040
But that's something we'd like
to figure out but this is the

912
00:35:26,040 --> 00:35:28,080
first iteration.

913
00:35:28,080 --> 00:35:30,010
CHRIS HELLMANN: One question
also on moderator was an

914
00:35:30,010 --> 00:35:33,780
interesting one that says, I
trust the cam app from Google.

915
00:35:33,780 --> 00:35:37,510
Why don't we have apps that are
trusted for the access and

916
00:35:37,510 --> 00:35:40,030
go through those rather
than having

917
00:35:40,030 --> 00:35:42,550
the app itself contacted?

918
00:35:42,550 --> 00:35:45,040
I don't want to put the dagger
in but Web Intents did

919
00:35:45,040 --> 00:35:46,420
something like that,
didn't it?

920
00:35:46,420 --> 00:35:50,165
Because I already knew I had
stuff on my mobile phone that

921
00:35:50,165 --> 00:35:51,210
I could take pictures with.

922
00:35:51,210 --> 00:35:54,140
Why can't I get the picture
from that app rather than

923
00:35:54,140 --> 00:35:58,240
having to ask for permission
to access the camera?

924
00:35:58,240 --> 00:36:01,730
Web activities do that, and in
the browser, input type camera

925
00:36:01,730 --> 00:36:02,800
does the same thing.

926
00:36:02,800 --> 00:36:05,780
But an app cannot access it
the same way as far as I

927
00:36:05,780 --> 00:36:07,290
understand it.

928
00:36:07,290 --> 00:36:10,160
Wouldn't that be a way around
that every operating system

929
00:36:10,160 --> 00:36:12,500
comes with apps that are trusted
for different access

930
00:36:12,500 --> 00:36:14,860
to different parts and
it goes through a

931
00:36:14,860 --> 00:36:17,970
security level that way?

932
00:36:17,970 --> 00:36:19,780
BRIAN LEROUX: Do it, Paul.

933
00:36:19,780 --> 00:36:21,500
Go.

934
00:36:21,500 --> 00:36:23,350
PAUL KINLAN: I actually
don't know the answer.

935
00:36:23,350 --> 00:36:25,980
People want natively integrated
experiences like

936
00:36:25,980 --> 00:36:26,610
inside their app.

937
00:36:26,610 --> 00:36:28,490
They would like the camera to
be there so that they can

938
00:36:28,490 --> 00:36:30,580
apply a little fish-eye effect
to it and make their face look

939
00:36:30,580 --> 00:36:33,260
big and all these types of
things in real time.

940
00:36:33,260 --> 00:36:36,630
And we could go down the Intent
model of you delegate

941
00:36:36,630 --> 00:36:38,620
the functionality to a
trusted application.

942
00:36:38,620 --> 00:36:41,490
That's fine, but people want
to integrate it into their

943
00:36:41,490 --> 00:36:43,140
experience, and I don't
know how you delegate

944
00:36:43,140 --> 00:36:45,520
between both scenarios.

945
00:36:45,520 --> 00:36:47,740
Maybe have an activity
Intent-like system at

946
00:36:47,740 --> 00:36:49,145
the same time as--

947
00:36:49,145 --> 00:36:49,630
I don't know.

948
00:36:49,630 --> 00:36:51,730
I think people get confused by
having to switch between apps

949
00:36:51,730 --> 00:36:53,110
all the time.

950
00:36:53,110 --> 00:36:54,360
If you're having all
this functionality.

951
00:36:54,360 --> 00:36:57,308

952
00:36:57,308 --> 00:36:58,020
I don't know.

953
00:36:58,020 --> 00:36:59,980
You've got to get broad
consensus across every single

954
00:36:59,980 --> 00:37:01,800
different type of platform
about well

955
00:37:01,800 --> 00:37:02,780
how do I access contacts?

956
00:37:02,780 --> 00:37:05,990
Do I go to the contact kind
of like contact manager?

957
00:37:05,990 --> 00:37:07,410
Well, obviously if we have 10
different types of contact

958
00:37:07,410 --> 00:37:08,743
managers, it's a desktop
machine and all

959
00:37:08,743 --> 00:37:11,845
this type of stuff.

960
00:37:11,845 --> 00:37:12,330
I don't know.

961
00:37:12,330 --> 00:37:13,580
CHRIS HELLMANN: Especially
with contacts it's an

962
00:37:13,580 --> 00:37:17,510
interesting one because the
interface is optimized for

963
00:37:17,510 --> 00:37:20,280
doing contacts so why should
any app build their own

964
00:37:20,280 --> 00:37:22,620
contact manager on
top of that?

965
00:37:22,620 --> 00:37:23,820
PAUL KINLAN: Well it's not
necessarily contact manager.

966
00:37:23,820 --> 00:37:28,630
It's like people want to share
invites to their friends on

967
00:37:28,630 --> 00:37:30,120
different networks and all
this type of stuff.

968
00:37:30,120 --> 00:37:32,230
There's loads of different use
cases where you want to

969
00:37:32,230 --> 00:37:38,070
integrate it directly into the
experience and that's why you

970
00:37:38,070 --> 00:37:39,370
don't delegate out.

971
00:37:39,370 --> 00:37:40,300
CHRIS HELLMANN: We had
a twitch over there.

972
00:37:40,300 --> 00:37:43,559
Munir, did you want
to say something?

973
00:37:43,559 --> 00:37:44,545
MUNIR: Yeah.

974
00:37:44,545 --> 00:37:45,795
[INAUDIBLE].

975
00:37:45,795 --> 00:37:48,000

976
00:37:48,000 --> 00:37:49,580
CHRIS HELLMANN: As you see in
the Firefox tee shirt, he

977
00:37:49,580 --> 00:37:52,936
actually works on the
web APIs as well.

978
00:37:52,936 --> 00:37:54,424
MUNIR: [INAUDIBLE].

979
00:37:54,424 --> 00:37:57,950
So I'd actually [INAUDIBLE]
exactly solving the issue you

980
00:37:57,950 --> 00:38:00,050
are mentioning.

981
00:38:00,050 --> 00:38:03,590
If an app can't do something,
[INAUDIBLE] are doing

982
00:38:03,590 --> 00:38:06,780
something, permissions or
something, like sending an SMS

983
00:38:06,780 --> 00:38:10,790
in Firefox OS, only the
system can do that.

984
00:38:10,790 --> 00:38:15,226
You can just call that web
[INAUDIBLE] and system app

985
00:38:15,226 --> 00:38:19,440
already has some behavior that
is secure like showing the

986
00:38:19,440 --> 00:38:20,140
[INAUDIBLE].

987
00:38:20,140 --> 00:38:23,485
So all activity should
resolve [INAUDIBLE]

988
00:38:23,485 --> 00:38:26,250
where not want to
do some issue.

989
00:38:26,250 --> 00:38:28,776
Web Intent has [INAUDIBLE]

990
00:38:28,776 --> 00:38:30,628
or Intent on Android.

991
00:38:30,628 --> 00:38:33,880

992
00:38:33,880 --> 00:38:35,200
CHRIS HELLMANN: Another
question we had, what

993
00:38:35,200 --> 00:38:37,030
granularity should permissions
be at?

994
00:38:37,030 --> 00:38:39,400
Obviously having separate
permissions for app cache and

995
00:38:39,400 --> 00:38:41,400
local storage is overkill,
but do we need any

996
00:38:41,400 --> 00:38:42,510
granularity at all?

997
00:38:42,510 --> 00:38:46,290
Would a single privilege status
be enough, like can

998
00:38:46,290 --> 00:38:48,890
take photos, can't take live
video, for example?

999
00:38:48,890 --> 00:38:51,560

1000
00:38:51,560 --> 00:38:54,270
Shall we complicate this more
than it is already?

1001
00:38:54,270 --> 00:38:56,570
DIANA CHENG: I was going to say
granularity makes UI very

1002
00:38:56,570 --> 00:38:57,300
complicated.

1003
00:38:57,300 --> 00:39:00,800
And that's something we want
to avoid because developers

1004
00:39:00,800 --> 00:39:03,700
don't like presenting
prompts to the user.

1005
00:39:03,700 --> 00:39:06,030
That has been proven.

1006
00:39:06,030 --> 00:39:07,390
They want to avoid it.

1007
00:39:07,390 --> 00:39:12,240
So the more complicated the UI,
the least developers are

1008
00:39:12,240 --> 00:39:15,640
going to want to use
any APIs really.

1009
00:39:15,640 --> 00:39:15,860
PETRO SOININEN: Yeah.

1010
00:39:15,860 --> 00:39:18,840
I think it comes down to what
Paul said earlier that if you

1011
00:39:18,840 --> 00:39:22,980
start having gazillion lines
in your prompt asking about

1012
00:39:22,980 --> 00:39:25,340
cryptic things no one is
going to understand

1013
00:39:25,340 --> 00:39:26,140
what it actually means.

1014
00:39:26,140 --> 00:39:31,240
So there has to be a way to
try to keep it simple and

1015
00:39:31,240 --> 00:39:33,350
actually understandable
for the user.

1016
00:39:33,350 --> 00:39:34,760
CHRIS HELLMANN: It's an
interesting task for the UX

1017
00:39:34,760 --> 00:39:35,790
people out there, isn't it?

1018
00:39:35,790 --> 00:39:38,160
It's like how to explain
something that complex in very

1019
00:39:38,160 --> 00:39:39,990
simple words and then translate
it into foreign

1020
00:39:39,990 --> 00:39:41,420
languages as well.

1021
00:39:41,420 --> 00:39:41,606
PETRO SOININEN: Yeah.

1022
00:39:41,606 --> 00:39:44,620
Plus when you take into account
potential kind of

1023
00:39:44,620 --> 00:39:46,560
different legislation
in some areas.

1024
00:39:46,560 --> 00:39:48,950
For example, in China you might
have totally different

1025
00:39:48,950 --> 00:39:52,310
requirements on what kind of
privacy things you actually

1026
00:39:52,310 --> 00:39:54,015
need to ask from the user.

1027
00:39:54,015 --> 00:39:55,970
And for example, if you
use the same service

1028
00:39:55,970 --> 00:39:58,290
in Germany or whatever.

1029
00:39:58,290 --> 00:39:58,430
CHRIS HELLMANN: Yeah.

1030
00:39:58,430 --> 00:39:59,870
PETRO SOININEN: Quite
a complex issue.

1031
00:39:59,870 --> 00:40:01,190
CHRIS HELLMANN: You can't ask
for gender in Germany, for

1032
00:40:01,190 --> 00:40:03,470
example, these kinds
of things.

1033
00:40:03,470 --> 00:40:04,730
Yeah.

1034
00:40:04,730 --> 00:40:07,630
DIANA CHENG: When it should
arise is also what happens

1035
00:40:07,630 --> 00:40:09,450
when the application changes.

1036
00:40:09,450 --> 00:40:13,690
When the application gets
changed, if it needs a higher

1037
00:40:13,690 --> 00:40:16,180
level or a more specific
level of granularity.

1038
00:40:16,180 --> 00:40:21,320
For example, for your location,
we thought OK,

1039
00:40:21,320 --> 00:40:24,560
asking for the exact location
all the time when only the

1040
00:40:24,560 --> 00:40:25,390
city is relevant.

1041
00:40:25,390 --> 00:40:26,770
It's too much.

1042
00:40:26,770 --> 00:40:30,480
Why shouldn't we ask for just
city, country, whatever?

1043
00:40:30,480 --> 00:40:32,740
Then what happens when the
app actually needs more

1044
00:40:32,740 --> 00:40:33,380
information?

1045
00:40:33,380 --> 00:40:36,660
They need to prompt
the user again.

1046
00:40:36,660 --> 00:40:43,010
Or for a different action in the
same app, 15 minutes later

1047
00:40:43,010 --> 00:40:46,040
then you are prompting the user
again for a more specific

1048
00:40:46,040 --> 00:40:47,890
permission and that's
not good.

1049
00:40:47,890 --> 00:40:48,960
CHRIS HELLMANN: It's
tricky, isn't it?

1050
00:40:48,960 --> 00:40:50,050
It all [INAUDIBLE]

1051
00:40:50,050 --> 00:40:52,170
to me it seems like we're not
going to solve this one here,

1052
00:40:52,170 --> 00:40:56,440
but I love the idea of any app
having access to a permissions

1053
00:40:56,440 --> 00:40:59,510
controller that actually would
control all the permissions

1054
00:40:59,510 --> 00:41:02,830
possible and actually allow you
to unset, set them, get

1055
00:41:02,830 --> 00:41:06,060
new permissions in, and
basically separate that from

1056
00:41:06,060 --> 00:41:07,100
your main app.

1057
00:41:07,100 --> 00:41:09,350
Because right now, we have to
bake it in somehow and that

1058
00:41:09,350 --> 00:41:11,250
just feels like it
doesn't scale and

1059
00:41:11,250 --> 00:41:13,670
it's not future proof.

1060
00:41:13,670 --> 00:41:16,370
Has anybody thought of that?

1061
00:41:16,370 --> 00:41:18,140
BRIAN LEROUX: Yeah and it's also
really closely tied to a

1062
00:41:18,140 --> 00:41:19,170
capability model.

1063
00:41:19,170 --> 00:41:22,050
So this is another problem that
we're running into pretty

1064
00:41:22,050 --> 00:41:26,715
often where we'll have devices
that don't have a camera and

1065
00:41:26,715 --> 00:41:30,600
someone will ship an app in an
app store and that app will

1066
00:41:30,600 --> 00:41:32,170
utilize camera functionality.

1067
00:41:32,170 --> 00:41:37,640
And right now our answer
is that we just fail.

1068
00:41:37,640 --> 00:41:38,820
CHRIS HELLMANN: Trying to detect
a camera that isn't

1069
00:41:38,820 --> 00:41:41,140
there unless you ship
it with the app.

1070
00:41:41,140 --> 00:41:42,016
BRIAN LEROUX: Right.

1071
00:41:42,016 --> 00:41:43,330
Yeah.

1072
00:41:43,330 --> 00:41:45,900
Buy this app, get
a free camera.

1073
00:41:45,900 --> 00:41:48,350
AUDIENCE: Just an observation
about granularity

1074
00:41:48,350 --> 00:41:50,030
permissions, really.

1075
00:41:50,030 --> 00:41:53,140
It seems that there's no
value in asking a user

1076
00:41:53,140 --> 00:41:54,855
can I use index TB?

1077
00:41:54,855 --> 00:41:56,250
Can I use local storage?

1078
00:41:56,250 --> 00:41:58,660
Can I use app cache?

1079
00:41:58,660 --> 00:41:59,820
Because they don't care.

1080
00:41:59,820 --> 00:42:03,060
But then something we thought
about in Opera was with like

1081
00:42:03,060 --> 00:42:04,290
geolocation.

1082
00:42:04,290 --> 00:42:07,360
So we could imagine, for
example, that somebody like a

1083
00:42:07,360 --> 00:42:11,080
woman living on her own might
wish to say yeah my tweets can

1084
00:42:11,080 --> 00:42:15,380
have my location between 10:00
AM and 6:00 PM but I don't

1085
00:42:15,380 --> 00:42:17,965
want my tweets to have my
location after 6:00 PM because

1086
00:42:17,965 --> 00:42:19,330
I'm probably at my house.

1087
00:42:19,330 --> 00:42:21,473
CHRIS HELLMANN: So Geo-Fencing
that Flickr has?

1088
00:42:21,473 --> 00:42:21,866
AUDIENCE: Yeah.

1089
00:42:21,866 --> 00:42:22,260
Yeah.

1090
00:42:22,260 --> 00:42:26,700
And one of the things that we
looked at as well about a

1091
00:42:26,700 --> 00:42:29,220
console where you
can look at the

1092
00:42:29,220 --> 00:42:31,960
permissions you've granted.

1093
00:42:31,960 --> 00:42:36,730
You very rarely want to see what
permissions did I give to

1094
00:42:36,730 --> 00:42:39,150
Mr. Spanky dot DE,
for example.

1095
00:42:39,150 --> 00:42:41,280
But you might very well--

1096
00:42:41,280 --> 00:42:42,240
sorry, Brian--

1097
00:42:42,240 --> 00:42:45,990
you might very well want
to say what things

1098
00:42:45,990 --> 00:42:47,950
can look at my camera?

1099
00:42:47,950 --> 00:42:52,180
So the question of which way
around the grid goes.

1100
00:42:52,180 --> 00:42:53,210
You probably care.

1101
00:42:53,210 --> 00:42:53,940
Oh, shit!

1102
00:42:53,940 --> 00:42:57,200
What can look at my camera much
more than what have I

1103
00:42:57,200 --> 00:43:00,510
given every individual URL
or app, for example.

1104
00:43:00,510 --> 00:43:02,690
And there's also with a camera,
of course, there's an

1105
00:43:02,690 --> 00:43:05,560
argument for having a big
kill switch so nothing

1106
00:43:05,560 --> 00:43:06,740
can look at my camera.

1107
00:43:06,740 --> 00:43:09,910
Because obviously you cover the
camera on your phone or

1108
00:43:09,910 --> 00:43:13,200
your laptop, but there's no
guarantee that it isn't

1109
00:43:13,200 --> 00:43:15,815
actually a camera that's out of
reach that's plugged into

1110
00:43:15,815 --> 00:43:19,612
your laptop and you might want
to have a kill thing.

1111
00:43:19,612 --> 00:43:21,310
PAUL KINLAN: So one of the
interesting things about that

1112
00:43:21,310 --> 00:43:23,880
is I don't know whether we're
assuming that these

1113
00:43:23,880 --> 00:43:27,050
applications run inside the
browser, but a lot of the

1114
00:43:27,050 --> 00:43:28,820
stuff that especially we're
doing with Chrome applications

1115
00:43:28,820 --> 00:43:31,770
is that you don't know they're
actually even slightly tied to

1116
00:43:31,770 --> 00:43:33,180
Chrome in the slightest.

1117
00:43:33,180 --> 00:43:35,280
So if you're going to have a
permissions model, you're not

1118
00:43:35,280 --> 00:43:37,440
going to put it inside your
browser for someone to go in

1119
00:43:37,440 --> 00:43:38,370
there and disable it.

1120
00:43:38,370 --> 00:43:42,270
And I don't know what type of
operating system level.

1121
00:43:42,270 --> 00:43:43,530
We don't control
Windows, right?

1122
00:43:43,530 --> 00:43:44,750
So we couldn't put that in.

1123
00:43:44,750 --> 00:43:46,690
So we have to go and add a
settings app, for instance, if

1124
00:43:46,690 --> 00:43:51,125
we're going to do that type
of thing it's hard.

1125
00:43:51,125 --> 00:43:52,590
Yeah, just hard.

1126
00:43:52,590 --> 00:43:54,380
CHRIS HELLMANN: Which brings
us to this one here.

1127
00:43:54,380 --> 00:43:57,020
What do packaged apps with their
close ties to particular

1128
00:43:57,020 --> 00:43:59,670
browsers and web app stores mean
for cross browser as a

1129
00:43:59,670 --> 00:44:01,460
platform support?

1130
00:44:01,460 --> 00:44:05,030
As I said before, it's like we
always say in HTML5 you write

1131
00:44:05,030 --> 00:44:06,940
it once and it works everywhere
and then like

1132
00:44:06,940 --> 00:44:09,690
actually that app store doesn't
allow you to do that,

1133
00:44:09,690 --> 00:44:11,370
that one doesn't allow
you to do that.

1134
00:44:11,370 --> 00:44:13,930
So can't we all just
get along?

1135
00:44:13,930 --> 00:44:16,820

1136
00:44:16,820 --> 00:44:18,970
When PhoneGap came out,
it said clearly

1137
00:44:18,970 --> 00:44:20,180
this is a gap solution.

1138
00:44:20,180 --> 00:44:22,770
We want to be redundant sooner
or later and it's been now

1139
00:44:22,770 --> 00:44:23,420
four years?

1140
00:44:23,420 --> 00:44:24,670
BRIAN LEROUX: Yeah.

1141
00:44:24,670 --> 00:44:26,440

1142
00:44:26,440 --> 00:44:26,730
Yep.

1143
00:44:26,730 --> 00:44:27,960
PAUL KINLAN: But what's
it mean for

1144
00:44:27,960 --> 00:44:30,180
across browser support?

1145
00:44:30,180 --> 00:44:31,090
That's the question I've got.

1146
00:44:31,090 --> 00:44:34,230
If you've package this thing
up to be a deliverable--

1147
00:44:34,230 --> 00:44:35,050
it's like Adobe AIR, right?

1148
00:44:35,050 --> 00:44:36,800
When you could package a
[INAUDIBLE] on JavaScript it

1149
00:44:36,800 --> 00:44:40,830
would run with a really
old version of WebKit.

1150
00:44:40,830 --> 00:44:41,640
Does the user know?

1151
00:44:41,640 --> 00:44:42,210
Does the user care?

1152
00:44:42,210 --> 00:44:44,420
Would they know it's Firefox and
not Firefox that's ruling

1153
00:44:44,420 --> 00:44:46,130
the renderer?

1154
00:44:46,130 --> 00:44:47,910
If you've got installable apps,
there are installable

1155
00:44:47,910 --> 00:44:50,430
apps which are technically
isolated from the browser.

1156
00:44:50,430 --> 00:44:51,780
I don't know.

1157
00:44:51,780 --> 00:44:53,520
And if you talk about things
inside the browser, then

1158
00:44:53,520 --> 00:44:55,410
that's a different
question again.

1159
00:44:55,410 --> 00:44:56,610
BRIAN LEROUX: I think with
renderer things have gotten

1160
00:44:56,610 --> 00:45:00,270
pretty clean at this point
because of one of the, I

1161
00:45:00,270 --> 00:45:03,320
think, biggest triumphs of HTML5
was defining the parser.

1162
00:45:03,320 --> 00:45:06,430
So now all browsers have the
same bugs and we don't need to

1163
00:45:06,430 --> 00:45:09,800
worry about cross browser
compatibility.

1164
00:45:09,800 --> 00:45:11,960
This is just the new
part that's going

1165
00:45:11,960 --> 00:45:12,820
to be tough to do.

1166
00:45:12,820 --> 00:45:15,110
And there's probably going to be
a jQuery of device APIs at

1167
00:45:15,110 --> 00:45:16,670
some point I would assume.

1168
00:45:16,670 --> 00:45:18,530
And we're going to have
something that's going to

1169
00:45:18,530 --> 00:45:20,285
polyfill all this garbage
and then eventually

1170
00:45:20,285 --> 00:45:21,650
standardize that too.

1171
00:45:21,650 --> 00:45:21,980
PAUL KINLAN: Yeah.

1172
00:45:21,980 --> 00:45:23,130
People are doing it
with Node, right?

1173
00:45:23,130 --> 00:45:25,760
So people are building these
Node-based servers which can

1174
00:45:25,760 --> 00:45:29,400
talk to AR drones and then go
well I want that to work on,

1175
00:45:29,400 --> 00:45:30,050
like a Chrome app.

1176
00:45:30,050 --> 00:45:31,800
I want it to work on
the Firefox app.

1177
00:45:31,800 --> 00:45:34,600
Well, we'll just port the Node
APIs back across rather than

1178
00:45:34,600 --> 00:45:36,370
go and try and learn
the default--

1179
00:45:36,370 --> 00:45:37,180
BRIAN LEROUX: Browser find.

1180
00:45:37,180 --> 00:45:37,650
PAUL KINLAN: Yeah.

1181
00:45:37,650 --> 00:45:42,010
Actually, we use browser find
in our project so it's cool.

1182
00:45:42,010 --> 00:45:44,130
CHRIS HELLMANN: One question
we also had is why can't I

1183
00:45:44,130 --> 00:45:49,640
trust Open Full Screen without
the user having to give me

1184
00:45:49,640 --> 00:45:52,710
permission and the keyboard
access in Full Screen and all

1185
00:45:52,710 --> 00:45:53,650
the things we had?

1186
00:45:53,650 --> 00:45:56,270
That also ties into why can't I
have a video playing in the

1187
00:45:56,270 --> 00:45:57,580
background on iOS?

1188
00:45:57,580 --> 00:45:59,465
Why it is click to activate?

1189
00:45:59,465 --> 00:46:02,590

1190
00:46:02,590 --> 00:46:05,470
Education-wise, we probably know
why all of these things

1191
00:46:05,470 --> 00:46:06,200
are necessary.

1192
00:46:06,200 --> 00:46:08,620
But it is a valid question
for end users.

1193
00:46:08,620 --> 00:46:11,270
Why do I get this ugly window
saying this app is now full

1194
00:46:11,270 --> 00:46:15,480
screen because yeah, it's an
app, I want it full screen.

1195
00:46:15,480 --> 00:46:17,680
PAUL KINLAN: Yeah.

1196
00:46:17,680 --> 00:46:20,150
It's all based on usage and
use cases and developers

1197
00:46:20,150 --> 00:46:21,290
actually wanting these
things, right?

1198
00:46:21,290 --> 00:46:23,260
And we didn't prioritize
that originally.

1199
00:46:23,260 --> 00:46:25,790
We've added it in so that you
can request a window goes full

1200
00:46:25,790 --> 00:46:28,250
screen without any kind
of interstitial.

1201
00:46:28,250 --> 00:46:29,290
But it's an installed app.

1202
00:46:29,290 --> 00:46:30,590
It's a different thing.

1203
00:46:30,590 --> 00:46:33,770
And I don't know whether the
access model from the web

1204
00:46:33,770 --> 00:46:36,680
translates to installed apps the
same way, where we have to

1205
00:46:36,680 --> 00:46:42,370
have an explicit user gesture
for activities such as across

1206
00:46:42,370 --> 00:46:43,180
a site and it just going

1207
00:46:43,180 --> 00:46:44,235
automatically to a full screen.

1208
00:46:44,235 --> 00:46:45,540
You don't want that on
the drive by web.

1209
00:46:45,540 --> 00:46:47,490
But as an installed app,
you're probably fine.

1210
00:46:47,490 --> 00:46:50,970
You want your game
full screen.

1211
00:46:50,970 --> 00:46:51,141
BRIAN LEROUX: Yeah.

1212
00:46:51,141 --> 00:46:52,640
It's to avoid fishing.

1213
00:46:52,640 --> 00:46:55,680
Essentially because that screen
app could then fake

1214
00:46:55,680 --> 00:46:56,173
your Chrome.

1215
00:46:56,173 --> 00:47:00,490
It could say, hey, you forget
to put in your bank path.

1216
00:47:00,490 --> 00:47:01,810
CHRIS HELLMANN: I think the
best I've ever seen was a

1217
00:47:01,810 --> 00:47:04,080
banner that said has your credit
card being stolen?

1218
00:47:04,080 --> 00:47:07,180
Please enter your credit
card details here.

1219
00:47:07,180 --> 00:47:08,550
That was amazing.

1220
00:47:08,550 --> 00:47:11,750
I totally loved that.

1221
00:47:11,750 --> 00:47:15,320
So what do you think about
a model that allows you a

1222
00:47:15,320 --> 00:47:19,500
certain amount, like you can
store five photos without

1223
00:47:19,500 --> 00:47:21,280
asking for permission.

1224
00:47:21,280 --> 00:47:25,440
Is that a possibility that we
have tried to buy permissions

1225
00:47:25,440 --> 00:47:28,250
and then when they like it, it
seems like you want to store

1226
00:47:28,250 --> 00:47:29,320
bigger photos.

1227
00:47:29,320 --> 00:47:33,860
Please give us access to the
rest of the hardware.

1228
00:47:33,860 --> 00:47:34,810
BRIAN LEROUX: Super
case by case.

1229
00:47:34,810 --> 00:47:36,460
But yeah, I like it.

1230
00:47:36,460 --> 00:47:37,470
I think it's good.

1231
00:47:37,470 --> 00:47:40,490
And this is, for me, also one
of the fundamental issues is

1232
00:47:40,490 --> 00:47:41,980
offline storage.

1233
00:47:41,980 --> 00:47:44,650
Right now we've got 2 to 5
megs depending on who you

1234
00:47:44,650 --> 00:47:47,920
believe which isn't enough
space to do anything

1235
00:47:47,920 --> 00:47:48,710
significant.

1236
00:47:48,710 --> 00:47:52,030
And so yeah, I think we do
need these piecemeal

1237
00:47:52,030 --> 00:47:55,370
permissions to ease people
into the hot tub of it.

1238
00:47:55,370 --> 00:47:55,700
Right?

1239
00:47:55,700 --> 00:47:56,930
We got to get the
stuff into the

1240
00:47:56,930 --> 00:47:59,700
browser as soon as possible.

1241
00:47:59,700 --> 00:48:00,680
CHRIS HELLMANN: How
about storage?

1242
00:48:00,680 --> 00:48:03,270
I mean, I don't want to go into
index DB versus web SQL.

1243
00:48:03,270 --> 00:48:05,105
I'd tell people to
use Lawnchair.

1244
00:48:05,105 --> 00:48:11,410
But it's still an issue that
people don't go into web app

1245
00:48:11,410 --> 00:48:13,320
development because they
basically say, I don't want to

1246
00:48:13,320 --> 00:48:15,470
write for 10 different things.

1247
00:48:15,470 --> 00:48:17,920
Why can't your browser
vendors get along?

1248
00:48:17,920 --> 00:48:20,200
So what could be an
answer to that?

1249
00:48:20,200 --> 00:48:20,870
Use Lawnchair.

1250
00:48:20,870 --> 00:48:22,120
Yeah, I know.

1251
00:48:22,120 --> 00:48:25,950

1252
00:48:25,950 --> 00:48:26,150
BRIAN LEROUX: Yeah.

1253
00:48:26,150 --> 00:48:27,640
Use Lawnchair-- no, I don't know
what the answer is there.

1254
00:48:27,640 --> 00:48:29,786
I think the browser vendors now
work together more than

1255
00:48:29,786 --> 00:48:30,770
they ever have.

1256
00:48:30,770 --> 00:48:33,470
The new browser war is
essentially consensus.

1257
00:48:33,470 --> 00:48:35,520
That's the new battle that's
happening and it's

1258
00:48:35,520 --> 00:48:38,020
speed and dev tools.

1259
00:48:38,020 --> 00:48:40,330
Those are the things that the
browsers are fighting about.

1260
00:48:40,330 --> 00:48:42,820
So we're winning as devs but
there's just all these things

1261
00:48:42,820 --> 00:48:45,130
and storage is one of
them that the native

1262
00:48:45,130 --> 00:48:47,070
world kicks our ass.

1263
00:48:47,070 --> 00:48:48,320
We need to fix that.

1264
00:48:48,320 --> 00:48:51,350

1265
00:48:51,350 --> 00:48:53,090
CHRIS HELLMANN: OK.

1266
00:48:53,090 --> 00:48:53,790
Any last words?

1267
00:48:53,790 --> 00:48:55,040
We're almost out of time.

1268
00:48:55,040 --> 00:48:57,490

1269
00:48:57,490 --> 00:48:58,240
Give us a timeline.

1270
00:48:58,240 --> 00:49:00,390
When can we finally have
packaged apps that work

1271
00:49:00,390 --> 00:49:01,360
everywhere?

1272
00:49:01,360 --> 00:49:02,400
When can you close PhoneGap?

1273
00:49:02,400 --> 00:49:04,360
BRIAN LEROUX: I have
no idea, man.

1274
00:49:04,360 --> 00:49:04,590
I don't know.

1275
00:49:04,590 --> 00:49:07,490
I thought we'd be done
all this by now.

1276
00:49:07,490 --> 00:49:09,130
CHRIS HELLMANN: Do you get a
lot of stuff in Adobe that

1277
00:49:09,130 --> 00:49:11,730
people from AIR look at you
like we've done this.

1278
00:49:11,730 --> 00:49:14,520
Why do you have to reinvent
it right now?

1279
00:49:14,520 --> 00:49:14,890
BRIAN LEROUX: Actually, no.

1280
00:49:14,890 --> 00:49:16,980
They're awesome.

1281
00:49:16,980 --> 00:49:19,040
You could say that the road was
paved pretty easy and we

1282
00:49:19,040 --> 00:49:21,240
have a good roadmap to
look forward to.

1283
00:49:21,240 --> 00:49:23,180
Stuff that had been done
in the Flash Player and

1284
00:49:23,180 --> 00:49:24,860
with AIR for sure.

1285
00:49:24,860 --> 00:49:27,280
Yeah, they're cool.

1286
00:49:27,280 --> 00:49:29,050
CHRIS HELLMANN: Good.

1287
00:49:29,050 --> 00:49:31,630
What do you think will be
the next thing for you

1288
00:49:31,630 --> 00:49:34,340
like Chrome app store?

1289
00:49:34,340 --> 00:49:37,550
Will there be Chrome packaged
apps for mobile as well?

1290
00:49:37,550 --> 00:49:39,970
PAUL KINLAN: Yeah.

1291
00:49:39,970 --> 00:49:41,070
If you look on GitHub,
there's a public

1292
00:49:41,070 --> 00:49:43,750
repo and it uses Cordova.

1293
00:49:43,750 --> 00:49:46,980
It's our easiest avenue to get
a consistent API stuck across

1294
00:49:46,980 --> 00:49:49,450
those devices.

1295
00:49:49,450 --> 00:49:52,180
The biggest thing for me is like
the API access whether

1296
00:49:52,180 --> 00:49:53,030
it's cross browser or not.

1297
00:49:53,030 --> 00:49:55,700
It's like the developer doesn't,
in theory, want to

1298
00:49:55,700 --> 00:49:56,200
have to care.

1299
00:49:56,200 --> 00:49:58,410
We're supposed to be trying to
solve that problem for them

1300
00:49:58,410 --> 00:50:00,470
with HTML in general.

1301
00:50:00,470 --> 00:50:02,300
But we are at the stage where
everything is brand new and

1302
00:50:02,300 --> 00:50:04,890
we've not really done this
device access thing before,

1303
00:50:04,890 --> 00:50:07,260
and we're all trying out
slightly different things.

1304
00:50:07,260 --> 00:50:09,100
And at some point, we'll get
consensus and we'll have a

1305
00:50:09,100 --> 00:50:10,590
nice model.

1306
00:50:10,590 --> 00:50:13,490
But we need to prove that
built-in native apps is a

1307
00:50:13,490 --> 00:50:16,410
thing that actually is going to
be cool and works, and we

1308
00:50:16,410 --> 00:50:18,985
deliver great user experiences
with it.

1309
00:50:18,985 --> 00:50:21,700
CHRIS HELLMANN: Do you see a
slight competition between

1310
00:50:21,700 --> 00:50:24,310
apps and asking for permissions
and browsers

1311
00:50:24,310 --> 00:50:27,170
having things like WebRTC
and things inside?

1312
00:50:27,170 --> 00:50:30,410
A lot of people come to me and
saw something on HTML Rocks

1313
00:50:30,410 --> 00:50:31,700
like look in the latest
[? cannery ?]

1314
00:50:31,700 --> 00:50:35,380
I can also take pictures so why
do you even complain about

1315
00:50:35,380 --> 00:50:36,630
this anymore?

1316
00:50:36,630 --> 00:50:40,400
It's like desktop browsers seem
to have some things that

1317
00:50:40,400 --> 00:50:42,280
mobile browsers just
cannot get.

1318
00:50:42,280 --> 00:50:44,700
And as developers, we try to
show off to each other but

1319
00:50:44,700 --> 00:50:45,990
don't understand
the difference.

1320
00:50:45,990 --> 00:50:48,910

1321
00:50:48,910 --> 00:50:49,680
BRIAN LEROUX: I wasn't
even aware.

1322
00:50:49,680 --> 00:50:51,990
Is WebRTC really there?

1323
00:50:51,990 --> 00:50:53,130
I mean, I know Firefox
and Chrome are

1324
00:50:53,130 --> 00:50:54,363
talking to each other.

1325
00:50:54,363 --> 00:50:54,736
AUDIENCE: Yeah.

1326
00:50:54,736 --> 00:50:57,060
It's coming to--

1327
00:50:57,060 --> 00:50:58,270
BRIAN LEROUX: There's
that other browser.

1328
00:50:58,270 --> 00:51:02,080
I'm trying to remember,
Internet Explorer.

1329
00:51:02,080 --> 00:51:03,330
CHRIS HELLMANN: Or the
Erickson thing.

1330
00:51:03,330 --> 00:51:04,710
Yeah.

1331
00:51:04,710 --> 00:51:08,006
DIANA CHENG: I tried WebRTC
on Opera mobile.

1332
00:51:08,006 --> 00:51:11,630
So [INAUDIBLE] media and it
prompts for permission but it

1333
00:51:11,630 --> 00:51:12,520
didn't really work.

1334
00:51:12,520 --> 00:51:14,360
It didn't really show
me my stream.

1335
00:51:14,360 --> 00:51:17,560
So I don't know why.

1336
00:51:17,560 --> 00:51:20,310
Maybe it's implementing a
previous version of the spec

1337
00:51:20,310 --> 00:51:22,370
and I'm just asking it.

1338
00:51:22,370 --> 00:51:25,170
BRIAN LEROUX: In many ways, all
this is not [INAUDIBLE]

1339
00:51:25,170 --> 00:51:29,160
like the world of technology and
the web is advancing to a

1340
00:51:29,160 --> 00:51:32,140
point where it is kind of all
hybrid and the differences

1341
00:51:32,140 --> 00:51:35,200
between the native stack and
the web stack are getting

1342
00:51:35,200 --> 00:51:36,890
blurrier by the second.

1343
00:51:36,890 --> 00:51:39,890
I think that it's not going to
be like web versus native,

1344
00:51:39,890 --> 00:51:42,110
it's just going to
be development.

1345
00:51:42,110 --> 00:51:44,680
Software development
will be of the web.

1346
00:51:44,680 --> 00:51:46,480
CHRIS HELLMANN: Web GL is a
good point there as well.

1347
00:51:46,480 --> 00:51:49,460
It gives you like full access to
the graphics hardware which

1348
00:51:49,460 --> 00:51:52,210
you cannot do from anything else
which CSS shaders will

1349
00:51:52,210 --> 00:51:54,660
have the same thing, which
another company it has a

1350
00:51:54,660 --> 00:51:58,410
different 3D engine basically
said it's a security problem.

1351
00:51:58,410 --> 00:52:02,490
So we're not quite there yet
but we have a lot of

1352
00:52:02,490 --> 00:52:04,690
technologies that try to do the
same thing but we don't

1353
00:52:04,690 --> 00:52:06,540
seem to be there to
come up with a

1354
00:52:06,540 --> 00:52:09,180
standard around that stuff.

1355
00:52:09,180 --> 00:52:12,380
So where do you think
we should go next?

1356
00:52:12,380 --> 00:52:14,900
Where do you think people
should push us

1357
00:52:14,900 --> 00:52:16,600
to actually do things?

1358
00:52:16,600 --> 00:52:18,910
I like people complaining and
filing bugs to browsers.

1359
00:52:18,910 --> 00:52:21,880
I think they should much, much
more, but they should have a

1360
00:52:21,880 --> 00:52:25,140
good ammunition to say this is
the first thing we need.

1361
00:52:25,140 --> 00:52:26,030
PAUL KINLAN: I think they've
been saying that

1362
00:52:26,030 --> 00:52:26,570
for a while, right?

1363
00:52:26,570 --> 00:52:28,910
They want offline
apps to work.

1364
00:52:28,910 --> 00:52:30,870
If it's an app, for instance,
they want that to work pretty

1365
00:52:30,870 --> 00:52:33,420
much wherever they are
regardless of connection

1366
00:52:33,420 --> 00:52:35,260
status and they want
it installed.

1367
00:52:35,260 --> 00:52:37,440
They don't want to have to
launch a browser to go and

1368
00:52:37,440 --> 00:52:40,060
launch an app to go and do
something that they would

1369
00:52:40,060 --> 00:52:42,950
expect to just find on their
desktop and click and open.

1370
00:52:42,950 --> 00:52:46,700
I think if we get those two
sorted, we're on a good path

1371
00:52:46,700 --> 00:52:49,210
to working the rest out.

1372
00:52:49,210 --> 00:52:51,260
And then it's use case
lead from there.

1373
00:52:51,260 --> 00:52:52,240
BRIAN LEROUX: Yeah, I agree.

1374
00:52:52,240 --> 00:52:53,286
Totally.

1375
00:52:53,286 --> 00:52:54,600
Those are the biggest

1376
00:52:54,600 --> 00:52:56,370
challenges for sure is offline.

1377
00:52:56,370 --> 00:52:59,632
Discovery may be another one
too, figuring out this app

1378
00:52:59,632 --> 00:53:00,690
store thing.

1379
00:53:00,690 --> 00:53:00,820
CHRIS HELLMANN: Yeah.

1380
00:53:00,820 --> 00:53:03,860
Because we need a search engine
for app stores by now.

1381
00:53:03,860 --> 00:53:05,990
There's far too many
out there already.

1382
00:53:05,990 --> 00:53:08,020
It's tricky to actually--

1383
00:53:08,020 --> 00:53:10,510
when promoting your app means to
have to go through like 40

1384
00:53:10,510 --> 00:53:12,560
different app stores, then
something went very wrong

1385
00:53:12,560 --> 00:53:14,970
along the way because we had
the internet already to put

1386
00:53:14,970 --> 00:53:18,360
your content out there and get
it found by people like Google

1387
00:53:18,360 --> 00:53:20,520
and others.

1388
00:53:20,520 --> 00:53:21,380
Well thanks very much.

1389
00:53:21,380 --> 00:53:22,960
So next we have tooling.

1390
00:53:22,960 --> 00:53:24,210
Cheers!

1391
00:53:24,210 --> 00:53:31,620

1
00:00:00,000 --> 00:00:05,616

2
00:00:05,616 --> 00:00:06,870
MATT DELANEY: Hi, everyone.

3
00:00:06,870 --> 00:00:08,780
So to start off this performance
talk, welcome to

4
00:00:08,780 --> 00:00:10,810
potentially the juiciest
talk of the day.

5
00:00:10,810 --> 00:00:13,900
You have people who are nice and
hangry before lunch here.

6
00:00:13,900 --> 00:00:18,310
So just to be clear, there were
some kind of questions in

7
00:00:18,310 --> 00:00:21,910
our moderation tool for this
panel that were kind of

8
00:00:21,910 --> 00:00:23,430
overlapping with some
previous talks.

9
00:00:23,430 --> 00:00:25,440
Because performance is
everywhere, right?

10
00:00:25,440 --> 00:00:29,870
So if you look at some of the
questions relating to strictly

11
00:00:29,870 --> 00:00:32,330
kind of network performance
things, those are mostly

12
00:00:32,330 --> 00:00:33,280
covered in previous talks.

13
00:00:33,280 --> 00:00:34,800
We'll mostly skip over those.

14
00:00:34,800 --> 00:00:37,610
So now is your moment to put in
any juicier questions for

15
00:00:37,610 --> 00:00:40,890
front end things, especially
graphics, and all the kind of

16
00:00:40,890 --> 00:00:42,790
client side related performance

17
00:00:42,790 --> 00:00:44,480
concerns you guys have.

18
00:00:44,480 --> 00:00:45,990
So very quickly, I'm going
to run through.

19
00:00:45,990 --> 00:00:49,105
We've got our opening speaker
here, Shane O'Sullivan.

20
00:00:49,105 --> 00:00:51,595
So he's from Facebook,
a UI engineer.

21
00:00:51,595 --> 00:00:53,540
He'll introduce himself
a little bit more.

22
00:00:53,540 --> 00:00:56,720
We have Pavel Feldman
from Google.

23
00:00:56,720 --> 00:00:59,150
He has worked on Chrome
dev tools.

24
00:00:59,150 --> 00:01:02,426
And we have Rowan Beesje?

25
00:01:02,426 --> 00:01:03,530
ROWAN BEENJE: Beenje.

26
00:01:03,530 --> 00:01:04,720
MATT DELANEY: OK.

27
00:01:04,720 --> 00:01:05,900
Knew I was going to
mess that one up.

28
00:01:05,900 --> 00:01:08,945
So he works at FT Labs
with Andrew, and is

29
00:01:08,945 --> 00:01:11,370
known for FT Scroller.

30
00:01:11,370 --> 00:01:14,010
And then we have Chris Lord
from Mozilla, who is a

31
00:01:14,010 --> 00:01:19,340
platform engineer for
Firefox mobile, so

32
00:01:19,340 --> 00:01:21,430
primarily on Android.

33
00:01:21,430 --> 00:01:23,840
So to start, Shane has a little
opening talk for us to

34
00:01:23,840 --> 00:01:25,870
give us a bit of the
lay of the land of

35
00:01:25,870 --> 00:01:27,120
performance at the moment.

36
00:01:27,120 --> 00:01:35,370

37
00:01:35,370 --> 00:01:38,620
SHANE O'SULLIVAN:
So hi, everyone.

38
00:01:38,620 --> 00:01:39,670
I'm Shane O'Sullivan.

39
00:01:39,670 --> 00:01:42,840
I work as a UI engineer
at Facebook.

40
00:01:42,840 --> 00:01:44,220
I spent a couple of years
on the mobile site.

41
00:01:44,220 --> 00:01:47,810
And now I work on our
business interfaces.

42
00:01:47,810 --> 00:01:51,890
As he said, I'm here with
Ron, Chris, and Pavel.

43
00:01:51,890 --> 00:01:55,520
And we're going to talk a bit
about some of the potholes

44
00:01:55,520 --> 00:01:59,670
that are in the road to actually
having a performant

45
00:01:59,670 --> 00:02:04,410
and fast and non-stuttery
website.

46
00:02:04,410 --> 00:02:06,930
The two main things I'm really
going to talk about are

47
00:02:06,930 --> 00:02:13,480
scrolling performance of complex
content, which is more

48
00:02:13,480 --> 00:02:14,780
or less a stress test
for all rendering

49
00:02:14,780 --> 00:02:16,260
platforms, not just web.

50
00:02:16,260 --> 00:02:18,160
People also have a problem
with this on iOS.

51
00:02:18,160 --> 00:02:21,140
God knows they have a problem
with it on Android.

52
00:02:21,140 --> 00:02:23,560
And it more or less
forces us to solve

53
00:02:23,560 --> 00:02:24,910
all the other problems.

54
00:02:24,910 --> 00:02:26,610
And second one is memory
management,

55
00:02:26,610 --> 00:02:29,560
which is quite related.

56
00:02:29,560 --> 00:02:30,950
So to start off, let's
say what the goal is.

57
00:02:30,950 --> 00:02:33,270
The goal is 60 frames per
second animation with no

58
00:02:33,270 --> 00:02:35,070
dropped frames.

59
00:02:35,070 --> 00:02:36,220
This is kind of the panacea.

60
00:02:36,220 --> 00:02:37,470
Everybody wants to get here.

61
00:02:37,470 --> 00:02:40,580

62
00:02:40,580 --> 00:02:42,880
But it's not always possible.

63
00:02:42,880 --> 00:02:45,310
So let's have a fallback goal.

64
00:02:45,310 --> 00:02:49,480
And say, if we can get to 30
frames per second animations.

65
00:02:49,480 --> 00:02:50,820
Make this reliable.

66
00:02:50,820 --> 00:02:53,390
Make it have no stuttering.

67
00:02:53,390 --> 00:02:55,390
This often is achievable.

68
00:02:55,390 --> 00:02:59,900
And in a lot of user tests that
we've done, this tends to

69
00:02:59,900 --> 00:03:01,890
perform a lot better than having
something that runs at

70
00:03:01,890 --> 00:03:05,305
60 frames per second some of the
time, and even 40 frames

71
00:03:05,305 --> 00:03:06,920
per second some of the time.

72
00:03:06,920 --> 00:03:11,000
So if it goes from some 60 down
to 40, back up to 60,

73
00:03:11,000 --> 00:03:12,990
people often see that as being
worse than just having a

74
00:03:12,990 --> 00:03:14,498
steady 30 frames per
second animation.

75
00:03:14,498 --> 00:03:17,730

76
00:03:17,730 --> 00:03:19,920
So nice to have 60.

77
00:03:19,920 --> 00:03:21,960
If we can get a steady 30,
you're generally in a fairly

78
00:03:21,960 --> 00:03:24,300
good place.

79
00:03:24,300 --> 00:03:25,740
So what's stopping
us getting there?

80
00:03:25,740 --> 00:03:27,880
There's a whole bunch
of things.

81
00:03:27,880 --> 00:03:30,130
To start of with is the
large DOM size.

82
00:03:30,130 --> 00:03:32,670
If you want to take something
like Facebook newsfeed, you

83
00:03:32,670 --> 00:03:36,950
have variable height rows made
up of large images, small

84
00:03:36,950 --> 00:03:39,720
images, no images, variable
length text, everything

85
00:03:39,720 --> 00:03:42,490
changes size, and you don't
know what size it is until

86
00:03:42,490 --> 00:03:43,740
you're trying to show
it to somebody.

87
00:03:43,740 --> 00:03:46,120

88
00:03:46,120 --> 00:03:48,630
And also, if you have thousands
of these, which you

89
00:03:48,630 --> 00:03:52,470
technically could, the browser
just starts running into

90
00:03:52,470 --> 00:03:54,010
serious memory problems.

91
00:03:54,010 --> 00:03:55,290
So you have to decide things.

92
00:03:55,290 --> 00:03:55,910
When do you create it?

93
00:03:55,910 --> 00:03:59,150
Do you create it up front
and take an upfront hit?

94
00:03:59,150 --> 00:04:03,610
Do you create it lazily, and
take a hit as people are using

95
00:04:03,610 --> 00:04:05,040
your application?

96
00:04:05,040 --> 00:04:07,230
That often depends on what
you're trying to build.

97
00:04:07,230 --> 00:04:09,760
For example, Gmail takes
a hit up front.

98
00:04:09,760 --> 00:04:12,820
Because they expect you to leave
the tab open for weeks.

99
00:04:12,820 --> 00:04:15,520
Facebook goes the other way,
because it's more of a random

100
00:04:15,520 --> 00:04:16,529
browsing experience.

101
00:04:16,529 --> 00:04:20,600
And they try to make the upfront
hit very small, and

102
00:04:20,600 --> 00:04:21,850
render later.

103
00:04:21,850 --> 00:04:25,260

104
00:04:25,260 --> 00:04:25,660
OK.

105
00:04:25,660 --> 00:04:28,972
So one of the main problems we
have is, if you want to keep

106
00:04:28,972 --> 00:04:32,240
the DOM small, that basically
means you've got to change it

107
00:04:32,240 --> 00:04:32,830
on the fly.

108
00:04:32,830 --> 00:04:34,460
If you have a lot of data to
show, and you don't want to

109
00:04:34,460 --> 00:04:36,920
have a big tree, you've got
to change it on the fly.

110
00:04:36,920 --> 00:04:38,960
And that basically is great.

111
00:04:38,960 --> 00:04:40,550
You've got a nice, small DOM.

112
00:04:40,550 --> 00:04:42,680
But that introduces a whole
bunch of other problems, which

113
00:04:42,680 --> 00:04:44,670
we're going to get into.

114
00:04:44,670 --> 00:04:46,710
One solution people come up
with is have a pool of

115
00:04:46,710 --> 00:04:48,830
reusable DOM elements.

116
00:04:48,830 --> 00:04:50,380
Say you have 20 different
types of

117
00:04:50,380 --> 00:04:51,770
rows you want to show.

118
00:04:51,770 --> 00:04:53,670
Have a pool of each of
them, and reuse them.

119
00:04:53,670 --> 00:04:57,690
So that way you don't go from a
small image to a big image,

120
00:04:57,690 --> 00:04:58,940
back to a small image.

121
00:04:58,940 --> 00:05:02,630
Something with no images,
something with text only.

122
00:05:02,630 --> 00:05:04,770
So this can help.

123
00:05:04,770 --> 00:05:07,740
But you still end up with
kicking off page reflows if

124
00:05:07,740 --> 00:05:08,990
you're not careful.

125
00:05:08,990 --> 00:05:11,670

126
00:05:11,670 --> 00:05:15,630
Also, when you do start changing
things, say you go

127
00:05:15,630 --> 00:05:18,255
from a small bit of text to a
long bit of text, even inside

128
00:05:18,255 --> 00:05:19,900
of something that you haven't
technically changed the

129
00:05:19,900 --> 00:05:21,830
structure of, you can change
the height of it, you can

130
00:05:21,830 --> 00:05:23,590
change the width of it.

131
00:05:23,590 --> 00:05:24,990
And often, you need
to know this.

132
00:05:24,990 --> 00:05:27,420
If you haven't measured
everything ahead of time, then

133
00:05:27,420 --> 00:05:29,390
you need to know how
big something is.

134
00:05:29,390 --> 00:05:31,620
For example, if you want to show
somebody a scroll bar,

135
00:05:31,620 --> 00:05:34,010
they have to know
what size it is.

136
00:05:34,010 --> 00:05:37,880
But the main problem with this
is that touching the

137
00:05:37,880 --> 00:05:39,550
DOM makes Ryan sad.

138
00:05:39,550 --> 00:05:41,020
It makes him very, very sad.

139
00:05:41,020 --> 00:05:43,200
And you don't want
to make Ryan sad.

140
00:05:43,200 --> 00:05:48,630
So measuring the size of a DOM
load, it basically stops

141
00:05:48,630 --> 00:05:49,030
everything.

142
00:05:49,030 --> 00:05:53,110
Makes the browser flush all its
pending operations, and

143
00:05:53,110 --> 00:05:54,790
slows everything down.

144
00:05:54,790 --> 00:05:56,670
So what do we do?

145
00:05:56,670 --> 00:05:58,090
We'd like to keep it
off the UI thread.

146
00:05:58,090 --> 00:06:00,310
This is possible in native.

147
00:06:00,310 --> 00:06:02,810
For example, the Facebook for
iOS app has a completely

148
00:06:02,810 --> 00:06:04,930
separate thread that more or
less does everything the UI

149
00:06:04,930 --> 00:06:07,050
thread does, but does it
off the UI thread.

150
00:06:07,050 --> 00:06:08,710
Measures everything, renders
everything, and then just

151
00:06:08,710 --> 00:06:09,450
passes it over.

152
00:06:09,450 --> 00:06:10,690
That would be lovely.

153
00:06:10,690 --> 00:06:12,690
We can't do that.

154
00:06:12,690 --> 00:06:15,640
One reason is we don't
always have workers

155
00:06:15,640 --> 00:06:16,530
on the latest iOS.

156
00:06:16,530 --> 00:06:19,380
We do on Android.

157
00:06:19,380 --> 00:06:20,900
But we don't always.

158
00:06:20,900 --> 00:06:22,950
Also workers on a single
CPU are slow.

159
00:06:22,950 --> 00:06:25,190
If you're trying to run a worker
on iPhone 4, which only

160
00:06:25,190 --> 00:06:28,400
has a single core, you're not
really getting any gain.

161
00:06:28,400 --> 00:06:30,070
I mean yes, it's different
thread.

162
00:06:30,070 --> 00:06:32,660
But it runs on the same CPU.

163
00:06:32,660 --> 00:06:34,250
And anyway, workers
can't be DOM.

164
00:06:34,250 --> 00:06:35,500
So this doesn't really
help you.

165
00:06:35,500 --> 00:06:38,740

166
00:06:38,740 --> 00:06:40,510
So what can we do?

167
00:06:40,510 --> 00:06:41,190
Hide the scroll bar.

168
00:06:41,190 --> 00:06:42,910
Don't tell people how
much stuff's there.

169
00:06:42,910 --> 00:06:46,710
It's a dirty hack,
but it works.

170
00:06:46,710 --> 00:06:49,170
You don't have to measure a
thousand rows, because just

171
00:06:49,170 --> 00:06:49,570
don't tell them.

172
00:06:49,570 --> 00:06:51,670
Just tell them keep scrolling.

173
00:06:51,670 --> 00:06:53,170
But some people like
scroll bars.

174
00:06:53,170 --> 00:06:56,100
So another thing you can do
is measure when not busy.

175
00:06:56,100 --> 00:06:57,570
This can be fairly tricky.

176
00:06:57,570 --> 00:06:59,030
Because when are you not busy?

177
00:06:59,030 --> 00:07:00,160
You're not touching it now.

178
00:07:00,160 --> 00:07:03,010
What if you start measuring,
you say, I'm going to spend

179
00:07:03,010 --> 00:07:06,595
100 milliseconds measuring
the next X things.

180
00:07:06,595 --> 00:07:08,385
Then in the middle of that 100
milliseconds, someone touches

181
00:07:08,385 --> 00:07:12,350
a page and you miss it because
your JavaScript is running.

182
00:07:12,350 --> 00:07:15,410
You can try and measure in the
middle of a frame, which we've

183
00:07:15,410 --> 00:07:18,145
done before, where we figured,
I spent five milliseconds out

184
00:07:18,145 --> 00:07:21,230
of the 16 or 32 millisecond
frame.

185
00:07:21,230 --> 00:07:24,520
And I'm going to use the
rest to render ahead.

186
00:07:24,520 --> 00:07:25,540
That can work.

187
00:07:25,540 --> 00:07:27,370
But it's really tricky to do.

188
00:07:27,370 --> 00:07:29,350
Something that we're starting to
play with now a bit as well

189
00:07:29,350 --> 00:07:33,165
is measuring on the server,
which is just something we're

190
00:07:33,165 --> 00:07:34,230
only prototyping
at the moment.

191
00:07:34,230 --> 00:07:37,650
But we figure in our use case,
we have at max a few thousand

192
00:07:37,650 --> 00:07:42,660
different ways to arrange all
the individual types of things

193
00:07:42,660 --> 00:07:43,140
on the newsfeed.

194
00:07:43,140 --> 00:07:45,490
And if you have an app like
that, then you can technically

195
00:07:45,490 --> 00:07:46,520
the DOM ahead of time.

196
00:07:46,520 --> 00:07:47,970
Figure out what you fit into.

197
00:07:47,970 --> 00:07:51,340
And just never measure
the DOM at all.

198
00:07:51,340 --> 00:07:52,680
I'm hopeful this might help.

199
00:07:52,680 --> 00:07:55,530
But it doesn't fit
every use case.

200
00:07:55,530 --> 00:07:58,750
But if it does, then measure
things once, and then never

201
00:07:58,750 --> 00:08:00,000
measure them again.

202
00:08:00,000 --> 00:08:02,820

203
00:08:02,820 --> 00:08:05,770
Another annoying thing
is repaints.

204
00:08:05,770 --> 00:08:08,640
Most of this comes in because
images are unpredictable.

205
00:08:08,640 --> 00:08:10,950
They load when you don't want
them to load, like when you're

206
00:08:10,950 --> 00:08:12,620
in the middle of an animation.

207
00:08:12,620 --> 00:08:14,410
They load the wrong size, so
you end up clipping them,

208
00:08:14,410 --> 00:08:15,980
which has its own cost.

209
00:08:15,980 --> 00:08:18,190
Or you end up resizing them,
and it has a massive cost,

210
00:08:18,190 --> 00:08:19,860
which some of the people were
talking about earlier.

211
00:08:19,860 --> 00:08:22,390
Not just network costs, but
obviously performance cost.

212
00:08:22,390 --> 00:08:24,660
And finally, they have
to be decoded.

213
00:08:24,660 --> 00:08:27,340
As we just heard, WebP takes
longer to decode than JPEG,

214
00:08:27,340 --> 00:08:29,640
and JPEG is bad enough
as it is.

215
00:08:29,640 --> 00:08:31,640
So if you're decoding things in
the middle of an animation,

216
00:08:31,640 --> 00:08:35,280
then you're going to
have a bad time.

217
00:08:35,280 --> 00:08:36,299
So what do you do?

218
00:08:36,299 --> 00:08:38,210
Some people defer all
image loading until

219
00:08:38,210 --> 00:08:40,059
you finish an animation.

220
00:08:40,059 --> 00:08:41,370
This is for new images.

221
00:08:41,370 --> 00:08:42,020
That can work.

222
00:08:42,020 --> 00:08:44,680
But it looks bad.

223
00:08:44,680 --> 00:08:47,150
You have a big, empty thing
scrolling by with a little bit

224
00:08:47,150 --> 00:08:48,480
of black text and a
couple of links.

225
00:08:48,480 --> 00:08:50,820
And when you stop, everything
pops in.

226
00:08:50,820 --> 00:08:51,620
It works.

227
00:08:51,620 --> 00:08:52,870
You get nice animation.

228
00:08:52,870 --> 00:08:55,090
And as a start, it's good.

229
00:08:55,090 --> 00:08:57,440
Other people use low res images,
which have a lower

230
00:08:57,440 --> 00:08:58,210
decode cost.

231
00:08:58,210 --> 00:09:02,010
But it still costs paint.

232
00:09:02,010 --> 00:09:06,590
And what we're doing now, or
trying to do, is figure out

233
00:09:06,590 --> 00:09:08,990
how much time each particular
operation, including text

234
00:09:08,990 --> 00:09:12,310
changes and image changes,
take per animation frame.

235
00:09:12,310 --> 00:09:15,790
And we figure we have a 16
millisecond animation frame.

236
00:09:15,790 --> 00:09:17,500
We have used 10 milliseconds.

237
00:09:17,500 --> 00:09:19,710
It normally takes 6
milliseconds to

238
00:09:19,710 --> 00:09:20,740
draw a small image.

239
00:09:20,740 --> 00:09:22,110
So we still have time.

240
00:09:22,110 --> 00:09:23,330
And if we don't, then
we defer it.

241
00:09:23,330 --> 00:09:24,660
And you do get a blank image.

242
00:09:24,660 --> 00:09:27,300
And that gives you the nice
effect of, sometimes you'll

243
00:09:27,300 --> 00:09:30,000
see images scrolling past or
images popping in in the

244
00:09:30,000 --> 00:09:30,890
middle of a scroll.

245
00:09:30,890 --> 00:09:34,240
Sometimes, you don't get to
it, but it tends to look

246
00:09:34,240 --> 00:09:36,180
better than the first one.

247
00:09:36,180 --> 00:09:36,720
That's very hard.

248
00:09:36,720 --> 00:09:38,100
You've got to write
that yourself.

249
00:09:38,100 --> 00:09:40,590
You've got to write
it in JavaScript.

250
00:09:40,590 --> 00:09:42,680
Would be nice if browsers did
these things for you.

251
00:09:42,680 --> 00:09:45,450
But hopefully, we might get
there at some point.

252
00:09:45,450 --> 00:09:47,360
And another one is resizing.

253
00:09:47,360 --> 00:09:49,650
A lot of people think that
resizing images, like just

254
00:09:49,650 --> 00:09:50,300
don't resize.

255
00:09:50,300 --> 00:09:52,700
Don't do it, just clip them.

256
00:09:52,700 --> 00:09:55,100
Often, you can't, as people were
talking about earlier.

257
00:09:55,100 --> 00:09:57,360
Like Jackson was mentioning
at Facebook, we have four

258
00:09:57,360 --> 00:09:58,980
different sizes of images
that we use.

259
00:09:58,980 --> 00:10:00,860
And if you clip them too much,
then it just looks terrible.

260
00:10:00,860 --> 00:10:03,370
You cut off people's heads,
and that kind of thing.

261
00:10:03,370 --> 00:10:07,030
And saying OK, just ship
the right size.

262
00:10:07,030 --> 00:10:08,270
Shipping the right
size is hard.

263
00:10:08,270 --> 00:10:10,330
You've got massive
server costs.

264
00:10:10,330 --> 00:10:14,320
It helps you to be a large
corporation, where you can

265
00:10:14,320 --> 00:10:18,760
tell like Akamai, we really,
really need a solution here.

266
00:10:18,760 --> 00:10:19,820
And they will help you.

267
00:10:19,820 --> 00:10:20,980
If you're not a large
corporation,

268
00:10:20,980 --> 00:10:22,480
you can't do that.

269
00:10:22,480 --> 00:10:26,710
It's very hard to say that if
say I want a 57 by 57 pixel

270
00:10:26,710 --> 00:10:29,170
image, you must serve
it to me.

271
00:10:29,170 --> 00:10:31,930
So one thing you can do is get
designers to calm down a

272
00:10:31,930 --> 00:10:33,180
little bit.

273
00:10:33,180 --> 00:10:36,970
And just tell them, don't try
loading images in subtly

274
00:10:36,970 --> 00:10:38,525
different pixel sizes.

275
00:10:38,525 --> 00:10:41,800
Do you really need a 50
and a 52 pixel image?

276
00:10:41,800 --> 00:10:43,860
Maybe you don't.

277
00:10:43,860 --> 00:10:47,890
Then just have a single 50 pixel
image and you're done.

278
00:10:47,890 --> 00:10:49,800
Designers like to have a free
hand in everything.

279
00:10:49,800 --> 00:10:51,900
But reality has to come into
play at some point.

280
00:10:51,900 --> 00:10:54,460

281
00:10:54,460 --> 00:10:57,590
So one of the final things
is decoding JPEGs.

282
00:10:57,590 --> 00:10:59,370
A lot of people don't
think about this.

283
00:10:59,370 --> 00:11:03,910
A lot of people, they look at
the timeline on Chrome.

284
00:11:03,910 --> 00:11:05,880
And you see a lot of paints
and that kind of thing.

285
00:11:05,880 --> 00:11:08,940
But decoding JPEGs can be a very
large hit, almost as much

286
00:11:08,940 --> 00:11:10,960
as painting sometimes.

287
00:11:10,960 --> 00:11:12,520
One thing we're playing
with is doing

288
00:11:12,520 --> 00:11:13,810
it in a worker thread.

289
00:11:13,810 --> 00:11:16,120
Doing XHR to the server, get
down the data for a JPEG.

290
00:11:16,120 --> 00:11:19,000
Decode it in JavaScript on a
worker thread, ship the data

291
00:11:19,000 --> 00:11:21,280
UI off to the image
on the UI thread.

292
00:11:21,280 --> 00:11:23,000
And then you're only paying
for the paint.

293
00:11:23,000 --> 00:11:24,190
In some cases, that works.

294
00:11:24,190 --> 00:11:25,410
In some cases, it doesn't.

295
00:11:25,410 --> 00:11:26,630
We've only rolled out a test.

296
00:11:26,630 --> 00:11:29,410
But for large images,
it seems to work.

297
00:11:29,410 --> 00:11:30,770
For small images, it doesn't.

298
00:11:30,770 --> 00:11:31,380
It's horrible.

299
00:11:31,380 --> 00:11:33,920
And I wish we could have off
thread JPEG decoding.

300
00:11:33,920 --> 00:11:38,495
But such as it is, it still
slows down our scrolling.

301
00:11:38,495 --> 00:11:39,745
Alex looks thoughtful.

302
00:11:39,745 --> 00:11:43,100

303
00:11:43,100 --> 00:11:44,920
Obviously, there are other
good solutions to this.

304
00:11:44,920 --> 00:11:46,980
But hopefully, the guys will
know some of them.

305
00:11:46,980 --> 00:11:49,820
And the last one that we're
probably going to end up

306
00:11:49,820 --> 00:11:53,440
mentioning is GC, which
everybody knows stands for

307
00:11:53,440 --> 00:11:56,410
Gremlin Carnage.

308
00:11:56,410 --> 00:11:57,800
OK, it really stands for
garbage collection.

309
00:11:57,800 --> 00:11:59,570
But it might as well stand
for Gremlin Carnage.

310
00:11:59,570 --> 00:12:01,640
Because it's just this random
little monster that runs

311
00:12:01,640 --> 00:12:04,270
around, and makes
you very sad.

312
00:12:04,270 --> 00:12:06,040
Unless when he looks really
cute like that, and then

313
00:12:06,040 --> 00:12:07,870
everything's good.

314
00:12:07,870 --> 00:12:11,740
So with garbage collection, you
put all this effort into

315
00:12:11,740 --> 00:12:15,140
having a fantastically good,
smooth animation.

316
00:12:15,140 --> 00:12:17,500
And then something random comes
in and takes up 100

317
00:12:17,500 --> 00:12:19,180
milliseconds and kills
everything.

318
00:12:19,180 --> 00:12:21,660
V8 has, in the last
year or so--

319
00:12:21,660 --> 00:12:25,090
year, 18 months-- come up with
incremental GC, which spreads

320
00:12:25,090 --> 00:12:25,720
the load a bit.

321
00:12:25,720 --> 00:12:28,790
But you still get hit by these
large mark sweep things that

322
00:12:28,790 --> 00:12:31,330
can still take a large
amount of time.

323
00:12:31,330 --> 00:12:33,460
One thing you can do is just
go through your whole code,

324
00:12:33,460 --> 00:12:36,060
and micro-optimize absolutely
every tiny little piece to not

325
00:12:36,060 --> 00:12:40,220
use memory, to reuse events, to
reuse all sorts of things.

326
00:12:40,220 --> 00:12:40,970
It's painstaking.

327
00:12:40,970 --> 00:12:42,620
It takes forever.

328
00:12:42,620 --> 00:12:44,540
And I don't know of
a silver bullet.

329
00:12:44,540 --> 00:12:48,910
But we will be discussing this,
and hopefully somebody

330
00:12:48,910 --> 00:12:51,920
has a silver bullet,
because I want one.

331
00:12:51,920 --> 00:12:52,160
All right.

332
00:12:52,160 --> 00:12:54,628
And with that, let's get
on with the questions.

333
00:12:54,628 --> 00:12:55,880
MATT DELANEY: Thanks, Shane.

334
00:12:55,880 --> 00:13:02,910

335
00:13:02,910 --> 00:13:05,020
So I'm not sure exactly where,
but somewhere out there

336
00:13:05,020 --> 00:13:05,530
there's another mic.

337
00:13:05,530 --> 00:13:08,310
So just keep in mind for this
panel, we have a roving mic

338
00:13:08,310 --> 00:13:10,650
that will magically appear
as you need it.

339
00:13:10,650 --> 00:13:14,140
So we're hoping for even more
people talking in this talk

340
00:13:14,140 --> 00:13:15,650
from the audience, because
everyone deals with

341
00:13:15,650 --> 00:13:17,350
performance.

342
00:13:17,350 --> 00:13:17,600
OK.

343
00:13:17,600 --> 00:13:19,390
So the first question here.

344
00:13:19,390 --> 00:13:24,510

345
00:13:24,510 --> 00:13:27,360
So from our very own Andrew
Betts, we have the first

346
00:13:27,360 --> 00:13:30,605
question which is, with longer
and longer lived pages, will

347
00:13:30,605 --> 00:13:33,170
web developers start having
to spend time on memory

348
00:13:33,170 --> 00:13:33,900
management?

349
00:13:33,900 --> 00:13:35,500
And is that a good thing?

350
00:13:35,500 --> 00:13:38,774
And I'd like to start off Rowan
with this question.

351
00:13:38,774 --> 00:13:40,490
ROWAN BEENJE: Well, I
think Shane, you've

352
00:13:40,490 --> 00:13:43,250
covered some of it there.

353
00:13:43,250 --> 00:13:44,890
I think Shane did cover
some of it there.

354
00:13:44,890 --> 00:13:47,270
We are going to have to worry
a lot more about memory,

355
00:13:47,270 --> 00:13:48,620
especially on memory constraint

356
00:13:48,620 --> 00:13:50,890
stuff like mobile devices.

357
00:13:50,890 --> 00:13:54,715
And the tooling has
got better.

358
00:13:54,715 --> 00:13:57,090
Garbage collection
has got better.

359
00:13:57,090 --> 00:13:58,040
I don't know how much--

360
00:13:58,040 --> 00:14:00,550
AUDIENCE: You had the
mic [INAUDIBLE].

361
00:14:00,550 --> 00:14:03,155
ROWAN BEENJE: I don't know how
much everyone knows about--

362
00:14:03,155 --> 00:14:05,830

363
00:14:05,830 --> 00:14:08,540
I don't know how much everyone
knows about the current memory

364
00:14:08,540 --> 00:14:08,910
implementations.

365
00:14:08,910 --> 00:14:10,950
But it's no longer retain
release stuff.

366
00:14:10,950 --> 00:14:13,140
It's all very nice.

367
00:14:13,140 --> 00:14:15,570
Is anything still attached
to the documents?

368
00:14:15,570 --> 00:14:18,350
So no longer cycles
to worry about.

369
00:14:18,350 --> 00:14:22,090
But you do still have to keep
very careful track of objects,

370
00:14:22,090 --> 00:14:24,440
and make sure you don't have
to attach DOM trees.

371
00:14:24,440 --> 00:14:26,810
Massive memory loss there.

372
00:14:26,810 --> 00:14:29,610
And Chrome tools have got
a lot better in this.

373
00:14:29,610 --> 00:14:30,870
You can do heap snapshots.

374
00:14:30,870 --> 00:14:31,900
You can dip your
heap snapshots.

375
00:14:31,900 --> 00:14:37,070
You can work out where you're
leaking objects in your

376
00:14:37,070 --> 00:14:38,530
application life cycle.

377
00:14:38,530 --> 00:14:40,835
But we are going to have to
worry about a lot more.

378
00:14:40,835 --> 00:14:43,410
As Shane said, reuse isn't
silver bullet.

379
00:14:43,410 --> 00:14:45,520
But it's what we have to work
with for the time being.

380
00:14:45,520 --> 00:14:48,304

381
00:14:48,304 --> 00:14:50,140
MATT DELANEY: Anyone else?

382
00:14:50,140 --> 00:14:52,450
PAVEL FELDMAN: It's a bad thing
that we need to care

383
00:14:52,450 --> 00:14:52,940
about memory.

384
00:14:52,940 --> 00:14:54,110
But it's inevitable.

385
00:14:54,110 --> 00:14:56,530
We'll need to take
care of memory.

386
00:14:56,530 --> 00:14:59,990
And we need to make it a
standard part of our

387
00:14:59,990 --> 00:15:01,440
development practice.

388
00:15:01,440 --> 00:15:03,670
And not only we should care
about the present state, but

389
00:15:03,670 --> 00:15:06,060
about the regressions as well.

390
00:15:06,060 --> 00:15:08,100
Because you don't want to fix
everything, and then lose it

391
00:15:08,100 --> 00:15:10,570
all with some regression bug.

392
00:15:10,570 --> 00:15:14,260
And on the tools front, we are
working on exposing better and

393
00:15:14,260 --> 00:15:14,990
better pictures.

394
00:15:14,990 --> 00:15:18,290
We're currently working on
native memory instrumentation,

395
00:15:18,290 --> 00:15:22,110
so that you saw how much DOM and
strings and resources and

396
00:15:22,110 --> 00:15:24,760
images and decoded images
are taking.

397
00:15:24,760 --> 00:15:27,560
But what we can see is
that apps [? model ?]

398
00:15:27,560 --> 00:15:32,110
is most likely a source of the
memory leak and involved with

399
00:15:32,110 --> 00:15:32,830
memory growth.

400
00:15:32,830 --> 00:15:36,260
So you should be using heap
profiler for that.

401
00:15:36,260 --> 00:15:37,510
And yes, it's complex.

402
00:15:37,510 --> 00:15:42,550
And yes, heap profiling and
memory leak hunting is kind of

403
00:15:42,550 --> 00:15:43,120
a last resort.

404
00:15:43,120 --> 00:15:44,300
You don't want to do that.

405
00:15:44,300 --> 00:15:46,900
But you end up doing it.

406
00:15:46,900 --> 00:15:50,070
And you end up doing it not
only for web, but in any

407
00:15:50,070 --> 00:15:51,000
development platform.

408
00:15:51,000 --> 00:15:53,420
So just make it a standard
practice.

409
00:15:53,420 --> 00:15:58,219

410
00:15:58,219 --> 00:16:00,980
SHANE O'SULLIVAN: One thing that
we've run into is that

411
00:16:00,980 --> 00:16:03,740
often, you know when your app
is not doing anything.

412
00:16:03,740 --> 00:16:06,110
And you know that, for example,
right after someone

413
00:16:06,110 --> 00:16:07,860
finishes scrolling, they're
going to stop and read

414
00:16:07,860 --> 00:16:10,410
something for at least 100
milliseconds before they start

415
00:16:10,410 --> 00:16:12,040
doing interactions again.

416
00:16:12,040 --> 00:16:14,740
And one of the things that would
be fantastic is if you

417
00:16:14,740 --> 00:16:18,730
could just say, I know my app
state Now clean it up.

418
00:16:18,730 --> 00:16:20,660
But don't do it in two
seconds time when

419
00:16:20,660 --> 00:16:22,040
they're scrolling again.

420
00:16:22,040 --> 00:16:22,970
Clean up now.

421
00:16:22,970 --> 00:16:24,930
And I know this has been
brought up before, too.

422
00:16:24,930 --> 00:16:28,770
Everybody who ever built a
garbage collector, and they

423
00:16:28,770 --> 00:16:32,655
always say, it's always best
guess, or maybe that isn't the

424
00:16:32,655 --> 00:16:35,630
best time to do it, and all
that kind of stuff.

425
00:16:35,630 --> 00:16:37,350
But being someone who doesn't
actually know how the

426
00:16:37,350 --> 00:16:41,696
internals work, why is that?

427
00:16:41,696 --> 00:16:43,850
PAVEL FELDMAN: I'm not
commenting on the GC,

428
00:16:43,850 --> 00:16:45,460
controlling GC questions.

429
00:16:45,460 --> 00:16:46,790
It's a tough area.

430
00:16:46,790 --> 00:16:49,570
And you should be really
talking to the

431
00:16:49,570 --> 00:16:51,530
virtual machine engineers.

432
00:16:51,530 --> 00:16:53,940
And they have the
official story.

433
00:16:53,940 --> 00:16:56,474
Paul, what is our
official story?

434
00:16:56,474 --> 00:16:58,442
PAUL: I have no idea.

435
00:16:58,442 --> 00:17:01,130
PAVEL FELDMAN: So the answer
that you get from the

436
00:17:01,130 --> 00:17:05,480
[? vendors ?] is always, we are
going to do best for you.

437
00:17:05,480 --> 00:17:07,140
You don't want to control it.

438
00:17:07,140 --> 00:17:09,420
Or otherwise, you will
lead us into trouble.

439
00:17:09,420 --> 00:17:12,480
But you really need to go into
the details, and talk to the

440
00:17:12,480 --> 00:17:14,670
actual engineers.

441
00:17:14,670 --> 00:17:16,514
SHANE O'SULLIVAN: Do we have
any of them in the room?

442
00:17:16,514 --> 00:17:22,425

443
00:17:22,425 --> 00:17:23,609
MATT DELANEY: This relates
directly to the

444
00:17:23,609 --> 00:17:24,609
next question, it's--

445
00:17:24,609 --> 00:17:26,780
SHANE O'SULLIVAN: Or a dozen of
next questions like that.

446
00:17:26,780 --> 00:17:26,960
MATT DELANEY: What's that?

447
00:17:26,960 --> 00:17:29,830
SHANE O'SULLIVAN: Or a dozen
of next questions on this.

448
00:17:29,830 --> 00:17:30,600
MATT DELANEY: Right.

449
00:17:30,600 --> 00:17:32,980
So this is kind of an
interesting thing from a

450
00:17:32,980 --> 00:17:36,180
standpoint of perhaps getting
the answer from them.

451
00:17:36,180 --> 00:17:40,300
But the next person asks, which
is Shapir from Israel,

452
00:17:40,300 --> 00:17:43,000
is, should JavaScript be allowed
to explicitly trigger

453
00:17:43,000 --> 00:17:45,640
garbage collection when you
the app is idling, say?

454
00:17:45,640 --> 00:17:48,650
Or if the app knows when
it's OK to do so?

455
00:17:48,650 --> 00:17:51,740
Or should it be allowed to
prevent GC when actually

456
00:17:51,740 --> 00:17:53,890
performing time critical
operations?

457
00:17:53,890 --> 00:17:55,370
So this is currently something
that people don't really have

458
00:17:55,370 --> 00:17:55,970
control over.

459
00:17:55,970 --> 00:17:57,530
But, hear your take on it.

460
00:17:57,530 --> 00:18:00,476

461
00:18:00,476 --> 00:18:02,840
ROWAN BEENJE: I think the only
other thing to bear in mind is

462
00:18:02,840 --> 00:18:05,720
that there are occasions when
the browser is going to have

463
00:18:05,720 --> 00:18:07,570
to garbage collect if it's
running out of memory.

464
00:18:07,570 --> 00:18:08,780
So there's always going
to be points where you

465
00:18:08,780 --> 00:18:09,520
can't control it.

466
00:18:09,520 --> 00:18:12,150
But perhaps we could hint,
I'd like the next 16

467
00:18:12,150 --> 00:18:13,150
milliseconds, perhaps.

468
00:18:13,150 --> 00:18:15,812
Please don't garbage collect
during that time.

469
00:18:15,812 --> 00:18:19,450
AUDIENCE: So do you see
observability as a

470
00:18:19,450 --> 00:18:20,860
major issue at TC39?

471
00:18:20,860 --> 00:18:23,450
So one of the things that I
wind up doing is one of

472
00:18:23,450 --> 00:18:25,480
Google's representatives to
the standards body for

473
00:18:25,480 --> 00:18:26,430
JavaScript.

474
00:18:26,430 --> 00:18:30,740
And so being able to know
exactly when garbage

475
00:18:30,740 --> 00:18:34,100
collection happens has
potentially very serious side

476
00:18:34,100 --> 00:18:38,620
effects for cross-document and
cross-origin communication,

477
00:18:38,620 --> 00:18:39,910
which are not friendly.

478
00:18:39,910 --> 00:18:45,110
There's also the concern that
exposing GC will bake into the

479
00:18:45,110 --> 00:18:49,200
web heuristics which are likely
to be proven wrong

480
00:18:49,200 --> 00:18:49,910
anytime now.

481
00:18:49,910 --> 00:18:54,750
So in the history of V8, we've
gone from having a

482
00:18:54,750 --> 00:18:58,960
generational GC to having
many, many, many other

483
00:18:58,960 --> 00:19:00,840
variance of generational GC.

484
00:19:00,840 --> 00:19:04,760
And if you bake in invariants
in your code based on V8,

485
00:19:04,760 --> 00:19:07,390
they'll be wrong under Nitro.

486
00:19:07,390 --> 00:19:10,810
And they'll be wrong under
IonMonkey, or whatever the

487
00:19:10,810 --> 00:19:13,052
next thing is out of
the next vendor.

488
00:19:13,052 --> 00:19:15,530
And so the optimizations you'll
employ are likely to

489
00:19:15,530 --> 00:19:17,310
get you into a place where not
only will you be wrong in the

490
00:19:17,310 --> 00:19:20,710
future version of the VM that
you're currently attempting to

491
00:19:20,710 --> 00:19:23,080
tickle in the right way, you'll
certainly be wrong on

492
00:19:23,080 --> 00:19:24,050
the other VMs, too.

493
00:19:24,050 --> 00:19:26,890
So it's a nasty place to
end your code base up.

494
00:19:26,890 --> 00:19:34,000

495
00:19:34,000 --> 00:19:36,080
CHRIS LORD: I don't have
anything to add to that.

496
00:19:36,080 --> 00:19:38,060
MATT DELANEY: Have you guys run
into any situations where

497
00:19:38,060 --> 00:19:39,900
you felt like it would be a much
better thing to be able

498
00:19:39,900 --> 00:19:41,325
have control over these?

499
00:19:41,325 --> 00:19:43,520
Because in a lot of native
platforms, you have, of

500
00:19:43,520 --> 00:19:46,430
course, different controls over
the VMs, like say in JVM

501
00:19:46,430 --> 00:19:47,020
and whatnot.

502
00:19:47,020 --> 00:19:49,690
Are there any other times in
your experience where you've

503
00:19:49,690 --> 00:19:51,560
dealt with wanting something
like this?

504
00:19:51,560 --> 00:19:55,422

505
00:19:55,422 --> 00:19:56,380
SHANE O'SULLIVAN: Yeah.

506
00:19:56,380 --> 00:19:59,500
It's more from an extremely
high level, rather than be

507
00:19:59,500 --> 00:20:02,110
able to observe specific things,
or even know when it's

508
00:20:02,110 --> 00:20:03,330
going to run.

509
00:20:03,330 --> 00:20:07,430
More from a point of view of
telling it, like you said, I'm

510
00:20:07,430 --> 00:20:09,580
starting to do something
really complicated now.

511
00:20:09,580 --> 00:20:10,800
Just calm down.

512
00:20:10,800 --> 00:20:14,350
And if my memory grows by
another 20 megabytes while

513
00:20:14,350 --> 00:20:17,080
you're waiting to GC, please
wait until I'm finished.

514
00:20:17,080 --> 00:20:19,770
And then feel free to hit
me with a big thing.

515
00:20:19,770 --> 00:20:21,080
I know, it may not
be possible.

516
00:20:21,080 --> 00:20:21,865
But--

517
00:20:21,865 --> 00:20:23,140
AUDIENCE: It can't
be that simple.

518
00:20:23,140 --> 00:20:27,610
Because we're trying to balance
the interests of the

519
00:20:27,610 --> 00:20:31,020
user, who may have triggered
your page to allocate those 20

520
00:20:31,020 --> 00:20:33,430
megabytes, versus, should
they go to swap now?

521
00:20:33,430 --> 00:20:35,670
What else should they be doing
here in order to--

522
00:20:35,670 --> 00:20:38,250
what's the most valuable thing
to do with those 20 megabytes?

523
00:20:38,250 --> 00:20:40,110
And the answer may
not be your app.

524
00:20:40,110 --> 00:20:41,110
You may think it is.

525
00:20:41,110 --> 00:20:43,780
But you may not have a global
view on what the user agent is

526
00:20:43,780 --> 00:20:45,575
doing for the user.

527
00:20:45,575 --> 00:20:48,350
CHRIS LORD: And I think to some
extent here, we're kind

528
00:20:48,350 --> 00:20:50,840
of trying to have our
cake and eat it.

529
00:20:50,840 --> 00:20:53,680
You kind of do have some
control over GC to some

530
00:20:53,680 --> 00:20:57,130
extent, in that you can just not
write things in a way that

531
00:20:57,130 --> 00:21:00,820
will end up with objects
to collect.

532
00:21:00,820 --> 00:21:03,060
It sounds kind of silly.

533
00:21:03,060 --> 00:21:08,220
But that's how like in Java on
Firefox mobile for Android, we

534
00:21:08,220 --> 00:21:11,470
have these problems in a lot
of our codes, like while

535
00:21:11,470 --> 00:21:14,060
you're panning and so
on is Java code.

536
00:21:14,060 --> 00:21:17,970
And if we create a load of
objects during those frames,

537
00:21:17,970 --> 00:21:20,940
then at some point, GC will
comes along at a completely

538
00:21:20,940 --> 00:21:24,890
random time and take more
than a frame's worth of

539
00:21:24,890 --> 00:21:26,850
time to do its work.

540
00:21:26,850 --> 00:21:28,380
And the way we work around
that is just

541
00:21:28,380 --> 00:21:29,890
by not doing that.

542
00:21:29,890 --> 00:21:31,870
We can't change the
garbage collector.

543
00:21:31,870 --> 00:21:34,200
And we probably wouldn't
want to anyway, really.

544
00:21:34,200 --> 00:21:36,740
Because then other things are
going to break, and other

545
00:21:36,740 --> 00:21:39,270
assumptions we've made
are going to break.

546
00:21:39,270 --> 00:21:42,950
You can just write your code
in such a way that it won't

547
00:21:42,950 --> 00:21:44,200
cause a lot of GC.

548
00:21:44,200 --> 00:21:47,445

549
00:21:47,445 --> 00:21:49,630
SHANE O'SULLIVAN:
No, that's true.

550
00:21:49,630 --> 00:21:50,190
Yeah, that's true.

551
00:21:50,190 --> 00:21:51,580
And you should be doing
that anyway.

552
00:21:51,580 --> 00:21:53,980
But it does just get to the
point at some point.

553
00:21:53,980 --> 00:21:55,510
I mean, if you're trying to do
things like I was saying

554
00:21:55,510 --> 00:21:58,160
there, or keep your DOM small,
and have some sort of complex

555
00:21:58,160 --> 00:22:00,600
controller that does all these
things and recycles views and

556
00:22:00,600 --> 00:22:01,850
all that kind of stuff.

557
00:22:01,850 --> 00:22:04,976

558
00:22:04,976 --> 00:22:07,070
You're doing all this to get
around the problem of large

559
00:22:07,070 --> 00:22:10,614
DOM and to avoid repaint, and
get as much reuse as you can.

560
00:22:10,614 --> 00:22:13,850
That inevitably leads to
large memory usage.

561
00:22:13,850 --> 00:22:17,375
If you have static content, like
buttons and icons, and

562
00:22:17,375 --> 00:22:18,190
you're swiping through those.

563
00:22:18,190 --> 00:22:18,890
Absolutely.

564
00:22:18,890 --> 00:22:22,010
But if you simply have megabytes
of data that, as a

565
00:22:22,010 --> 00:22:23,850
person scrolls through, you've
got to show them a piece at a

566
00:22:23,850 --> 00:22:27,900
time, it gets fairly difficult
to start avoiding things.

567
00:22:27,900 --> 00:22:32,280
Even when you cut it down
as much as possible.

568
00:22:32,280 --> 00:22:34,700
CHRIS LORD: I guess you kind
of want to balance the two.

569
00:22:34,700 --> 00:22:38,468

570
00:22:38,468 --> 00:22:39,600
MATT DELANEY: I'm moving on.

571
00:22:39,600 --> 00:22:42,450
So we've got a third question
here, from Jonno

572
00:22:42,450 --> 00:22:43,740
from London, or Yonno?

573
00:22:43,740 --> 00:22:45,860
Is that a person in here?

574
00:22:45,860 --> 00:22:46,840
Yonno?

575
00:22:46,840 --> 00:22:47,760
Anyway.

576
00:22:47,760 --> 00:22:51,230
So we've got a very talked about
topic here, but with

577
00:22:51,230 --> 00:22:52,690
respect to tooling this time.

578
00:22:52,690 --> 00:22:54,880
So when you're using CSS to
manually trigger hardware

579
00:22:54,880 --> 00:22:58,050
acceleration of DOM elements for
animations, for example,

580
00:22:58,050 --> 00:23:01,280
the hack of using translateZ(0),
is there a tool

581
00:23:01,280 --> 00:23:05,770
or any way to measure how this
impacts the users and GPU?

582
00:23:05,770 --> 00:23:06,770
They ask.

583
00:23:06,770 --> 00:23:09,550
Let's start with Feldman.

584
00:23:09,550 --> 00:23:10,110
PAVEL FELDMAN: Yeah.

585
00:23:10,110 --> 00:23:13,620
So you measure it
using timeline.

586
00:23:13,620 --> 00:23:17,640
And I won't comment on whether
it's a good practice or not to

587
00:23:17,640 --> 00:23:18,440
force the hardware

588
00:23:18,440 --> 00:23:19,850
acceleration using that technique.

589
00:23:19,850 --> 00:23:22,460
And Paul can cover that one.

590
00:23:22,460 --> 00:23:28,660
But once you've done that, you
can, in Chrome, and it covers

591
00:23:28,660 --> 00:23:34,460
good part of WebKit, you can use
timeline to measure both

592
00:23:34,460 --> 00:23:38,270
paints times, and just
compare those.

593
00:23:38,270 --> 00:23:42,020
That will obviously depend
on whether you are using

594
00:23:42,020 --> 00:23:42,370
[? retna ?]

595
00:23:42,370 --> 00:23:45,960
or not, size of the screen,
[? whatever, ?]

596
00:23:45,960 --> 00:23:46,550
accelerator.

597
00:23:46,550 --> 00:23:48,770
But you can do that.

598
00:23:48,770 --> 00:23:50,420
You'll need to have an
inventory for that.

599
00:23:50,420 --> 00:23:52,160
Because equipment differs.

600
00:23:52,160 --> 00:23:54,250
And do you want to comment
on the translating?

601
00:23:54,250 --> 00:23:58,731

602
00:23:58,731 --> 00:23:59,190
[? PAUL: ?]

603
00:23:59,190 --> 00:24:06,460
Just one thing about the
translate zed for me is that

604
00:24:06,460 --> 00:24:09,155
the way, certainly in Chrome,
it's handled is that it

605
00:24:09,155 --> 00:24:10,770
creates you a new layer,
but also a layer

606
00:24:10,770 --> 00:24:13,700
with a backing surface.

607
00:24:13,700 --> 00:24:17,340
So that effectively really maps
down to a texture that

608
00:24:17,340 --> 00:24:20,110
needs to be uploaded
to the GPU.

609
00:24:20,110 --> 00:24:22,380
So the net result of this is
that if you've got a translate

610
00:24:22,380 --> 00:24:24,810
zed or across a lot of
elements, on desktop

611
00:24:24,810 --> 00:24:25,630
you might be fine.

612
00:24:25,630 --> 00:24:28,350
Because you've got a lot
more VRAM to play with.

613
00:24:28,350 --> 00:24:30,220
But on mobile, you're going
to get punished.

614
00:24:30,220 --> 00:24:31,930
Because now you've got a lot of
textures that needs to be

615
00:24:31,930 --> 00:24:33,660
uploaded to your GPU.

616
00:24:33,660 --> 00:24:36,330
And the upload time might be
quite slow to get those

617
00:24:36,330 --> 00:24:39,460
textures from the CPU up to
the GPU, depending on the

618
00:24:39,460 --> 00:24:40,400
actual hardware you're
running on.

619
00:24:40,400 --> 00:24:43,240
So it's one of these things
that it's sort

620
00:24:43,240 --> 00:24:45,600
of used with caution.

621
00:24:45,600 --> 00:24:48,500
And it may be that in your
specific implementation it

622
00:24:48,500 --> 00:24:51,130
speeds things up, because you've
got enough VRAM to kind

623
00:24:51,130 --> 00:24:54,460
of cover that debt that you're
kind of creating for yourself.

624
00:24:54,460 --> 00:24:58,140
And it also is good because,
again, in Chrome, if it's

625
00:24:58,140 --> 00:25:00,670
possible, switch the rendering
mode over to thread

626
00:25:00,670 --> 00:25:03,080
compositing, which is often a
good thing, especially if

627
00:25:03,080 --> 00:25:04,700
you've got a lot
of animations.

628
00:25:04,700 --> 00:25:08,360
But you might just see, as
again, a mobile, you might see

629
00:25:08,360 --> 00:25:11,210
it crush your performance
if you do it too much.

630
00:25:11,210 --> 00:25:13,870
CHRIS LORD: Yeah, this is the
same case in Firefox, as well,

631
00:25:13,870 --> 00:25:17,740
where if you add any kind of
transformation, then it will

632
00:25:17,740 --> 00:25:21,620
end up not optimizing it, but
sort of making it appear on

633
00:25:21,620 --> 00:25:23,340
its own layer.

634
00:25:23,340 --> 00:25:25,040
There are other things to
consider, as well, when you're

635
00:25:25,040 --> 00:25:28,260
forcing layers and elements
and that.

636
00:25:28,260 --> 00:25:30,810
If you force something to become
a new layer, you're

637
00:25:30,810 --> 00:25:33,830
also forcing layers to be
underneath it and over it,

638
00:25:33,830 --> 00:25:36,000
depending on the structure
of the document.

639
00:25:36,000 --> 00:25:38,750
And again, depending on the
structure of the document,

640
00:25:38,750 --> 00:25:41,810
you'd also be forcing things
like alpha blending to happen.

641
00:25:41,810 --> 00:25:44,700
You're forcing things like
increased overdraw to happen,

642
00:25:44,700 --> 00:25:46,250
all of these.

643
00:25:46,250 --> 00:25:47,480
And you'd have memory
hit, you'd have

644
00:25:47,480 --> 00:25:50,660
GPU time hit as well.

645
00:25:50,660 --> 00:25:54,240
And at some point, like
translateZ(0) might end up

646
00:25:54,240 --> 00:25:56,596
just being a null op anyway.

647
00:25:56,596 --> 00:25:58,400
ROWAN BEENJE: It is
already on WebKit.

648
00:25:58,400 --> 00:26:00,520
It's been kind of deprecated
[INAUDIBLE].

649
00:26:00,520 --> 00:26:02,930
PAUL: Yeah, they may be like--

650
00:26:02,930 --> 00:26:05,710
there are other ways to trigger
the same behavior so

651
00:26:05,710 --> 00:26:06,890
that the warning [? shot ?]

652
00:26:06,890 --> 00:26:08,810
is, this one might
become null.

653
00:26:08,810 --> 00:26:13,930
But developers might gravitate
towards an alternative way of

654
00:26:13,930 --> 00:26:15,200
triggering the same effect.

655
00:26:15,200 --> 00:26:16,240
It is exactly what
you're saying.

656
00:26:16,240 --> 00:26:18,850
It depends on the context of
when you're using it as to

657
00:26:18,850 --> 00:26:21,880
whether it's actually a suitable
thing to do, really.

658
00:26:21,880 --> 00:26:23,250
MATT DELANEY: So there's really
a lot of knowledge

659
00:26:23,250 --> 00:26:25,030
here, and a lot of gotchas,
depending upon the platform

660
00:26:25,030 --> 00:26:27,300
and what they fall down into
doing, what actual rendering

661
00:26:27,300 --> 00:26:28,450
paths, right?

662
00:26:28,450 --> 00:26:30,090
But I guess for this question,
it'd be really interesting to

663
00:26:30,090 --> 00:26:32,490
point out maybe, especially
with people in the more

664
00:26:32,490 --> 00:26:35,490
constrained environments on
mobile, what do you guys see

665
00:26:35,490 --> 00:26:38,930
out there for tooling to measure
the impact of their

666
00:26:38,930 --> 00:26:42,280
apps usage of this hack upon
what they're doing?

667
00:26:42,280 --> 00:26:44,010
CHRIS LORD: This is quite
a difficult thing.

668
00:26:44,010 --> 00:26:50,320
Because GPU behavior is wildly
different, depending on what

669
00:26:50,320 --> 00:26:51,310
vendor you have.

670
00:26:51,310 --> 00:26:55,070
So Firefox does have a profiling
tool built in, which

671
00:26:55,070 --> 00:27:00,710
will profile at the native level
where time is spent.

672
00:27:00,710 --> 00:27:02,470
And it goes into JavaScript,
as well.

673
00:27:02,470 --> 00:27:06,100
So if you run your page or
your web GL app, and you

674
00:27:06,100 --> 00:27:09,720
scroll around with the profiler
enabled and you stop,

675
00:27:09,720 --> 00:27:12,330
you can see where time
is being spent.

676
00:27:12,330 --> 00:27:15,390
But in terms of getting really
granular results,

677
00:27:15,390 --> 00:27:16,250
that's quite hard.

678
00:27:16,250 --> 00:27:21,430
Like GL drivers quite often,
they'll defer work to the

679
00:27:21,430 --> 00:27:22,660
latest point possible.

680
00:27:22,660 --> 00:27:26,210
So you might find that although
you're doing a load

681
00:27:26,210 --> 00:27:30,100
of vertex upload or something,
you're uploading a load of

682
00:27:30,100 --> 00:27:34,830
data to the GPU, or you're
uploading a load of things,

683
00:27:34,830 --> 00:27:37,360
you might find that actually all
of that takes zero time.

684
00:27:37,360 --> 00:27:40,040
And swap takes all
of your time.

685
00:27:40,040 --> 00:27:43,040
Or clear takes all of your time,
or flush, or some other

686
00:27:43,040 --> 00:27:46,260
command where the GPU's like,
right, OK, we can't defer

687
00:27:46,260 --> 00:27:47,010
things any longer.

688
00:27:47,010 --> 00:27:49,500
We have to flush out
all the work.

689
00:27:49,500 --> 00:27:54,200
And we can't really counteract
that without doing, I guess,

690
00:27:54,200 --> 00:27:57,870
other clever things like having
a shim for the GL

691
00:27:57,870 --> 00:28:00,460
functions and the JavaScript,
so that we can log what

692
00:28:00,460 --> 00:28:04,030
commands you are using, and use
some kind of context to

693
00:28:04,030 --> 00:28:06,930
say, well, maybe you shouldn't
be doing all of this.

694
00:28:06,930 --> 00:28:08,670
Maybe you shouldn't be uploading
all of this data

695
00:28:08,670 --> 00:28:16,310
here, or maybe you should think
of using more VPOs and

696
00:28:16,310 --> 00:28:19,210
batching your drawing, rather
than doing lots of separate

697
00:28:19,210 --> 00:28:21,146
drawing and things like this.

698
00:28:21,146 --> 00:28:24,060
But I think it's going to be
quite difficult, nigh on

699
00:28:24,060 --> 00:28:29,530
impossible, to have a really
granular general profiler when

700
00:28:29,530 --> 00:28:33,725
it comes to GPU use.

701
00:28:33,725 --> 00:28:37,040
But yeah, Firefox has
a built in profiler.

702
00:28:37,040 --> 00:28:40,183
If it's not in the current
release, it's probably in 19

703
00:28:40,183 --> 00:28:41,960
or 20, I forget.

704
00:28:41,960 --> 00:28:44,580
And also for the record,
we have incremental GC

705
00:28:44,580 --> 00:28:47,970
also in 19 or 20.

706
00:28:47,970 --> 00:28:50,460
PAVEL FELDMAN: So before
it gets to Firefox,

707
00:28:50,460 --> 00:28:53,510
we have it in Chrome.

708
00:28:53,510 --> 00:28:58,230
And the way you look at it-- so
there is no GPU profiling.

709
00:28:58,230 --> 00:29:01,240
But there are interesting cases
on the timeline where

710
00:29:01,240 --> 00:29:05,430
you see your CPU time spent
for just JavaScript

711
00:29:05,430 --> 00:29:06,560
[? layer ?] painting.

712
00:29:06,560 --> 00:29:09,440
And it all adds up to some
reasonable amount.

713
00:29:09,440 --> 00:29:11,115
And then there is this
transparent bar.

714
00:29:11,115 --> 00:29:14,550
And you don't know why your
frame has been skipped.

715
00:29:14,550 --> 00:29:19,560
And the reason for that is the
browser was waiting for GPU.

716
00:29:19,560 --> 00:29:23,070
We don't really see that
happening a lot in practice,

717
00:29:23,070 --> 00:29:26,870
on non-heavy 3D apps
whatsoever.

718
00:29:26,870 --> 00:29:30,530
So in most cases, first thing
you check is timeline.

719
00:29:30,530 --> 00:29:32,370
And you're most likely OK.

720
00:29:32,370 --> 00:29:35,950
And the detailed GPU profiling
is still ahead

721
00:29:35,950 --> 00:29:37,133
for Chrome, as well.

722
00:29:37,133 --> 00:29:37,820
CHRIS LORD: Yeah.

723
00:29:37,820 --> 00:29:40,260
It's much better on desktop
than it is on mobile.

724
00:29:40,260 --> 00:29:42,480
And most of my experience is
mobile, so I'm probably going

725
00:29:42,480 --> 00:29:45,680
to be speaking from
that perspective.

726
00:29:45,680 --> 00:29:46,330
You worry less.

727
00:29:46,330 --> 00:29:49,530
I guess everything is
better on desktop.

728
00:29:49,530 --> 00:29:54,620
The state of mobile GPUs, at
least certainly on Android,

729
00:29:54,620 --> 00:29:58,120
although it's getting better,
is like Android-based system

730
00:29:58,120 --> 00:29:59,900
tends to use GPUs more.

731
00:29:59,900 --> 00:30:04,860
Like, drivers have some pretty
awful and incorrect behavior,

732
00:30:04,860 --> 00:30:09,990
and just flat out bugs that will
cause things like this.

733
00:30:09,990 --> 00:30:12,570
You'll have hitches that will
be very hard to trace.

734
00:30:12,570 --> 00:30:16,140
And it will come down to
something like, you've

735
00:30:16,140 --> 00:30:18,270
triggered something
which might do--

736
00:30:18,270 --> 00:30:20,640
like it might update
part of a texture.

737
00:30:20,640 --> 00:30:24,150
And that GPU driver subimage
uploads are

738
00:30:24,150 --> 00:30:24,980
actually just terrible.

739
00:30:24,980 --> 00:30:26,300
And you should never do them.

740
00:30:26,300 --> 00:30:29,200
We try and work around these
things, but I don't know.

741
00:30:29,200 --> 00:30:30,280
It's on mobile it's hard.

742
00:30:30,280 --> 00:30:33,410
But on desktop, it's less
of a concern, I guess.

743
00:30:33,410 --> 00:30:34,700
MATT DELANEY: Also we
have a question from

744
00:30:34,700 --> 00:30:35,980
the audience here.

745
00:30:35,980 --> 00:30:37,030
What's your name?

746
00:30:37,030 --> 00:30:38,485
AUDIENCE: Hi, I'm
DJ Fazzyfist.

747
00:30:38,485 --> 00:30:39,490
No, I'm kidding.

748
00:30:39,490 --> 00:30:39,920
[INAUDIBLE]

749
00:30:39,920 --> 00:30:40,980
from Google.

750
00:30:40,980 --> 00:30:43,670
It's also worth noting that for
those of you daring souls

751
00:30:43,670 --> 00:30:46,490
in here who compile Chromium,
that there is access to the

752
00:30:46,490 --> 00:30:50,450
Skia debugger, which is actually
sort of the hardware

753
00:30:50,450 --> 00:30:51,650
GPU compositor.

754
00:30:51,650 --> 00:30:53,070
It's actually amazing
the insight you can

755
00:30:53,070 --> 00:30:54,040
get from Skia debugger.

756
00:30:54,040 --> 00:30:56,780
You can actually see the GPU
performance for each CSS

757
00:30:56,780 --> 00:30:57,580
element on your page.

758
00:30:57,580 --> 00:31:00,730
You can actually see what your
DOM is doing, and what each

759
00:31:00,730 --> 00:31:03,200
button and how long that's
taking on the GPU.

760
00:31:03,200 --> 00:31:05,940
It's amazing insight if you're
seeing problems in this area,

761
00:31:05,940 --> 00:31:07,870
and definitely worth checking
out if you're willing to

762
00:31:07,870 --> 00:31:08,880
compile Chromium.

763
00:31:08,880 --> 00:31:09,540
AUDIENCE: How do you spell it?

764
00:31:09,540 --> 00:31:10,080
AUDIENCE: Skia?

765
00:31:10,080 --> 00:31:15,800
S-K-I-A. Skia debugger,
check it out.

766
00:31:15,800 --> 00:31:16,511
Hi.

767
00:31:16,511 --> 00:31:19,220
MATT DELANEY: Sounds
pretty good.

768
00:31:19,220 --> 00:31:22,405
PAVEL FELDMAN: Does it already
provide traceability from DOM

769
00:31:22,405 --> 00:31:23,650
and CSS literally?

770
00:31:23,650 --> 00:31:26,040
Because it was bound
to instructions.

771
00:31:26,040 --> 00:31:28,130
And you couldn't really trace
it into particular

772
00:31:28,130 --> 00:31:28,615
[? selector ?]

773
00:31:28,615 --> 00:31:32,035
and/or CSS property.

774
00:31:32,035 --> 00:31:34,380
I don't believe you can now.

775
00:31:34,380 --> 00:31:36,204
AUDIENCE: [INAUDIBLE].

776
00:31:36,204 --> 00:31:38,940
PETE: Mic?

777
00:31:38,940 --> 00:31:40,390
AUDIENCE: Thanks, Pete.

778
00:31:40,390 --> 00:31:42,490
The latest one that I was
playing with had some

779
00:31:42,490 --> 00:31:43,100
abilities there.

780
00:31:43,100 --> 00:31:45,190
Obviously, the tooling needs to
get better across the board

781
00:31:45,190 --> 00:31:48,240
for getting GPU insight for
these sorts of things.

782
00:31:48,240 --> 00:31:51,040
Since kind of the future of web
compositing performance is

783
00:31:51,040 --> 00:31:52,230
on the GPU anyway.

784
00:31:52,230 --> 00:31:54,480
So for those of you who want
to kind of try out and give

785
00:31:54,480 --> 00:31:56,620
feedback for this early stuff,
definitely check out Skia

786
00:31:56,620 --> 00:31:59,100
debugger and kind of get a
chance to chart where these

787
00:31:59,100 --> 00:32:01,290
tools are going in the future.

788
00:32:01,290 --> 00:32:04,060
PAVEL FELDMAN: So the way it
works pretty much, if I

789
00:32:04,060 --> 00:32:06,140
remember it correctly,
is it logs

790
00:32:06,140 --> 00:32:07,210
everything that is happening.

791
00:32:07,210 --> 00:32:08,480
And then it replays it.

792
00:32:08,480 --> 00:32:12,800
And while replaying, you can
assess the performance of the

793
00:32:12,800 --> 00:32:15,430
instructions that were made.

794
00:32:15,430 --> 00:32:16,990
So basic idea.

795
00:32:16,990 --> 00:32:19,500
CHRIS LORD: I think we do
actually, I remember now, on

796
00:32:19,500 --> 00:32:20,490
the [INAUDIBLE]

797
00:32:20,490 --> 00:32:24,760
last year, we have a similar
tool for recording GPU

798
00:32:24,760 --> 00:32:26,080
behavior and then
playing it back.

799
00:32:26,080 --> 00:32:29,550
But I can't tell you
anything about it.

800
00:32:29,550 --> 00:32:31,620
I've just forgotten, and
it's not finished.

801
00:32:31,620 --> 00:32:34,230
So I think that sounds
really cool.

802
00:32:34,230 --> 00:32:37,090
You're definitely well
ahead there.

803
00:32:37,090 --> 00:32:39,070
ROWAN BEENJE: And I think the
Chrome dev tools are just

804
00:32:39,070 --> 00:32:41,170
starting to expose the
amounts of GP memory

805
00:32:41,170 --> 00:32:42,530
used, is that correct?

806
00:32:42,530 --> 00:32:43,450
That's coming up?

807
00:32:43,450 --> 00:32:44,480
PAVEL FELDMAN: Not yet.

808
00:32:44,480 --> 00:32:45,240
ROWAN BEENJE: But it's coming?

809
00:32:45,240 --> 00:32:46,130
PAVEL FELDMAN: It's
coming, yes.

810
00:32:46,130 --> 00:32:47,050
ROWAN BEENJE: Very soon.

811
00:32:47,050 --> 00:32:50,030
PAVEL FELDMAN: So native memory
instrumentation started

812
00:32:50,030 --> 00:32:51,680
with the renderer.

813
00:32:51,680 --> 00:32:56,310
And the GPU for us is outside
of the renderer.

814
00:32:56,310 --> 00:32:57,430
CHRIS LORD: I'm not sure if--

815
00:32:57,430 --> 00:33:00,970
like, we have, if you go to
About Memory in Firefox,

816
00:33:00,970 --> 00:33:02,960
you'll see lots of details
about where your memory's

817
00:33:02,960 --> 00:33:03,980
being used.

818
00:33:03,980 --> 00:33:07,260
I'm not sure if that goes
to GPU memory, though.

819
00:33:07,260 --> 00:33:08,210
That also works--

820
00:33:08,210 --> 00:33:10,110
I think it works, it should
work-- on mobile.

821
00:33:10,110 --> 00:33:13,140

822
00:33:13,140 --> 00:33:13,310
MATT DELANEY: Great.

823
00:33:13,310 --> 00:33:14,510
So that's quite a bit
about the tooling.

824
00:33:14,510 --> 00:33:17,240
So how about we move over to
the next question, which is

825
00:33:17,240 --> 00:33:19,140
related and kind of touched on a
bit in the beginning of this

826
00:33:19,140 --> 00:33:22,860
one, was, how do you guys feel
about frame developers and

827
00:33:22,860 --> 00:33:25,470
their understanding of which
performance metrics they

828
00:33:25,470 --> 00:33:27,895
should actually be looking
at these days?

829
00:33:27,895 --> 00:33:31,360
Say both, of course on a
desktop, but more importantly

830
00:33:31,360 --> 00:33:33,055
mobile, the more constrained
environment.

831
00:33:33,055 --> 00:33:35,260
Should they be looking,
rendering,

832
00:33:35,260 --> 00:33:37,470
compositing, layout?

833
00:33:37,470 --> 00:33:38,720
How should they be used
in the tools?

834
00:33:38,720 --> 00:33:42,230

835
00:33:42,230 --> 00:33:44,570
CHRIS LORD: I guess there
aren't too many.

836
00:33:44,570 --> 00:33:48,600
We've not done as good a job
as we should have, in that

837
00:33:48,600 --> 00:33:51,410
there aren't tools to measure
certain things that you'd

838
00:33:51,410 --> 00:33:52,350
really want to know.

839
00:33:52,350 --> 00:33:56,340
Or at least, the tools are
things like, oh, just use an

840
00:33:56,340 --> 00:34:00,010
HDMI video capture unit and do
frame analysis, which is

841
00:34:00,010 --> 00:34:03,530
obviously not feasible for
most people, I would say.

842
00:34:03,530 --> 00:34:07,400

843
00:34:07,400 --> 00:34:09,620
PAVEL FELDMAN: Can we turn that
to the audience, and may

844
00:34:09,620 --> 00:34:12,940
I ask, how many of you have
experienced issues,

845
00:34:12,940 --> 00:34:16,659
challenges, profiling, fighting
for rendering

846
00:34:16,659 --> 00:34:17,370
performance?

847
00:34:17,370 --> 00:34:18,850
If you could raise your hand.

848
00:34:18,850 --> 00:34:21,719
Rendering performance?

849
00:34:21,719 --> 00:34:22,310
OK.

850
00:34:22,310 --> 00:34:27,040
And how many of you were
using timeline to

851
00:34:27,040 --> 00:34:29,670
capture what's happening?

852
00:34:29,670 --> 00:34:32,409
OK, so it's pretty much
half of [? us. ?]

853
00:34:32,409 --> 00:34:33,969
So that's your answer.

854
00:34:33,969 --> 00:34:39,580
So half of us realize what needs
to be done tooling wise.

855
00:34:39,580 --> 00:34:42,905

856
00:34:42,905 --> 00:34:44,155
AUDIENCE: [INAUDIBLE].

857
00:34:44,155 --> 00:34:48,130

858
00:34:48,130 --> 00:34:51,219
So how would it help me
in a web view iOS?

859
00:34:51,219 --> 00:34:53,770
It's great that we have all
these tools in our browsers,

860
00:34:53,770 --> 00:34:55,830
but a lot of performance
of HTML5 is

861
00:34:55,830 --> 00:34:57,200
in the closed platforms.

862
00:34:57,200 --> 00:35:00,060
So what can we do to get those
closed platforms to get the

863
00:35:00,060 --> 00:35:02,370
cool tools that we're
building?

864
00:35:02,370 --> 00:35:05,810
PAVEL FELDMAN: So those
platforms diverge, especially

865
00:35:05,810 --> 00:35:06,815
on the rendering front.

866
00:35:06,815 --> 00:35:08,820
It is truth.

867
00:35:08,820 --> 00:35:12,090
On the CPU front, though, they
are very much alike.

868
00:35:12,090 --> 00:35:14,940
So you have a good clue on
what's happening in iOS web

869
00:35:14,940 --> 00:35:19,800
view when looking at Chrome,
unless you enable threaded

870
00:35:19,800 --> 00:35:22,160
compositing or something
like that.

871
00:35:22,160 --> 00:35:25,570
And it often gives
you a good clue.

872
00:35:25,570 --> 00:35:28,860
And image decode time will
be proportional.

873
00:35:28,860 --> 00:35:32,730
Because what you're assessing
is basically the CPU and the

874
00:35:32,730 --> 00:35:35,260
architecture of what
you're running on.

875
00:35:35,260 --> 00:35:36,380
So you have some clue.

876
00:35:36,380 --> 00:35:38,450
You have some good
clue on that.

877
00:35:38,450 --> 00:35:41,530
But it is not precise.

878
00:35:41,530 --> 00:35:44,570
SHANE O'SULLIVAN: But also what
you should care about, I

879
00:35:44,570 --> 00:35:48,450
don't think should be what any
one tool gives you, or any one

880
00:35:48,450 --> 00:35:49,240
performance metric--

881
00:35:49,240 --> 00:35:52,220
I mean, performance is
not a goal in itself.

882
00:35:52,220 --> 00:35:55,670
Performance should be there to
get you to increase whatever

883
00:35:55,670 --> 00:35:57,510
metric matters to you.

884
00:35:57,510 --> 00:35:59,780
So for example, in Facebook,
the reason we care so much

885
00:35:59,780 --> 00:36:03,120
about scrolling is that we did
a test where we artificially

886
00:36:03,120 --> 00:36:06,500
introduced for some small
number of people, 20, 30

887
00:36:06,500 --> 00:36:10,110
million or something, where
we said, we'll have your

888
00:36:10,110 --> 00:36:13,650
scrolling framework on Android
and iOS, just artificially.

889
00:36:13,650 --> 00:36:16,100
We know you can do 60
FPS on an iPhone 5.

890
00:36:16,100 --> 00:36:17,290
We will give you 30 FPS.

891
00:36:17,290 --> 00:36:19,080
And engagement collapsed.

892
00:36:19,080 --> 00:36:20,970
You would still get--

893
00:36:20,970 --> 00:36:22,380
we didn't introduce jerking,
we just slowed

894
00:36:22,380 --> 00:36:23,850
down the frame rate.

895
00:36:23,850 --> 00:36:25,130
And engagement dropped.

896
00:36:25,130 --> 00:36:28,280
So we said, OK, therefore,
scrolling matters to

897
00:36:28,280 --> 00:36:28,950
engagement.

898
00:36:28,950 --> 00:36:30,390
And engagement is
what matters.

899
00:36:30,390 --> 00:36:33,360
So if what you care about--

900
00:36:33,360 --> 00:36:34,980
test all the different
things for your app

901
00:36:34,980 --> 00:36:35,960
that actually matter.

902
00:36:35,960 --> 00:36:40,230
If speed, time to interaction
is what's important to you,

903
00:36:40,230 --> 00:36:41,330
emphasize for that.

904
00:36:41,330 --> 00:36:44,500
If scrolling is important to
you, and you do stuff like

905
00:36:44,500 --> 00:36:49,160
newsfeed, or any kind of image
heavy thing, then optimize for

906
00:36:49,160 --> 00:36:50,400
not resizing images.

907
00:36:50,400 --> 00:36:58,900
Optimize for not doing paint
reflows on complex content.

908
00:36:58,900 --> 00:37:01,192
If you really care about
TTI, do server render.

909
00:37:01,192 --> 00:37:02,490
It's faster.

910
00:37:02,490 --> 00:37:05,560
So try out 10 different
things.

911
00:37:05,560 --> 00:37:06,520
I know it's time consuming.

912
00:37:06,520 --> 00:37:09,440
But the metric you should
be looking at is

913
00:37:09,440 --> 00:37:10,640
what matters to you.

914
00:37:10,640 --> 00:37:13,440
Do you care that people look
at 50 photos in an hour?

915
00:37:13,440 --> 00:37:16,960
You're a photo app, fine,
optimize for that.

916
00:37:16,960 --> 00:37:19,360
So yeah, I don't think there's
any one sole [? rebuttal ?]

917
00:37:19,360 --> 00:37:20,226
for this stuff.

918
00:37:20,226 --> 00:37:21,880
PAVEL FELDMAN: So the same
happened to Chrome.

919
00:37:21,880 --> 00:37:23,800
We consider scrolling
very important.

920
00:37:23,800 --> 00:37:29,060
And there is actually a tooling
to detect regressions

921
00:37:29,060 --> 00:37:30,290
on that front.

922
00:37:30,290 --> 00:37:33,770
So there is a telemetry, the
remote control for Chrome.

923
00:37:33,770 --> 00:37:36,250
And the rendering team
is using it in

924
00:37:36,250 --> 00:37:36,930
the following matter.

925
00:37:36,930 --> 00:37:41,470
This tool can connect to remote
devices such as Android

926
00:37:41,470 --> 00:37:44,610
phones and Chrome OS and
desktops, different builds,

927
00:37:44,610 --> 00:37:45,630
different versions of builds.

928
00:37:45,630 --> 00:37:49,290
So it connects to those, runs
regression testing, uses

929
00:37:49,290 --> 00:37:53,250
timeline to get raw data back,
and builds the graphs.

930
00:37:53,250 --> 00:37:57,450
And any degrade in that graph
is a show stopper, and we

931
00:37:57,450 --> 00:37:58,640
change that.

932
00:37:58,640 --> 00:37:59,430
[? Regressions ?]

933
00:37:59,430 --> 00:38:00,600
gets rolled out [? of them. ?]

934
00:38:00,600 --> 00:38:04,070
So the same thing that happens
on the vendor front should be

935
00:38:04,070 --> 00:38:05,060
happening on that app front.

936
00:38:05,060 --> 00:38:06,790
And I'm sure it does.

937
00:38:06,790 --> 00:38:11,220
So the metric is scrolling
matches here.

938
00:38:11,220 --> 00:38:15,070
CHRIS LORD: I think, on a slight
tangent, there are some

939
00:38:15,070 --> 00:38:16,840
practical things that are worth

940
00:38:16,840 --> 00:38:20,520
knowing before you even--

941
00:38:20,520 --> 00:38:21,760
MATT DELANEY: 30 seconds.

942
00:38:21,760 --> 00:38:24,290
CHRIS LORD: While you're
making a site.

943
00:38:24,290 --> 00:38:26,000
You should take these things
into consideration.

944
00:38:26,000 --> 00:38:31,150
So it's worth knowing to some
extent what things cause new

945
00:38:31,150 --> 00:38:33,940
stacking context to be
created, for example.

946
00:38:33,940 --> 00:38:36,860
Because if you create a new
stacking context, likelihood

947
00:38:36,860 --> 00:38:38,880
is you're going to create
a new layer, as well.

948
00:38:38,880 --> 00:38:43,230
Not necessarily, but it's a
reasonable kind of rule of

949
00:38:43,230 --> 00:38:44,900
thumb to go by.

950
00:38:44,900 --> 00:38:47,720
Try and reduce the amount
of stacking context.

951
00:38:47,720 --> 00:38:55,650
Try to reduce the amount of, for
example, if you have text,

952
00:38:55,650 --> 00:38:57,920
not having it on a solid
background means that you're

953
00:38:57,920 --> 00:38:59,970
going to force alpha blending,
and you're going to force that

954
00:38:59,970 --> 00:39:01,650
text to be rendered twice.

955
00:39:01,650 --> 00:39:03,970
First optics or anti-aliasing,
maybe not on mobile.

956
00:39:03,970 --> 00:39:05,450
We'd probably just
use grayscale.

957
00:39:05,450 --> 00:39:08,870
But there are lots of little
things like this.

958
00:39:08,870 --> 00:39:12,970
Like if you're going to have
gradients in your backgrounds,

959
00:39:12,970 --> 00:39:15,770
CSS gradients, don't change
them all the time.

960
00:39:15,770 --> 00:39:19,330
Don't resize them if
you can help it.

961
00:39:19,330 --> 00:39:22,120
Try and avoid fixed
backgrounds.

962
00:39:22,120 --> 00:39:24,900
Because again, you're going to
force the foreground layers to

963
00:39:24,900 --> 00:39:28,460
have an alpha channel and force
blending and so on.

964
00:39:28,460 --> 00:39:30,805
Just sort of small tips that--

965
00:39:30,805 --> 00:39:34,090
MATT DELANEY: Lots of good
strategic advice there.

966
00:39:34,090 --> 00:39:35,400
Move on to the next
one here, sorry.

967
00:39:35,400 --> 00:39:38,030
So we've got a pretty
interesting question, I think,

968
00:39:38,030 --> 00:39:39,840
from James Ford.

969
00:39:39,840 --> 00:39:42,070
Kind of an age old question,
perhaps, but does using SVGs

970
00:39:42,070 --> 00:39:45,150
and font icons for graphics over
GIFs and PINGs have an

971
00:39:45,150 --> 00:39:47,975
impact on the performance
of a web page?

972
00:39:47,975 --> 00:39:50,560
How about more from your actual

973
00:39:50,560 --> 00:39:53,760
experience of using such?

974
00:39:53,760 --> 00:39:58,040
CHRIS LORD: I was going to say
recently, we switched SVG to

975
00:39:58,040 --> 00:40:01,980
rather than going from like a
single node in our display

976
00:40:01,980 --> 00:40:05,520
list to using all of our
display list nodes.

977
00:40:05,520 --> 00:40:12,190
So if you have an SVG that's
got like 1,000 different

978
00:40:12,190 --> 00:40:15,960
render nodes in it, then that
will be represented in our

979
00:40:15,960 --> 00:40:17,130
display list.

980
00:40:17,130 --> 00:40:19,150
And we have open bugs.

981
00:40:19,150 --> 00:40:20,910
This did cause performance
issues.

982
00:40:20,910 --> 00:40:23,060
Because as you scroll through
the page and you expose new

983
00:40:23,060 --> 00:40:27,790
areas of SVG, we have to iterate
that whole list, and

984
00:40:27,790 --> 00:40:30,200
render it and sort it into
layers, decide which bits have

985
00:40:30,200 --> 00:40:33,190
changed and which haven't
and so on.

986
00:40:33,190 --> 00:40:36,820
So yeah, SVGs are
going to be--

987
00:40:36,820 --> 00:40:38,040
you can cache them.

988
00:40:38,040 --> 00:40:40,970
But assuming that you're
using them for a reason

989
00:40:40,970 --> 00:40:41,910
and you're not just--

990
00:40:41,910 --> 00:40:45,980
I mean, if you weren't going
to plan on showing them at

991
00:40:45,980 --> 00:40:48,105
different sizes or a site.

992
00:40:48,105 --> 00:40:51,860

993
00:40:51,860 --> 00:40:53,910
Assuming that you are using
SVG for a reason and you

994
00:40:53,910 --> 00:40:56,930
couldn't have just used a static
image kind of thing,

995
00:40:56,930 --> 00:41:00,010
they are more expensive to use
than just static images.

996
00:41:00,010 --> 00:41:01,380
And the same with
fonts, as well.

997
00:41:01,380 --> 00:41:05,290
Fonts are quite expensive
to render.

998
00:41:05,290 --> 00:41:08,190
So the answer is
yeah, I guess.

999
00:41:08,190 --> 00:41:09,550
They're more expensive.

1000
00:41:09,550 --> 00:41:11,840
AUDIENCE: So maybe one example
that I found recently,

1001
00:41:11,840 --> 00:41:16,680
actually the Apple site uses
SVGs quite well and badly.

1002
00:41:16,680 --> 00:41:19,230
Well in the sense that they
use them everywhere, for

1003
00:41:19,230 --> 00:41:20,890
example for the logo
and all the rest.

1004
00:41:20,890 --> 00:41:23,930
But I think what a lot of people
miss is a complex SVG

1005
00:41:23,930 --> 00:41:29,260
with a lot of paths is actually
very expensive, even

1006
00:41:29,260 --> 00:41:30,570
in network bytes.

1007
00:41:30,570 --> 00:41:34,130
If you look at the complexity of
the SVGs that they use, you

1008
00:41:34,130 --> 00:41:37,610
can get like a 5x improvement if
you just save it as a PNG.

1009
00:41:37,610 --> 00:41:41,180
So it's retina friendly, which
is what Apple wants.

1010
00:41:41,180 --> 00:41:44,450
But it's actually worse off for
like render time of your

1011
00:41:44,450 --> 00:41:46,980
page and network performance.

1012
00:41:46,980 --> 00:41:48,735
CHRIS LORD: Yeah.

1013
00:41:48,735 --> 00:41:51,520
ROWAN BEENJE: Does anyone have
any comparative information

1014
00:41:51,520 --> 00:41:56,160
about icon fonts versus SVG?

1015
00:41:56,160 --> 00:41:57,190
PAVEL FELDMAN: We
need to measure.

1016
00:41:57,190 --> 00:41:59,050
And if we can't measure
it, we need to

1017
00:41:59,050 --> 00:42:00,740
make sure we can measure.

1018
00:42:00,740 --> 00:42:02,700
MATT DELANEY: [INAUDIBLE]

1019
00:42:02,700 --> 00:42:03,950
in the back?

1020
00:42:03,950 --> 00:42:11,030

1021
00:42:11,030 --> 00:42:12,280
Never mind.

1022
00:42:12,280 --> 00:42:17,410

1023
00:42:17,410 --> 00:42:18,660
No experience from
Facebook on this?

1024
00:42:18,660 --> 00:42:21,260

1025
00:42:21,260 --> 00:42:22,530
SHANE O'SULLIVAN: No experience
by me at Facebook

1026
00:42:22,530 --> 00:42:25,780
at the very least, no.

1027
00:42:25,780 --> 00:42:27,050
MATT DELANEY: All right, so
let's move on to the next

1028
00:42:27,050 --> 00:42:27,965
question then.

1029
00:42:27,965 --> 00:42:29,640
A little bit of time
here left.

1030
00:42:29,640 --> 00:42:32,458
How much on the clock?

1031
00:42:32,458 --> 00:42:33,950
15?

1032
00:42:33,950 --> 00:42:40,450
So kind of a bit of a loaded
question, but how can I find

1033
00:42:40,450 --> 00:42:43,970
which CSS rules and properties
are expensive to render on a

1034
00:42:43,970 --> 00:42:45,370
particular page?

1035
00:42:45,370 --> 00:42:49,920
Is a next question, a little
bit of clarification.

1036
00:42:49,920 --> 00:42:51,110
PAVEL FELDMAN: We are
working on that.

1037
00:42:51,110 --> 00:42:52,960
But it's a hard one.

1038
00:42:52,960 --> 00:42:56,910
You need to trace it all the way
from the CSS property to

1039
00:42:56,910 --> 00:43:00,290
the GL instruction or paint
instruction, Skia instruction.

1040
00:43:00,290 --> 00:43:02,810
And it's a long way to go.

1041
00:43:02,810 --> 00:43:05,250
There is a permanent solution,
though, that we've introduced

1042
00:43:05,250 --> 00:43:07,670
recently as an experiment.

1043
00:43:07,670 --> 00:43:11,550
We can now put browser into the
continuous repaint mode,

1044
00:43:11,550 --> 00:43:14,670
where it continuously repaints,
even if it doesn't

1045
00:43:14,670 --> 00:43:18,530
need to, and it shows you the
frame rate it can do it at.

1046
00:43:18,530 --> 00:43:23,380
And if you're not touching a
page, you can see that OK,

1047
00:43:23,380 --> 00:43:25,590
where it says number
of milliseconds,

1048
00:43:25,590 --> 00:43:26,990
it's paints per frame.

1049
00:43:26,990 --> 00:43:29,020
So it says, 3 milliseconds
per frame.

1050
00:43:29,020 --> 00:43:29,920
That's a good frame.

1051
00:43:29,920 --> 00:43:32,380
You'll achieve 60
FPS with that.

1052
00:43:32,380 --> 00:43:37,530
If it shows you 60, or 100
milliseconds, then you can go

1053
00:43:37,530 --> 00:43:38,630
and bisect your DOM.

1054
00:43:38,630 --> 00:43:40,930
So that's the best we can
offer at the moment.

1055
00:43:40,930 --> 00:43:43,710
You go through DOM,
you hide things.

1056
00:43:43,710 --> 00:43:45,530
It toggles visibility
to [INAUDIBLE].

1057
00:43:45,530 --> 00:43:47,620
And the number of milliseconds
reduce.

1058
00:43:47,620 --> 00:43:51,090
And then you figure out what
is the part that was

1059
00:43:51,090 --> 00:43:54,420
statically positioned, or had
a complex background, or had

1060
00:43:54,420 --> 00:43:57,340
some gradient whatsoever.

1061
00:43:57,340 --> 00:43:59,210
It's a manual process.

1062
00:43:59,210 --> 00:44:02,715
But it is already way
better than nothing.

1063
00:44:02,715 --> 00:44:06,170
SHANE O'SULLIVAN: Will this help
in the case where you're

1064
00:44:06,170 --> 00:44:08,520
showing and hiding things, but
let's say I modify something

1065
00:44:08,520 --> 00:44:11,140
that will trigger both a
repaint and a reflow.

1066
00:44:11,140 --> 00:44:14,400
Does this capture it
in that second?

1067
00:44:14,400 --> 00:44:16,970
PAVEL FELDMAN: So this one
is only about paint.

1068
00:44:16,970 --> 00:44:19,040
And paint meaning layout
does not change.

1069
00:44:19,040 --> 00:44:20,330
DOM does not change.

1070
00:44:20,330 --> 00:44:22,960
So it's only about CSS
and DOM that you have

1071
00:44:22,960 --> 00:44:25,190
presented on the screen.

1072
00:44:25,190 --> 00:44:26,720
For the rest of the
information,

1073
00:44:26,720 --> 00:44:29,030
you go to the timeline.

1074
00:44:29,030 --> 00:44:33,310
There are similar techniques
on figuring out the recalc

1075
00:44:33,310 --> 00:44:35,590
style or layout performance.

1076
00:44:35,590 --> 00:44:38,170
They often end up
with bisecting,

1077
00:44:38,170 --> 00:44:39,700
unfortunately, as well.

1078
00:44:39,700 --> 00:44:41,110
And we're working on
improving that.

1079
00:44:41,110 --> 00:44:43,792

1080
00:44:43,792 --> 00:44:46,830
SHANE O'SULLIVAN: Anything cool
coming up in Firefox?

1081
00:44:46,830 --> 00:44:49,460
CHRIS LORD: Not much
to add, really.

1082
00:44:49,460 --> 00:44:55,040
On mobile, I guess, it's worth
considering that certain pages

1083
00:44:55,040 --> 00:44:58,470
and complex pages, and on
certain mobile devices, it's

1084
00:44:58,470 --> 00:45:02,410
really not feasible to expect
the page to render very

1085
00:45:02,410 --> 00:45:07,310
quickly, as in within a
reasonable 60 hertz or 30

1086
00:45:07,310 --> 00:45:09,080
hertz time frame.

1087
00:45:09,080 --> 00:45:12,240
But we have asynchronous
compositing to counter that.

1088
00:45:12,240 --> 00:45:16,460
And what your goal then really
is to kind of do your work at

1089
00:45:16,460 --> 00:45:20,230
clever times, and partition it
in clever ways so that you

1090
00:45:20,230 --> 00:45:23,620
don't interrupt the asynchronous
compositing at

1091
00:45:23,620 --> 00:45:25,630
inopportune times,
or for too long.

1092
00:45:25,630 --> 00:45:31,318

1093
00:45:31,318 --> 00:45:32,690
MATT DELANEY: We're on to
the next question here.

1094
00:45:32,690 --> 00:45:36,930
So this is perhaps a little
bit redundant, but it's

1095
00:45:36,930 --> 00:45:38,640
interesting to get the
perspective real quick from

1096
00:45:38,640 --> 00:45:41,240
both the Chrome and
Firefox person.

1097
00:45:41,240 --> 00:45:45,430
So we use translateZ(0) to
trigger hardware rendering, as

1098
00:45:45,430 --> 00:45:46,560
people think.

1099
00:45:46,560 --> 00:45:48,350
Should we have an API to
explicitly do this?

1100
00:45:48,350 --> 00:45:51,670
So this is obviously
a bit tough.

1101
00:45:51,670 --> 00:45:53,800
And I think we can get some
audience input to this.

1102
00:45:53,800 --> 00:45:57,930
But should there be, perhaps in
general, any feedback from

1103
00:45:57,930 --> 00:46:03,680
the app side to get a little
bit of hopeful kick into

1104
00:46:03,680 --> 00:46:04,460
acceleration?

1105
00:46:04,460 --> 00:46:06,050
Because if people are using
this, and they're finding it

1106
00:46:06,050 --> 00:46:10,280
to good effect, is it something
that maybe we want

1107
00:46:10,280 --> 00:46:12,090
to make more real?

1108
00:46:12,090 --> 00:46:14,840
PAVEL FELDMAN: So I think Paul
and Alex have already covered

1109
00:46:14,840 --> 00:46:18,280
this one from the platform
perspective.

1110
00:46:18,280 --> 00:46:20,790
When you were talking to GC,
many things applied to this

1111
00:46:20,790 --> 00:46:22,040
thing as well.

1112
00:46:22,040 --> 00:46:24,150

1113
00:46:24,150 --> 00:46:24,510
CHRIS LORD: Yeah.

1114
00:46:24,510 --> 00:46:28,730
This has come up a few times,
really, like do we want apps

1115
00:46:28,730 --> 00:46:31,080
to be able to hint to
GC when to collect?

1116
00:46:31,080 --> 00:46:33,890
And do we want--

1117
00:46:33,890 --> 00:46:38,900
it's like every bit of control
that you add is kind of--

1118
00:46:38,900 --> 00:46:41,060
MATT DELANEY: From your work
on Android, have you found

1119
00:46:41,060 --> 00:46:42,580
times where it would've been
more useful for the app

1120
00:46:42,580 --> 00:46:46,440
developer to give you a hint
that they need that?

1121
00:46:46,440 --> 00:46:49,370
CHRIS LORD: Not really,
I guess.

1122
00:46:49,370 --> 00:46:51,770
I think really, we should
just be cleverer

1123
00:46:51,770 --> 00:46:53,680
about doing these things.

1124
00:46:53,680 --> 00:46:56,680
I think if you put that kind of
control into users' hands,

1125
00:46:56,680 --> 00:46:59,670
things are going to change too
much pretty quickly, to the

1126
00:46:59,670 --> 00:47:01,220
point where it would
just force bad

1127
00:47:01,220 --> 00:47:02,560
behavior in future versions.

1128
00:47:02,560 --> 00:47:06,390

1129
00:47:06,390 --> 00:47:07,820
SHANE O'SULLIVAN: From the point
of view of people who

1130
00:47:07,820 --> 00:47:11,430
write apps, yes, it
would be lovely.

1131
00:47:11,430 --> 00:47:13,620
I don't know if it's
feasible or not.

1132
00:47:13,620 --> 00:47:16,830
It's just that on the web, as
everybody knows, one of the

1133
00:47:16,830 --> 00:47:19,110
reasons we're sitting here right
now is that performance

1134
00:47:19,110 --> 00:47:21,060
is a problem.

1135
00:47:21,060 --> 00:47:24,340
And on some of the platforms,
you do have the option of

1136
00:47:24,340 --> 00:47:28,360
dropping down to a lower level
if you need to, and if you

1137
00:47:28,360 --> 00:47:29,600
have people who are
sufficiently good

1138
00:47:29,600 --> 00:47:31,680
enough to do so.

1139
00:47:31,680 --> 00:47:34,510
And I don't know if that's
feasible on the web.

1140
00:47:34,510 --> 00:47:36,020
It would be nice if it was.

1141
00:47:36,020 --> 00:47:37,590
I admit, things change
all the time.

1142
00:47:37,590 --> 00:47:39,680
We're constantly updating our
browsers, or even updating

1143
00:47:39,680 --> 00:47:40,790
them in the background now.

1144
00:47:40,790 --> 00:47:41,990
So things do change
all the time.

1145
00:47:41,990 --> 00:47:45,620
And even on iOS, things
change once a year.

1146
00:47:45,620 --> 00:47:48,460
So yes, it would probably
break everything.

1147
00:47:48,460 --> 00:47:56,630
But when you try to do smart
things in general, often

1148
00:47:56,630 --> 00:47:59,530
you're going to be missing
an edge case.

1149
00:47:59,530 --> 00:48:02,940
And an edge case could be 25%
of all implementations.

1150
00:48:02,940 --> 00:48:04,310
So I don't know.

1151
00:48:04,310 --> 00:48:06,510
If there was a way to drop down
lower and just say look,

1152
00:48:06,510 --> 00:48:09,610
I know what I'm doing, trust
me, it would be great.

1153
00:48:09,610 --> 00:48:12,930
Like I said, you can do it
on native platforms.

1154
00:48:12,930 --> 00:48:15,360
CHRIS LORD: I guess you've
got Canvas and WebGL.

1155
00:48:15,360 --> 00:48:17,854
You can do it like that.

1156
00:48:17,854 --> 00:48:19,104
SHANE O'SULLIVAN: True.

1157
00:48:19,104 --> 00:48:21,710

1158
00:48:21,710 --> 00:48:22,860
MATT DELANEY: Is there
maybe time for one

1159
00:48:22,860 --> 00:48:25,040
more question here?

1160
00:48:25,040 --> 00:48:29,220
So the question from Christina
Auckland, from Hampshire, is

1161
00:48:29,220 --> 00:48:31,840
there an overhead to using
media queries, especially

1162
00:48:31,840 --> 00:48:33,800
bubbling media queries in
your experience, guys?

1163
00:48:33,800 --> 00:48:37,090

1164
00:48:37,090 --> 00:48:39,130
PAVEL FELDMAN: I don't know.

1165
00:48:39,130 --> 00:48:40,700
CHRIS LORD: No idea.

1166
00:48:40,700 --> 00:48:42,500
SHANE O'SULLIVAN: Not a clue.

1167
00:48:42,500 --> 00:48:43,750
MATT DELANEY: Then one
more question.

1168
00:48:43,750 --> 00:48:48,560

1169
00:48:48,560 --> 00:48:49,610
Oh man.

1170
00:48:49,610 --> 00:48:50,860
Nope.

1171
00:48:50,860 --> 00:48:52,690

1172
00:48:52,690 --> 00:48:55,430
We talked about this question
for about five hours last

1173
00:48:55,430 --> 00:48:59,130
night, off and on, like
beating a dead horse.

1174
00:48:59,130 --> 00:49:02,800
Would it be possible to
accelerate reflows, hardware

1175
00:49:02,800 --> 00:49:03,720
accelerate?

1176
00:49:03,720 --> 00:49:06,470
So I think this question's a
bit confused into what it's

1177
00:49:06,470 --> 00:49:07,870
asking, perhaps.

1178
00:49:07,870 --> 00:49:09,760
But it did bring up some
interesting things last night.

1179
00:49:09,760 --> 00:49:12,820
So give you a moment to just
talk about what reflows are,

1180
00:49:12,820 --> 00:49:16,990
perhaps from you guys, and how
that may possibly be hardware

1181
00:49:16,990 --> 00:49:17,990
accelerated.

1182
00:49:17,990 --> 00:49:19,470
PAVEL FELDMAN: I think Google
is definitely hiring.

1183
00:49:19,470 --> 00:49:22,350
So if someone has some bright
ideas on that, they'd be

1184
00:49:22,350 --> 00:49:23,656
definitely interested.

1185
00:49:23,656 --> 00:49:26,230
CHRIS LORD: Ditto.

1186
00:49:26,230 --> 00:49:27,940
I guess, yeah, I think
the question

1187
00:49:27,940 --> 00:49:29,240
might be slightly confused.

1188
00:49:29,240 --> 00:49:33,630
So to kind of go to semi-fast
principles, I'm going to

1189
00:49:33,630 --> 00:49:37,885
assume that DOM tree is
something that we all know.

1190
00:49:37,885 --> 00:49:40,330
But browsers tend to, after you
get a DOM tree, it will

1191
00:49:40,330 --> 00:49:42,530
get passed into a frame tree,
which is a better

1192
00:49:42,530 --> 00:49:45,340
representation of how
it will get drawn.

1193
00:49:45,340 --> 00:49:48,310
And then the frame tree will get
processed, where it will

1194
00:49:48,310 --> 00:49:51,080
calculate where the position
and size of things are.

1195
00:49:51,080 --> 00:49:53,900
And that bit is the reflow.

1196
00:49:53,900 --> 00:49:56,930
So when you change something
that causes a size to change,

1197
00:49:56,930 --> 00:49:58,730
then reflow needs to happen.

1198
00:49:58,730 --> 00:50:00,960
Because the size of certain
elements will be dependent on

1199
00:50:00,960 --> 00:50:02,080
the other elements.

1200
00:50:02,080 --> 00:50:03,770
I say elements, that's
not quite true.

1201
00:50:03,770 --> 00:50:06,590
Because we're in the
frame tree now, but

1202
00:50:06,590 --> 00:50:08,540
for the most part.

1203
00:50:08,540 --> 00:50:12,070
So that's not something
you could put on--

1204
00:50:12,070 --> 00:50:13,900
I mean, you could put it
on the GPU, I guess.

1205
00:50:13,900 --> 00:50:16,220
But it'd be pretty pointless.

1206
00:50:16,220 --> 00:50:17,400
All of that is in
system memory.

1207
00:50:17,400 --> 00:50:20,740
So you'd be shoving that over
to GP memory, and writing a

1208
00:50:20,740 --> 00:50:25,430
really complex set of shaders,
I guess, to work on it.

1209
00:50:25,430 --> 00:50:27,820
And then shovel it back.

1210
00:50:27,820 --> 00:50:29,962
Basically, the answer is no.

1211
00:50:29,962 --> 00:50:34,040
But maybe there are some other
things that we're not

1212
00:50:34,040 --> 00:50:36,470
accelerating right now that we
could, which might be an

1213
00:50:36,470 --> 00:50:37,440
interesting question.

1214
00:50:37,440 --> 00:50:42,840
So from the frame tree, Firefox,
or Gecko rather, will

1215
00:50:42,840 --> 00:50:45,080
make a display list which
represents how it

1216
00:50:45,080 --> 00:50:46,160
would draw the page.

1217
00:50:46,160 --> 00:50:48,470
And then it processes the
display list to create the

1218
00:50:48,470 --> 00:50:49,200
layer tree.

1219
00:50:49,200 --> 00:50:52,580
And I think a similar process
happens in WebKit, possibly

1220
00:50:52,580 --> 00:50:55,030
minus display list or depending
on what fork you're

1221
00:50:55,030 --> 00:51:00,020
using, judging from the
conversation last night.

1222
00:51:00,020 --> 00:51:03,110
Are there other things that
we could accelerate, maybe

1223
00:51:03,110 --> 00:51:05,870
between those things or like
during that thing?

1224
00:51:05,870 --> 00:51:09,390
So for Firefox, most of
the rendering will

1225
00:51:09,390 --> 00:51:11,050
happen on your CPU.

1226
00:51:11,050 --> 00:51:14,700
Certain things will be hardware
accelerated, like

1227
00:51:14,700 --> 00:51:15,660
drawing a big image.

1228
00:51:15,660 --> 00:51:18,390
That might end up being uploaded
to the GPU and

1229
00:51:18,390 --> 00:51:20,740
scaled, for example,
in the GPU.

1230
00:51:20,740 --> 00:51:23,340
Or transforms happen on GPU.

1231
00:51:23,340 --> 00:51:24,790
Blending happens on the GPU.

1232
00:51:24,790 --> 00:51:26,350
But maybe there are other
things that could

1233
00:51:26,350 --> 00:51:27,360
happen on the GPU.

1234
00:51:27,360 --> 00:51:30,640
Like we don't draw gradients
on the GPU at the moment.

1235
00:51:30,640 --> 00:51:32,540
And gradients are a huge hit.

1236
00:51:32,540 --> 00:51:34,460
That's something we
could do, maybe.

1237
00:51:34,460 --> 00:51:36,020
And other elements as well.

1238
00:51:36,020 --> 00:51:39,750
There might be other element
types that would be able to

1239
00:51:39,750 --> 00:51:43,960
take advantage of hardware
accelerated rendering.

1240
00:51:43,960 --> 00:51:46,360
PAVEL FELDMAN: Another hint is
that if you're experiencing

1241
00:51:46,360 --> 00:51:50,060
really slowly, most likely you
are doing a total reflow.

1242
00:51:50,060 --> 00:51:53,110
And in WebKit, you are doing
total reflow if your layout

1243
00:51:53,110 --> 00:51:55,250
root is root of the document.

1244
00:51:55,250 --> 00:51:58,990
Which means in this very
message, you mutated two ports

1245
00:51:58,990 --> 00:52:01,720
of non-intersecting DOMs.

1246
00:52:01,720 --> 00:52:05,010
And they ended up being
the root layout.

1247
00:52:05,010 --> 00:52:09,530
So you figure out what
your layout root is.

1248
00:52:09,530 --> 00:52:12,580
There are simple rules to follow
to make your element

1249
00:52:12,580 --> 00:52:13,150
layout root.

1250
00:52:13,150 --> 00:52:15,140
And make sure you
don't screw it.

1251
00:52:15,140 --> 00:52:21,500

1252
00:52:21,500 --> 00:52:23,440
CHRIS LORD: I think we've kind
of mentioned this already.

1253
00:52:23,440 --> 00:52:28,580
But just in case, a lot of the
optimizations that happen on

1254
00:52:28,580 --> 00:52:33,110
the kind of rendering process
are to do with delaying tasks

1255
00:52:33,110 --> 00:52:34,170
and splitting them up.

1256
00:52:34,170 --> 00:52:39,860
So things like, if you can make
everything like a set

1257
00:52:39,860 --> 00:52:43,792
width and height, and never move
it, that would be great.

1258
00:52:43,792 --> 00:52:48,710
But if you do have need to
change something, like if you

1259
00:52:48,710 --> 00:52:52,800
change the width of something,
that is going to trigger a

1260
00:52:52,800 --> 00:52:55,310
reflow probably at some point.

1261
00:52:55,310 --> 00:52:58,900
But that point could be any time
between the time you do

1262
00:52:58,900 --> 00:53:00,410
it and the time that
the frame comes.

1263
00:53:00,410 --> 00:53:02,210
And stuff might happen
in between.

1264
00:53:02,210 --> 00:53:06,370
And if possible, we'll coalesce
these reflows.

1265
00:53:06,370 --> 00:53:08,540
On the other hand, if you change
a width, and then you

1266
00:53:08,540 --> 00:53:11,570
immediately read back the
width of an element that

1267
00:53:11,570 --> 00:53:14,570
depended on that width, you're
forcing that reflow to happen

1268
00:53:14,570 --> 00:53:15,740
immediately.

1269
00:53:15,740 --> 00:53:18,980
And then if you change something
after that, then

1270
00:53:18,980 --> 00:53:21,410
you've got a double
reflow situation.

1271
00:53:21,410 --> 00:53:26,240
So I guess an attempt to maybe
batch stuff is a sort of

1272
00:53:26,240 --> 00:53:27,922
general tip to avoid that.

1273
00:53:27,922 --> 00:53:32,090
PAVEL FELDMAN: Yeah, so to add
to that, we've often seen five

1274
00:53:32,090 --> 00:53:34,660
total reflows happen
within a frame.

1275
00:53:34,660 --> 00:53:36,500
So it's not that the
reflow is slow.

1276
00:53:36,500 --> 00:53:38,070
It's that it's continuously
happening

1277
00:53:38,070 --> 00:53:39,860
within the same message.

1278
00:53:39,860 --> 00:53:42,410
And we have good
tools for that.

1279
00:53:42,410 --> 00:53:45,320
We will show you all the
layouts, and we will show you

1280
00:53:45,320 --> 00:53:48,000
[INAUDIBLE] stacks that
invalidated re-layout, and

1281
00:53:48,000 --> 00:53:49,120
that forced it.

1282
00:53:49,120 --> 00:53:51,560
And you can see a continuous
invocation of

1283
00:53:51,560 --> 00:53:52,700
like five of them.

1284
00:53:52,700 --> 00:53:56,170
And you cut it into a single
one, and all of a sudden your

1285
00:53:56,170 --> 00:54:00,015
performance is OK again.

1286
00:54:00,015 --> 00:54:03,010
MATT DELANEY: So actually, real
final question here from

1287
00:54:03,010 --> 00:54:06,970
the audience is from Paul
Kinlan, he says, yes, does

1288
00:54:06,970 --> 00:54:09,560
scrolling performance in
client-side performance affect

1289
00:54:09,560 --> 00:54:11,620
the time on the site, balance
rate, et cetera?

1290
00:54:11,620 --> 00:54:12,940
And Shane was actually talking
about something pretty

1291
00:54:12,940 --> 00:54:16,120
interesting last night about
what he's seen from Facebook's

1292
00:54:16,120 --> 00:54:16,930
perspective.

1293
00:54:16,930 --> 00:54:19,000
SHANE O'SULLIVAN: Yeah, I kind
of mentioned it a bit earlier.

1294
00:54:19,000 --> 00:54:20,990
But yeah, it absolutely does.

1295
00:54:20,990 --> 00:54:24,910
What we find on Facebook is that
regardless of what you

1296
00:54:24,910 --> 00:54:27,260
do, people have kind of assigned
a certain amount of

1297
00:54:27,260 --> 00:54:29,830
time every day to spend
on the site.

1298
00:54:29,830 --> 00:54:35,740
And the more things that you can
get them to do within say,

1299
00:54:35,740 --> 00:54:37,330
they only spend 20
minutes a day.

1300
00:54:37,330 --> 00:54:41,580
And if you can show them twice
as many pages during that day,

1301
00:54:41,580 --> 00:54:43,510
then it will do twice
as many things.

1302
00:54:43,510 --> 00:54:48,560
The same goes for if people tend
to scroll down, we found

1303
00:54:48,560 --> 00:54:50,650
that when they scroll more,
they see more stories.

1304
00:54:50,650 --> 00:54:53,420
They click like more, they
comment on more things.

1305
00:54:53,420 --> 00:54:55,010
They see people's faces,
and the site

1306
00:54:55,010 --> 00:54:56,920
sends them more messages.

1307
00:54:56,920 --> 00:55:02,440
And when we did add friction
to scrolling, when we added

1308
00:55:02,440 --> 00:55:05,910
varying scroll rates, or when
we added consistently slow

1309
00:55:05,910 --> 00:55:09,505
scroll rates, as soon as we made
anything non-optimal when

1310
00:55:09,505 --> 00:55:13,200
it comes to scrolling, then
people often might stay on the

1311
00:55:13,200 --> 00:55:14,020
site as long.

1312
00:55:14,020 --> 00:55:15,330
So it didn't really affect
bounce rates.

1313
00:55:15,330 --> 00:55:19,910
But they would do far fewer
things, which is why we spend

1314
00:55:19,910 --> 00:55:23,100
so much time obsessing
about scroll rates.

1315
00:55:23,100 --> 00:55:27,590
So scroll rates directly affect
user engagement on

1316
00:55:27,590 --> 00:55:31,330
native, on wave,
on everything.

1317
00:55:31,330 --> 00:55:34,800
Which means our basic site,
which only serves HTML and

1318
00:55:34,800 --> 00:55:37,230
goes on to Nokia phones, gets
fantastic engagement if you

1319
00:55:37,230 --> 00:55:39,280
put it on an iPhone.

1320
00:55:39,280 --> 00:55:40,440
It's extremely fast.

1321
00:55:40,440 --> 00:55:41,050
It's tiny.

1322
00:55:41,050 --> 00:55:41,980
It looks ugly.

1323
00:55:41,980 --> 00:55:44,950
And people engage with it
really, really quickly.

1324
00:55:44,950 --> 00:55:45,640
And you know what?

1325
00:55:45,640 --> 00:55:47,760
It scrolls at 60 frames
per second.

1326
00:55:47,760 --> 00:55:49,010
Because there's no JavaScript.

1327
00:55:49,010 --> 00:55:51,860

1328
00:55:51,860 --> 00:55:54,895
Yeah, who knew?

1329
00:55:54,895 --> 00:55:56,145
MATT DELANEY: Any
last thoughts?

1330
00:55:56,145 --> 00:55:59,420

1331
00:55:59,420 --> 00:56:01,140
CHRIS LORD: Not really.

1332
00:56:01,140 --> 00:56:04,000
Maybe it'd be nice, like
we're talking a lot

1333
00:56:04,000 --> 00:56:04,830
about scrolling here.

1334
00:56:04,830 --> 00:56:06,710
It's obviously very important.

1335
00:56:06,710 --> 00:56:10,470
And scroll behavior differs
between basically every mobile

1336
00:56:10,470 --> 00:56:14,210
browser in quite big ways.

1337
00:56:14,210 --> 00:56:16,530
Maybe this is something we
should be, or should have been

1338
00:56:16,530 --> 00:56:20,350
collaborating on before.

1339
00:56:20,350 --> 00:56:22,920
Maybe there should be an API
for that, like some kind of

1340
00:56:22,920 --> 00:56:25,090
meta tag or something.

1341
00:56:25,090 --> 00:56:27,540
SHANE O'SULLIVAN: I heard Chrome
team were going to

1342
00:56:27,540 --> 00:56:31,240
start looking at scroll
performance as something to

1343
00:56:31,240 --> 00:56:33,550
instrument, or something
like that.

1344
00:56:33,550 --> 00:56:35,890
PAVEL FELDMAN: Yeah, so that
telemeter that I was talking

1345
00:56:35,890 --> 00:56:38,730
about is the regression testing
for the scrolling

1346
00:56:38,730 --> 00:56:39,220
performance.

1347
00:56:39,220 --> 00:56:42,720
And there is a huge scrolling
effort that, among other

1348
00:56:42,720 --> 00:56:47,850
things, moved the painting to
the impulse side, including

1349
00:56:47,850 --> 00:56:49,880
the image decode and resize.

1350
00:56:49,880 --> 00:56:53,480
And that's already available
on Chrome for Android now.

1351
00:56:53,480 --> 00:56:56,320
Yeah, it's already enabled
for Chrome for Android.

1352
00:56:56,320 --> 00:56:58,980
It's in the About Flags
on the desktop Chrome.

1353
00:56:58,980 --> 00:57:01,940
So you can take a
look at that.

1354
00:57:01,940 --> 00:57:04,040
CHRIS LORD: Sorry, and
one last thing I just

1355
00:57:04,040 --> 00:57:05,160
remembered as well.

1356
00:57:05,160 --> 00:57:09,850
In the Firefox built in profile,
we have a mode that

1357
00:57:09,850 --> 00:57:13,350
we call junk mode, the
like ticker box.

1358
00:57:13,350 --> 00:57:15,900
And then when you start the
profiler and you do some

1359
00:57:15,900 --> 00:57:19,180
stuff, and you stop it, it
will basically show you--

1360
00:57:19,180 --> 00:57:21,570
it will highlight on
the profile exactly

1361
00:57:21,570 --> 00:57:23,420
any hitches in panning.

1362
00:57:23,420 --> 00:57:27,090
So any frame that took longer
than 16 milliseconds or

1363
00:57:27,090 --> 00:57:28,300
whatever to draw.

1364
00:57:28,300 --> 00:57:31,440
You can drill down into just the
operations that were going

1365
00:57:31,440 --> 00:57:32,790
on during that frame.

1366
00:57:32,790 --> 00:57:36,930
And I think, no yeah,
I'm sure, that

1367
00:57:36,930 --> 00:57:41,550
profiler works over ADB.

1368
00:57:41,550 --> 00:57:44,660
So you can run it on your phone
and profile it on the

1369
00:57:44,660 --> 00:57:46,470
desktop, which is
pretty handy.

1370
00:57:46,470 --> 00:57:48,370
So just letting you know.

1371
00:57:48,370 --> 00:57:51,440

1372
00:57:51,440 --> 00:57:51,870
MATT DELANEY: So thanks.

1373
00:57:51,870 --> 00:57:53,300
That was Performance Channel.

1374
00:57:53,300 --> 00:57:58,278

1
00:00:00,000 --> 00:00:04,840

2
00:00:04,840 --> 00:00:07,630
PETE LEPAGE: I'm going to do a
quick intro of our panelists,

3
00:00:07,630 --> 00:00:09,550
and then I will hand it over.

4
00:00:09,550 --> 00:00:10,800
Sitting right here
we have Mairead--

5
00:00:10,800 --> 00:00:13,360

6
00:00:13,360 --> 00:00:14,240
MAIREAD BUCHAN: Buchan.

7
00:00:14,240 --> 00:00:15,050
PETE LEPAGE: Buchan.

8
00:00:15,050 --> 00:00:18,330
So I've messed her name up
probably five times already,

9
00:00:18,330 --> 00:00:21,380
and I've known her for
about four minutes.

10
00:00:21,380 --> 00:00:23,620
So I apologize.

11
00:00:23,620 --> 00:00:25,120
Boris Smus from Google.

12
00:00:25,120 --> 00:00:30,520
We've got Francois Daoust, and
then Matt Caruana, who is

13
00:00:30,520 --> 00:00:32,259
going to come and do
our first intro.

14
00:00:32,259 --> 00:00:46,899

15
00:00:46,899 --> 00:00:49,060
MATT CARUANA GALIZIA: So I'm
going to start by talking

16
00:00:49,060 --> 00:00:51,760
about something really simple.

17
00:00:51,760 --> 00:00:54,430
It's just text input, which is
probably one of the most

18
00:00:54,430 --> 00:01:00,640
fundamental kinds of
input on the web.

19
00:01:00,640 --> 00:01:03,030
I just think that there are a
lot of lessons to be learned

20
00:01:03,030 --> 00:01:07,220
here because obviously, we've
been using this kind of input

21
00:01:07,220 --> 00:01:09,390
for a long time, longer than
we've had touch or

22
00:01:09,390 --> 00:01:10,760
anything like that.

23
00:01:10,760 --> 00:01:15,820
So we've gone quite far toward
standardizing it.

24
00:01:15,820 --> 00:01:18,900
And in the beginning, there
were really only low-level

25
00:01:18,900 --> 00:01:23,690
events like keydown, keypress,
keyup, that are very tied to

26
00:01:23,690 --> 00:01:25,090
the hardware.

27
00:01:25,090 --> 00:01:28,340
In a way, because of that,
they're really good.

28
00:01:28,340 --> 00:01:31,720
They allow us to attach special
functionality to key

29
00:01:31,720 --> 00:01:36,700
combinations in web apps that
should support where users

30
00:01:36,700 --> 00:01:38,590
need to be able to do
things quickly.

31
00:01:38,590 --> 00:01:44,320
The problem is that they're not
really suited to form- and

32
00:01:44,320 --> 00:01:45,690
text-based inputs.

33
00:01:45,690 --> 00:01:49,230
They're too hardware specific.

34
00:01:49,230 --> 00:01:52,870
For a start, they have a lot of
problems, for example, with

35
00:01:52,870 --> 00:01:55,630
non-Latin keyboards.

36
00:01:55,630 --> 00:01:58,570
Like the Chinese keyboard,
pressing the character key for

37
00:01:58,570 --> 00:02:02,990
man, for example, results in
a keydown event with one

38
00:02:02,990 --> 00:02:06,760
character, which is an accented
a and the keyup event

39
00:02:06,760 --> 00:02:08,380
with the actual character
itself.

40
00:02:08,380 --> 00:02:11,230
So it's difficult to
tell what the user

41
00:02:11,230 --> 00:02:14,520
actually wanted to input.

42
00:02:14,520 --> 00:02:17,200
Key events aren't just really
difficult to use.

43
00:02:17,200 --> 00:02:20,660
There are many kinds of text
input that they just aren't

44
00:02:20,660 --> 00:02:22,260
designed to handle.

45
00:02:22,260 --> 00:02:26,670
And really, it's a mistake
to assume that text input

46
00:02:26,670 --> 00:02:29,100
involves a keyboard.

47
00:02:29,100 --> 00:02:32,380
Speech dictation and drag
and drop can also be

48
00:02:32,380 --> 00:02:35,440
used to input text.

49
00:02:35,440 --> 00:02:39,210
The keyboard on Android has a
microphone button on the side,

50
00:02:39,210 --> 00:02:41,650
for example, which you can just
press to dictate text

51
00:02:41,650 --> 00:02:42,900
into an input fields.

52
00:02:42,900 --> 00:02:45,720

53
00:02:45,720 --> 00:02:49,180
Thankfully, no one has attempted
to write a speech

54
00:02:49,180 --> 00:02:52,100
dictation to keypress
event polyfill.

55
00:02:52,100 --> 00:02:54,760
Instead, there's another event
that we can use, which is the

56
00:02:54,760 --> 00:02:57,210
input events.

57
00:02:57,210 --> 00:03:00,230
It's been recently standardized
in HTML5, and

58
00:03:00,230 --> 00:03:02,190
it's now supported by
all major browsers.

59
00:03:02,190 --> 00:03:05,405

60
00:03:05,405 --> 00:03:13,570
So this makes it really easy to
detect input in a hardware

61
00:03:13,570 --> 00:03:15,790
agnostic way.

62
00:03:15,790 --> 00:03:18,870
Key events are just a bit too
low level for most kinds of

63
00:03:18,870 --> 00:03:19,920
text input.

64
00:03:19,920 --> 00:03:22,360
We don't really want to listen
for physical key presses.

65
00:03:22,360 --> 00:03:25,072
Really, we just want
to grab input.

66
00:03:25,072 --> 00:03:29,430
And the input event is a whole
different way of about

67
00:03:29,430 --> 00:03:30,230
thinking about this.

68
00:03:30,230 --> 00:03:33,050
We stop thinking in terms of
hardware and start thinking in

69
00:03:33,050 --> 00:03:34,490
terms of intent.

70
00:03:34,490 --> 00:03:38,470
We just don't really care about
the hardware at all.

71
00:03:38,470 --> 00:03:42,210
That really, I think, makes much
more sense than listening

72
00:03:42,210 --> 00:03:43,460
for key events.

73
00:03:43,460 --> 00:03:45,680

74
00:03:45,680 --> 00:03:49,100
So why didn't we take the
lessons from text input and

75
00:03:49,100 --> 00:03:52,370
apply them to other forms
of input, like

76
00:03:52,370 --> 00:03:55,000
pointing and touching?

77
00:03:55,000 --> 00:03:57,100
So take the anchor
tag, for example.

78
00:03:57,100 --> 00:03:59,390
It can be clicked,
touched, tabbed.

79
00:03:59,390 --> 00:04:03,660

80
00:04:03,660 --> 00:04:06,330
Do we really want to know
if the user clicked

81
00:04:06,330 --> 00:04:07,390
it or touched it?

82
00:04:07,390 --> 00:04:08,895
Most of the time we don't.

83
00:04:08,895 --> 00:04:11,870
We just want to know if
the user wanted to

84
00:04:11,870 --> 00:04:15,180
navigate to that link.

85
00:04:15,180 --> 00:04:18,180
There are fundamental problems
with listening only for click

86
00:04:18,180 --> 00:04:19,360
events on anchor tags.

87
00:04:19,360 --> 00:04:22,170
What if the user tabbed
to the link and then

88
00:04:22,170 --> 00:04:23,530
pressed the Enter key?

89
00:04:23,530 --> 00:04:28,240
Or what if the user issued a
voice command intending to

90
00:04:28,240 --> 00:04:30,190
navigate to that link?

91
00:04:30,190 --> 00:04:34,010
Perhaps we can just have an
activate event that we can

92
00:04:34,010 --> 00:04:37,760
just use to listen for
the intent itself.

93
00:04:37,760 --> 00:04:42,610
This can apply to command
elements, buttons, as well as

94
00:04:42,610 --> 00:04:44,790
anchor tags.

95
00:04:44,790 --> 00:04:48,470
But at the same time,
pointer events are

96
00:04:48,470 --> 00:04:49,640
still really useful.

97
00:04:49,640 --> 00:04:53,680
They're ideal in 2D drawing
applications, and developers

98
00:04:53,680 --> 00:04:56,950
will rely on them to define
custom gestures for their

99
00:04:56,950 --> 00:04:58,690
applications.

100
00:04:58,690 --> 00:05:02,110
So those gestures can come from
a trackpad, a touchscreen

101
00:05:02,110 --> 00:05:04,580
device, a Kinect, or a
Leap Motion device

102
00:05:04,580 --> 00:05:08,060
used in a 2D context.

103
00:05:08,060 --> 00:05:11,650
To ask a common question, can
touch events coexist with

104
00:05:11,650 --> 00:05:12,570
pointer events?

105
00:05:12,570 --> 00:05:12,990
Yes.

106
00:05:12,990 --> 00:05:13,770
Should they?

107
00:05:13,770 --> 00:05:15,190
Perhaps not.

108
00:05:15,190 --> 00:05:17,590
It's unlikely that a developer
would want to capture touch

109
00:05:17,590 --> 00:05:20,680
events as a subset of
pointer events.

110
00:05:20,680 --> 00:05:23,390
If you have access to pointer
events, it's probably best

111
00:05:23,390 --> 00:05:25,260
just to use those.

112
00:05:25,260 --> 00:05:29,390
Besides, the pointer-type
attributes of a pointer event

113
00:05:29,390 --> 00:05:32,640
gives you access to the input
device type, whether it's a

114
00:05:32,640 --> 00:05:35,560
mouse, pen, or touch.

115
00:05:35,560 --> 00:05:38,230
The same point on coexistence
goes for click events.

116
00:05:38,230 --> 00:05:39,960
Sorry, I've gone too far.

117
00:05:39,960 --> 00:05:42,520

118
00:05:42,520 --> 00:05:46,640
In fact, developers will
eventually get to abandon

119
00:05:46,640 --> 00:05:49,690
click events completely, and
they'll be replaced by more

120
00:05:49,690 --> 00:05:53,540
semantically correct and
hardware-agnostic events in

121
00:05:53,540 --> 00:05:55,650
the cases that they're now most
frequently used, like

122
00:05:55,650 --> 00:05:59,370
anchor tags and buttons.

123
00:05:59,370 --> 00:06:03,200
Libraries, like pointer.js for
example, already make it

124
00:06:03,200 --> 00:06:07,290
possible to move away from click
events and move towards

125
00:06:07,290 --> 00:06:08,910
pointers, which are
more abstract.

126
00:06:08,910 --> 00:06:12,620

127
00:06:12,620 --> 00:06:17,220
The trouble is that almost
all forms of inputs we've

128
00:06:17,220 --> 00:06:22,320
discussed so far involve
input in a 2D space.

129
00:06:22,320 --> 00:06:25,280
Take Leap Motion's JavaScript
API for example.

130
00:06:25,280 --> 00:06:28,620

131
00:06:28,620 --> 00:06:33,180
You can receive input as
an array of hands.

132
00:06:33,180 --> 00:06:37,400
And they can be anything from
zero to infinity, really,

133
00:06:37,400 --> 00:06:38,480
because it depends--

134
00:06:38,480 --> 00:06:41,350
if you have multiple Leap Motion
devices, you can just

135
00:06:41,350 --> 00:06:45,240
have an infinite amount
of hands.

136
00:06:45,240 --> 00:06:52,810
And each hand has coordinates
on x, y, and z.

137
00:06:52,810 --> 00:06:55,440
And how do we turn these
into pointers?

138
00:06:55,440 --> 00:06:59,490
Pointers don't really give us
a z-axis, but it shouldn't

139
00:06:59,490 --> 00:07:02,320
really be that difficult to
add it to the standard.

140
00:07:02,320 --> 00:07:07,270

141
00:07:07,270 --> 00:07:11,860
Hands from Leap Motion can fit
into the pointer event spec.

142
00:07:11,860 --> 00:07:17,950

143
00:07:17,950 --> 00:07:20,400
But at the same time--

144
00:07:20,400 --> 00:07:21,640
sorry.

145
00:07:21,640 --> 00:07:22,890
Just a second.

146
00:07:22,890 --> 00:07:34,780

147
00:07:34,780 --> 00:07:39,090
So another big issue is
standardizing gestures.

148
00:07:39,090 --> 00:07:43,050

149
00:07:43,050 --> 00:07:51,960
There isn't really much going on
in this respect with specs.

150
00:07:51,960 --> 00:07:54,660
The closest we've come, really,
toward standardizing

151
00:07:54,660 --> 00:08:05,970
gestures is in the UI event
spec, which gives us a way to

152
00:08:05,970 --> 00:08:11,770
separate the actual method of
input or the physical action

153
00:08:11,770 --> 00:08:14,610
that the user made
from the intent.

154
00:08:14,610 --> 00:08:23,110
So, for example, we can take a
physical push action and turn

155
00:08:23,110 --> 00:08:29,160
it into an activate intent for
a link, which gives us a more

156
00:08:29,160 --> 00:08:30,690
abstract way of dealing
with input.

157
00:08:30,690 --> 00:08:35,330

158
00:08:35,330 --> 00:08:40,590
Taking a swipe gesture, for
example, on a trackpad, in the

159
00:08:40,590 --> 00:08:45,690
UI event spec gives us a way to
turn this into a pan event.

160
00:08:45,690 --> 00:08:52,760
So it doesn't matter whether
the user provided the input

161
00:08:52,760 --> 00:08:57,910
using the speech API, say, as
go left command, as a verbal

162
00:08:57,910 --> 00:09:03,400
command, or by swiping their
hand on a touchscreen or by

163
00:09:03,400 --> 00:09:08,435
just moving your hand in the air
to mimic a swipe action.

164
00:09:08,435 --> 00:09:11,340
The spec gives us a way to
translate this into a pan

165
00:09:11,340 --> 00:09:13,705
event, which we can then use
to move a page around.

166
00:09:13,705 --> 00:09:23,330

167
00:09:23,330 --> 00:09:33,430
Really in conclusion, we want
developers to produce more

168
00:09:33,430 --> 00:09:34,580
adaptive web apps.

169
00:09:34,580 --> 00:09:41,640
To do that, we need to
standardize input methods.

170
00:09:41,640 --> 00:09:44,870
We need browsers to
support pointers.

171
00:09:44,870 --> 00:09:49,870
And it would also help if
we standardize gestures.

172
00:09:49,870 --> 00:09:54,090
But at the same time, a probably
more future-proof way

173
00:09:54,090 --> 00:09:58,730
is by providing developers with
more abstract ways of

174
00:09:58,730 --> 00:10:04,080
dealing with the actions that
the user intends, like

175
00:10:04,080 --> 00:10:07,260
activate actions for links, say,
or panning actions for

176
00:10:07,260 --> 00:10:09,330
moving a page around.

177
00:10:09,330 --> 00:10:15,600
And that will just make our
life a whole lot easier.

178
00:10:15,600 --> 00:10:19,670
Instead of requiring every
developer to listen for all

179
00:10:19,670 --> 00:10:22,850
these different kinds of events,
for all different

180
00:10:22,850 --> 00:10:26,130
kinds of input methods, we can
just listen for one event,

181
00:10:26,130 --> 00:10:30,308
which is the intent,
and support that.

182
00:10:30,308 --> 00:10:31,805
That's it.

183
00:10:31,805 --> 00:10:32,803
Thanks.

184
00:10:32,803 --> 00:10:38,292
[APPLAUSE]

185
00:10:38,292 --> 00:10:40,800
PETE LEPAGE: All right.

186
00:10:40,800 --> 00:10:43,440
So while I'm unlocking my
computer so I can have a look

187
00:10:43,440 --> 00:10:44,820
at the questions,
I know the first

188
00:10:44,820 --> 00:10:46,090
question that's on there.

189
00:10:46,090 --> 00:10:49,540
And it's by far the most popular
question, is what are

190
00:10:49,540 --> 00:10:53,310
the new input types that really,
as developers, we need

191
00:10:53,310 --> 00:10:55,170
to start thinking about today?

192
00:10:55,170 --> 00:10:58,360
And what are the implications
of using those?

193
00:10:58,360 --> 00:11:01,230
So I'd like to hear from all of
you guys what you sort of

194
00:11:01,230 --> 00:11:04,330
think is the biggest and most
important one and what

195
00:11:04,330 --> 00:11:06,800
developers need to think.

196
00:11:06,800 --> 00:11:08,780
So, Mairead, do you
want to go ahead?

197
00:11:08,780 --> 00:11:12,120
MAIREAD BUCHAN: Well, in terms
of the biggest at the moment,

198
00:11:12,120 --> 00:11:14,990
I think in terms of something
that's not just keyboard or

199
00:11:14,990 --> 00:11:16,440
mouse, is touch.

200
00:11:16,440 --> 00:11:18,660
That the majority of your users
are going to have that.

201
00:11:18,660 --> 00:11:20,460
If you're talking about things
that you haven't really

202
00:11:20,460 --> 00:11:25,750
thought of that are coming in,
maybe motion sensing, so maybe

203
00:11:25,750 --> 00:11:27,670
Leap Motion because that's
coming next.

204
00:11:27,670 --> 00:11:31,800
It should be released at the end
of this month allegedly.

205
00:11:31,800 --> 00:11:35,500
But also like [INAUDIBLE] did
loads of work into how many

206
00:11:35,500 --> 00:11:39,740
children are actually using
games consoles, so anything

207
00:11:39,740 --> 00:11:43,290
that you can interact with a
games console with, and also

208
00:11:43,290 --> 00:11:47,370
hybrid mobiles that are games
console devices and mobiles.

209
00:11:47,370 --> 00:11:49,240
So they have joysticks and

210
00:11:49,240 --> 00:11:52,450
touchscreens and maybe keyboards.

211
00:11:52,450 --> 00:11:55,540
So you've got to think about
what application you're making

212
00:11:55,540 --> 00:11:59,120
and what that your users
are likely to be using.

213
00:11:59,120 --> 00:12:00,350
PETE LEPAGE: Cool.

214
00:12:00,350 --> 00:12:01,116
Boris?

215
00:12:01,116 --> 00:12:03,800
BORIS SMUS: Yeah, I would
basically agree with that.

216
00:12:03,800 --> 00:12:07,780
Touch is, realistically
speaking, the only interesting

217
00:12:07,780 --> 00:12:10,650
new mode, at least from the
perspective of what we need to

218
00:12:10,650 --> 00:12:12,030
do as web developers.

219
00:12:12,030 --> 00:12:15,510
But there's a whole slew of
emerging technology that--

220
00:12:15,510 --> 00:12:17,890
I don't think Leap is
at all like the

221
00:12:17,890 --> 00:12:20,030
extent of what's coming.

222
00:12:20,030 --> 00:12:22,330
There's a whole number of--
pretty much every large

223
00:12:22,330 --> 00:12:27,920
corporation has some finger in
this pie of camera-based or

224
00:12:27,920 --> 00:12:31,610
something like this input
technologies, whether it's

225
00:12:31,610 --> 00:12:34,090
tracking fingers,
hands, bodies,

226
00:12:34,090 --> 00:12:36,110
faces, irises, et cetera.

227
00:12:36,110 --> 00:12:38,850
So there's a whole number of
primitives in the real world

228
00:12:38,850 --> 00:12:40,760
that are going to start
to be tracked.

229
00:12:40,760 --> 00:12:43,430
And this is obviously a little
further out, but still

230
00:12:43,430 --> 00:12:44,732
interesting.

231
00:12:44,732 --> 00:12:49,210
FRANCOIS DAOUST: So just to
maybe add something more on

232
00:12:49,210 --> 00:12:52,700
top of the huge list you
already mentioned.

233
00:12:52,700 --> 00:12:56,700
Maybe at the intent level that
Pete mentioned, I would

234
00:12:56,700 --> 00:13:01,340
perhaps add presence or user
attention as a possible way

235
00:13:01,340 --> 00:13:03,910
for a more immersive
experience.

236
00:13:03,910 --> 00:13:06,090
For instance, if you have a
screen that is displayed on a

237
00:13:06,090 --> 00:13:09,890
wall, a mirror, or something,
something that is connected,

238
00:13:09,890 --> 00:13:13,920
you might just want to know
whether the user is in front

239
00:13:13,920 --> 00:13:15,450
of it or whether it's not.

240
00:13:15,450 --> 00:13:17,860
And the thing that you're
going to display, the

241
00:13:17,860 --> 00:13:20,890
interaction with the user, will
change based on that.

242
00:13:20,890 --> 00:13:23,790
Again, it's at the intent level,
so you don't need to

243
00:13:23,790 --> 00:13:29,520
know how the system knows
that the user is there.

244
00:13:29,520 --> 00:13:32,560
They already have some
mechanisms to do that with the

245
00:13:32,560 --> 00:13:36,800
RFID, with NFC, with, actually,
the user manually

246
00:13:36,800 --> 00:13:40,170
entering his status on Skype
or whatever saying, I'm

247
00:13:40,170 --> 00:13:42,860
available, I'm busy,
I'm not there.

248
00:13:42,860 --> 00:13:44,330
So it has [? fallback, ?]

249
00:13:44,330 --> 00:13:49,980
and that could be a new kind of
a user input coming in the

250
00:13:49,980 --> 00:13:52,436
near future.

251
00:13:52,436 --> 00:13:55,050
MATT CARUANA GALIZIA: I think
that one of the most

252
00:13:55,050 --> 00:13:59,200
interesting developments in
input is speech, because it

253
00:13:59,200 --> 00:14:01,830
forces us to think of input
in a whole new way.

254
00:14:01,830 --> 00:14:06,550
We suddenly have to deal with a
method of input that doesn't

255
00:14:06,550 --> 00:14:09,120
involve fingers, doesn't
involve hands, doesn't

256
00:14:09,120 --> 00:14:12,260
touching, moving, or
anything like that.

257
00:14:12,260 --> 00:14:16,480
So we just have to completely
change the way that we think

258
00:14:16,480 --> 00:14:19,670
about input and write
applications

259
00:14:19,670 --> 00:14:22,510
in different ways.

260
00:14:22,510 --> 00:14:26,640
The first step is to probably
change standards or develop

261
00:14:26,640 --> 00:14:31,000
new standards to allow
developers to more easily

262
00:14:31,000 --> 00:14:33,380
support this new form of inputs

263
00:14:33,380 --> 00:14:34,980
without relying on polyfills.

264
00:14:34,980 --> 00:14:38,270

265
00:14:38,270 --> 00:14:43,520
I tend to think that providing
polyfills is probably a good

266
00:14:43,520 --> 00:14:45,380
way of getting started.

267
00:14:45,380 --> 00:14:49,110
We can produce the polyfill, get
developers to start using

268
00:14:49,110 --> 00:14:53,866
it, and then eventually the
standard will come later.

269
00:14:53,866 --> 00:14:57,330
PETE LEPAGE: Actually, that's
a great sort of segue to the

270
00:14:57,330 --> 00:15:00,420
next question that Andrew
had put in.

271
00:15:00,420 --> 00:15:02,960
And his question was, if
we use a mechanism for

272
00:15:02,960 --> 00:15:06,650
abstracting all directional
input into pointer events,

273
00:15:06,650 --> 00:15:10,050
will we ultimately regret
that decision?

274
00:15:10,050 --> 00:15:12,570
I believe there's a pointer
event polyfill library you can

275
00:15:12,570 --> 00:15:14,270
start playing with today.

276
00:15:14,270 --> 00:15:17,650
But are we regret that decision
in 6 months, 12

277
00:15:17,650 --> 00:15:21,301
months, maybe in 60 months?

278
00:15:21,301 --> 00:15:23,850
BORIS SMUS: I'll take
a stab at this.

279
00:15:23,850 --> 00:15:27,490
So I think that there's some
kinds of directional input

280
00:15:27,490 --> 00:15:30,690
that makes sense to try to
abstract as a pointer and

281
00:15:30,690 --> 00:15:34,010
other things it totally
does not.

282
00:15:34,010 --> 00:15:37,560
Things that are screen based is
an obvious fit, where you

283
00:15:37,560 --> 00:15:39,860
have a natural mapping to
screen coordinates.

284
00:15:39,860 --> 00:15:41,020
This includes mouse and touch.

285
00:15:41,020 --> 00:15:44,480
But when you're talking about
things like Leap or any sort

286
00:15:44,480 --> 00:15:47,310
of sensing in the real world, I
think you quickly fall into

287
00:15:47,310 --> 00:15:50,580
this weird place where
it's unclear what the

288
00:15:50,580 --> 00:15:52,630
client x is, really.

289
00:15:52,630 --> 00:15:56,290
And at that point, you're
dealing with physical units if

290
00:15:56,290 --> 00:15:59,720
you have some z-coordinates,
and you're just

291
00:15:59,720 --> 00:16:01,320
polluting the space.

292
00:16:01,320 --> 00:16:03,090
I feel like it's a
perilous path.

293
00:16:03,090 --> 00:16:06,826
So I guess the short
answer, depends.

294
00:16:06,826 --> 00:16:07,910
PETE LEPAGE: All right.

295
00:16:07,910 --> 00:16:08,395
Anybody--

296
00:16:08,395 --> 00:16:11,090
MAIREAD BUCHAN: Your only other
choice is coding every

297
00:16:11,090 --> 00:16:13,040
single aspect from scratch.

298
00:16:13,040 --> 00:16:16,370
And is your project going
to be profitable?

299
00:16:16,370 --> 00:16:18,630
Have you really got the
development time to do

300
00:16:18,630 --> 00:16:23,650
pointers and touch and click and
keyboard, which I reckon

301
00:16:23,650 --> 00:16:26,510
probably most web developers
are failing at already.

302
00:16:26,510 --> 00:16:29,400
Like we're not even doing
keyboard and click that well.

303
00:16:29,400 --> 00:16:31,880
So are you going to add another
interaction paradigm

304
00:16:31,880 --> 00:16:34,190
into your development
lifecycle?

305
00:16:34,190 --> 00:16:36,370
PETE LEPAGE: But isn't the point
of pointer events that

306
00:16:36,370 --> 00:16:39,690
you can sort of reduce the touch
and the mouse and all

307
00:16:39,690 --> 00:16:41,730
that kind of stuff to
one simple place?

308
00:16:41,730 --> 00:16:42,100
MAIREAD BUCHAN: Yeah.

309
00:16:42,100 --> 00:16:43,020
Absolutely.

310
00:16:43,020 --> 00:16:45,780
I think it's a great idea,
and I agree with Matt.

311
00:16:45,780 --> 00:16:47,400
You've got to abstract it.

312
00:16:47,400 --> 00:16:49,980
Otherwise, we're entering
a world of pain.

313
00:16:49,980 --> 00:16:50,646
You've got to.

314
00:16:50,646 --> 00:16:51,480
BORIS SMUS: Yeah.

315
00:16:51,480 --> 00:16:53,610
I think abstracting is
important, but you still need

316
00:16:53,610 --> 00:16:55,840
to retain the ability of
distinguishing between these

317
00:16:55,840 --> 00:16:58,860
different types of input.

318
00:16:58,860 --> 00:17:02,410
Like for example, you often do
want to have a touch-specific

319
00:17:02,410 --> 00:17:05,069
thing, which pointer events do
let you do because you can

320
00:17:05,069 --> 00:17:07,140
distinguish between [INAUDIBLE]
and touch.

321
00:17:07,140 --> 00:17:12,619
But that's an important thing
to carry over so that we're

322
00:17:12,619 --> 00:17:14,920
still able to do these sorts
of customizations.

323
00:17:14,920 --> 00:17:15,680
FRANCOIS DAOUST: Yeah.

324
00:17:15,680 --> 00:17:20,250
So just to complete, again,
there are different layers or

325
00:17:20,250 --> 00:17:21,369
different levels.

326
00:17:21,369 --> 00:17:24,329
And you want both of them--

327
00:17:24,329 --> 00:17:28,329
maybe there's more than two,
but you want actually the

328
00:17:28,329 --> 00:17:32,740
intent level for generic
interaction, and you want the

329
00:17:32,740 --> 00:17:35,680
more precise level, the pointer
level, being one, the

330
00:17:35,680 --> 00:17:40,430
touch level being a
deeper one, maybe.

331
00:17:40,430 --> 00:17:42,820
All of them have some use cases

332
00:17:42,820 --> 00:17:45,150
that need to be fulfilled.

333
00:17:45,150 --> 00:17:50,800
So the difficulty is teaching
the developer what to use and

334
00:17:50,800 --> 00:17:53,270
how not to misuse, because if
you mix the levels, you're

335
00:17:53,270 --> 00:17:57,090
going to end up breaking your
app pretty quickly, I suppose.

336
00:17:57,090 --> 00:17:57,660
PETE LEPAGE: Yeah.

337
00:17:57,660 --> 00:18:00,070
And I think we've all seen lots
of apps that have gotten

338
00:18:00,070 --> 00:18:03,320
a little bit broken with touch
and that kind of thing.

339
00:18:03,320 --> 00:18:03,890
Well, let's go--

340
00:18:03,890 --> 00:18:04,160
all right.

341
00:18:04,160 --> 00:18:05,460
Go ahead.

342
00:18:05,460 --> 00:18:07,730
BORIS SMUS: A question for
people in the audience.

343
00:18:07,730 --> 00:18:10,880
How many of you actually know
what pointer events are?

344
00:18:10,880 --> 00:18:11,415
Just curious.

345
00:18:11,415 --> 00:18:12,592
PETE LEPAGE: Awesome.

346
00:18:12,592 --> 00:18:13,620
BORIS SMUS: OK.

347
00:18:13,620 --> 00:18:16,780
So we actually are talking about
something that half the

348
00:18:16,780 --> 00:18:19,410
people don't seem to
know what it is.

349
00:18:19,410 --> 00:18:19,590
OK.

350
00:18:19,590 --> 00:18:19,800
Cool.

351
00:18:19,800 --> 00:18:22,590
So maybe just a quick intro
to pointer events.

352
00:18:22,590 --> 00:18:22,760
Basically--

353
00:18:22,760 --> 00:18:24,716
PETE LEPAGE: 30 seconds.

354
00:18:24,716 --> 00:18:27,300
BORIS SMUS: Pointer events is a
way to consolidate mouse and

355
00:18:27,300 --> 00:18:31,490
touch input into one type
of event system.

356
00:18:31,490 --> 00:18:35,610
The reason for this is touch
events and mouse events are

357
00:18:35,610 --> 00:18:38,260
basically two completely
separate systems.

358
00:18:38,260 --> 00:18:41,630
There's this weird synthetic
event concept where mouse

359
00:18:41,630 --> 00:18:44,390
events are generated for touch
on mobile devices.

360
00:18:44,390 --> 00:18:46,880
So if you don't have a
touch handler, you

361
00:18:46,880 --> 00:18:47,520
still get mouse events.

362
00:18:47,520 --> 00:18:50,400
But this leads to a whole
bunch of problems.

363
00:18:50,400 --> 00:18:52,450
So, anyway, now that we're
on the same page,

364
00:18:52,450 --> 00:18:53,580
another quick question.

365
00:18:53,580 --> 00:18:56,030
How many of you actually have
touch-specific handlers in

366
00:18:56,030 --> 00:18:57,280
your applications?

367
00:18:57,280 --> 00:19:00,560

368
00:19:00,560 --> 00:19:00,640
OK.

369
00:19:00,640 --> 00:19:02,160
So maybe about half.

370
00:19:02,160 --> 00:19:02,630
Sounds good.

371
00:19:02,630 --> 00:19:02,960
Thanks.

372
00:19:02,960 --> 00:19:04,610
PETE LEPAGE: Cool.

373
00:19:04,610 --> 00:19:07,580
Mairead, I wanted to go
to your question next.

374
00:19:07,580 --> 00:19:10,500
Do you think that devices lying
about the event they are

375
00:19:10,500 --> 00:19:14,090
sending, ie, touch devices
sending fake clicks, motion

376
00:19:14,090 --> 00:19:18,220
sensors that likely motion
faking a touch event, is

377
00:19:18,220 --> 00:19:22,690
unhelpful and somewhat
reminiscent of browsers lying

378
00:19:22,690 --> 00:19:24,636
about their user agent?

379
00:19:24,636 --> 00:19:27,620
MAIREAD BUCHAN: So to kind of
clarify this, well, I was

380
00:19:27,620 --> 00:19:28,650
looking at the Leap Motion.

381
00:19:28,650 --> 00:19:31,760
And what it does is
it projects a 2D

382
00:19:31,760 --> 00:19:33,140
plane in front of you.

383
00:19:33,140 --> 00:19:36,030
And when you touch that
plane, it sends

384
00:19:36,030 --> 00:19:37,530
that as a touch event.

385
00:19:37,530 --> 00:19:40,960
So anything you've built to be
touch related, Leap Motion can

386
00:19:40,960 --> 00:19:45,930
do in 3D by pretending
it has a 2D surface.

387
00:19:45,930 --> 00:19:48,760
If you look at how a touchscreen
pretends that it's

388
00:19:48,760 --> 00:19:51,930
had a click, and that doesn't
really work, is the Leap

389
00:19:51,930 --> 00:19:55,110
Motion touch really going
to be the same as

390
00:19:55,110 --> 00:19:56,270
you touching a surface?

391
00:19:56,270 --> 00:19:58,900
It's not, is it?

392
00:19:58,900 --> 00:20:01,810
So the more we end up
down this dark path.

393
00:20:01,810 --> 00:20:04,760
And also, if you're doing
feature detection, are you a

394
00:20:04,760 --> 00:20:05,410
touch device?

395
00:20:05,410 --> 00:20:06,060
Yes, I am.

396
00:20:06,060 --> 00:20:07,040
No, it's not.

397
00:20:07,040 --> 00:20:09,660
It's something else lying that
it's a touch device.

398
00:20:09,660 --> 00:20:13,530
So that's dangerous ground, I
think, because, what, are you

399
00:20:13,530 --> 00:20:16,350
going to go back to user agent
sniffing because your feature

400
00:20:16,350 --> 00:20:18,360
detection is not working?

401
00:20:18,360 --> 00:20:21,958
I don't know what's the
answer to that.

402
00:20:21,958 --> 00:20:23,920
MATT CARUANA GALIZIA: One of
the problems that we have

403
00:20:23,920 --> 00:20:27,930
right now, in fact, is devices
that support multiple input

404
00:20:27,930 --> 00:20:31,610
types, like laptops with screens
which you can touch,

405
00:20:31,610 --> 00:20:34,085
for example, but which also
have a mouse connected.

406
00:20:34,085 --> 00:20:38,360

407
00:20:38,360 --> 00:20:42,950
In the FD web app, we use a
library called FT Scroller.

408
00:20:42,950 --> 00:20:48,150
But the issue that we have with
scrolling right now is

409
00:20:48,150 --> 00:20:52,700
that we feature detect first
if the browser supports

410
00:20:52,700 --> 00:20:55,870
pointers, then if it supports
touches, and then obviously

411
00:20:55,870 --> 00:20:58,750
will fall back to
mouse events.

412
00:20:58,750 --> 00:21:05,506
The problem with that is that
we sacrifice usability.

413
00:21:05,506 --> 00:21:08,560

414
00:21:08,560 --> 00:21:12,070
After we successfully feature
detect touch events, it means

415
00:21:12,070 --> 00:21:16,100
that user won't be able to use
the mouse, for example, to

416
00:21:16,100 --> 00:21:17,350
scroll a layer.

417
00:21:17,350 --> 00:21:19,610

418
00:21:19,610 --> 00:21:23,140
We should really be able to just
use pointer events, and

419
00:21:23,140 --> 00:21:26,100
it should work for all the
different inputs, for the

420
00:21:26,100 --> 00:21:29,474
mouse or for the touchscreen
itself.

421
00:21:29,474 --> 00:21:30,400
BORIS SMUS: Yeah.

422
00:21:30,400 --> 00:21:35,370
So on that point, I think for
the case of a touch laptop,

423
00:21:35,370 --> 00:21:40,050
it's important not to
just ignore mouse.

424
00:21:40,050 --> 00:21:43,180
Maybe the best practice is to
prevent default on such events

425
00:21:43,180 --> 00:21:47,340
as opposed to not listening to
mouse events at all, since you

426
00:21:47,340 --> 00:21:50,655
can no longer assume that
touch implies not mouse.

427
00:21:50,655 --> 00:21:55,250

428
00:21:55,250 --> 00:21:59,430
And on the question of reducing
different kinds of

429
00:21:59,430 --> 00:22:03,940
input to different other kinds
of input, I agree with you.

430
00:22:03,940 --> 00:22:05,310
It's a dangerous path.

431
00:22:05,310 --> 00:22:10,240
Just like reducing touch to
mouse didn't work, reducing a

432
00:22:10,240 --> 00:22:12,760
Leap, which actually tracks--

433
00:22:12,760 --> 00:22:14,900
it's a sausage tracker,
essentially, tracks sausages

434
00:22:14,900 --> 00:22:16,090
in the air--

435
00:22:16,090 --> 00:22:20,830
reducing that into a touchscreen
also doesn't work.

436
00:22:20,830 --> 00:22:25,310
And it's an insult to what
Leap can do, just like

437
00:22:25,310 --> 00:22:28,800
reducing a touchscreen to a
mouse basically eliminates any

438
00:22:28,800 --> 00:22:31,380
possibility of multitouch.

439
00:22:31,380 --> 00:22:36,470
We have completely unexplored
territory in the 3D tracking

440
00:22:36,470 --> 00:22:41,102
space that we would just
lose entirely.

441
00:22:41,102 --> 00:22:44,420
PETE LEPAGE: I want to dive a
little bit deeper into the

442
00:22:44,420 --> 00:22:48,810
interactions when using both
touch and mouse because,

443
00:22:48,810 --> 00:22:53,670
Boris, you showed me a couple
of demos yesterday where

444
00:22:53,670 --> 00:22:56,110
having an object on screen, you
can put your finger on it,

445
00:22:56,110 --> 00:22:59,370
and then use the touchpad or
your mouse to make it move.

446
00:22:59,370 --> 00:23:01,680
I think there are a lot
of really interesting

447
00:23:01,680 --> 00:23:03,530
opportunities there that
haven't been explored.

448
00:23:03,530 --> 00:23:05,960
Let's talk about some of
those different ones

449
00:23:05,960 --> 00:23:07,210
for a minute or so.

450
00:23:07,210 --> 00:23:09,770

451
00:23:09,770 --> 00:23:10,570
BORIS SMUS: OK.

452
00:23:10,570 --> 00:23:14,180
So I guess there's a
couple things that

453
00:23:14,180 --> 00:23:15,900
are interesting here.

454
00:23:15,900 --> 00:23:18,910
So the first one is just the
transition between the two

455
00:23:18,910 --> 00:23:24,200
modes, in like a Windows 8
touch laptop, seems like

456
00:23:24,200 --> 00:23:26,930
there's some opportunity
to have some--

457
00:23:26,930 --> 00:23:30,590
almost like a responsive
input-type approach, where

458
00:23:30,590 --> 00:23:32,300
instead of adapting to
screen size, you're

459
00:23:32,300 --> 00:23:35,730
adapting to input method.

460
00:23:35,730 --> 00:23:37,340
Just kind of throwing
this idea out there.

461
00:23:37,340 --> 00:23:41,110
I haven't seen anyone do it
well, but it's interesting.

462
00:23:41,110 --> 00:23:44,770
The other angle is multiple
inputs simultaneously.

463
00:23:44,770 --> 00:23:49,570
So like what Pete was
describing, with a trackpad

464
00:23:49,570 --> 00:23:52,790
and a simultaneous touchscreen
interaction.

465
00:23:52,790 --> 00:23:56,620
Again, I've built some
prototypes around this stuff,

466
00:23:56,620 --> 00:23:58,910
but it's pretty early.

467
00:23:58,910 --> 00:24:02,210
And I think it'd be cool to see
more of them from other

468
00:24:02,210 --> 00:24:06,200
people and have a discussion
about them, but it's a little

469
00:24:06,200 --> 00:24:07,930
too early, I think,
to really go into.

470
00:24:07,930 --> 00:24:08,820
PETE LEPAGE: All right.

471
00:24:08,820 --> 00:24:10,270
Fair answer.

472
00:24:10,270 --> 00:24:15,100
Anybody else have any
thoughts on that?

473
00:24:15,100 --> 00:24:18,030
All right.

474
00:24:18,030 --> 00:24:21,310
So the next question we have,
tapping links on a page incurs

475
00:24:21,310 --> 00:24:25,890
a 300 millisecond delay to work
out if the user is doing

476
00:24:25,890 --> 00:24:28,360
a double tap to zoom.

477
00:24:28,360 --> 00:24:30,090
Can we get rid of this
delay somehow

478
00:24:30,090 --> 00:24:31,440
without losing the zoom?

479
00:24:31,440 --> 00:24:36,520

480
00:24:36,520 --> 00:24:38,750
MATT CARUANA GALIZIA: In
maintaining FastClick, which

481
00:24:38,750 --> 00:24:45,170
is a polyfill that we developed
at the FT to get rid

482
00:24:45,170 --> 00:24:49,380
of the delay, we've dealt
with a lot of issues.

483
00:24:49,380 --> 00:24:50,010
[? You will ?]

484
00:24:50,010 --> 00:24:53,010
constantly bring up the issue
that we've effectively

485
00:24:53,010 --> 00:24:58,740
disabled zooming by firing a
click event as soon as the

486
00:24:58,740 --> 00:25:01,645
finger leaves the screen,
as soon as the touch

487
00:25:01,645 --> 00:25:02,895
end event is fired.

488
00:25:02,895 --> 00:25:06,190

489
00:25:06,190 --> 00:25:10,250
The issue seems to be that
really, we can't have the best

490
00:25:10,250 --> 00:25:15,370
of both worlds at the moment
without an API that we can use

491
00:25:15,370 --> 00:25:19,880
to zoom the page when we
detect a second tap.

492
00:25:19,880 --> 00:25:23,550
But even in that case, really,
because once the finger has

493
00:25:23,550 --> 00:25:27,890
left the screen, then you've
already fired the click event.

494
00:25:27,890 --> 00:25:32,740
So we haven't figured out a
way yet to get the both of

495
00:25:32,740 --> 00:25:34,580
both worlds.

496
00:25:34,580 --> 00:25:38,080
FRANCOIS DAOUST: I guess,
unfortunately, the double tap

497
00:25:38,080 --> 00:25:41,320
thing is really at the operating
system level.

498
00:25:41,320 --> 00:25:44,480
It's something that
the device brings.

499
00:25:44,480 --> 00:25:52,300
And you cannot just prevent it
from happening within a web

500
00:25:52,300 --> 00:25:57,770
app, within a web browser,
within this device, without--

501
00:25:57,770 --> 00:26:01,960
we can't even imagine, I guess,
an API that would allow

502
00:26:01,960 --> 00:26:06,150
the web app to prevent the
double tap, because it's a

503
00:26:06,150 --> 00:26:07,220
usability feature.

504
00:26:07,220 --> 00:26:11,105
It has also accessibility
implications.

505
00:26:11,105 --> 00:26:14,550

506
00:26:14,550 --> 00:26:18,210
I guess the answer for me is,
no, you cannot right now.

507
00:26:18,210 --> 00:26:22,010
New devices will probably
improve the touch interaction

508
00:26:22,010 --> 00:26:24,926
and maybe remove
the double tap.

509
00:26:24,926 --> 00:26:25,710
I don't know.

510
00:26:25,710 --> 00:26:28,540
MATT CARUANA GALIZIA: Do you
that if we're building

511
00:26:28,540 --> 00:26:32,250
responsive layouts, then the
users shouldn't really have to

512
00:26:32,250 --> 00:26:33,395
zoom in the first place?

513
00:26:33,395 --> 00:26:36,656
FRANCOIS DAOUST: Well, no,
but I know that the--

514
00:26:36,656 --> 00:26:41,070
I believe that they should be
able to zoom in, but I know

515
00:26:41,070 --> 00:26:45,850
that it can trigger a lot
analyst discussions on who's

516
00:26:45,850 --> 00:26:47,570
right and who's wrong.

517
00:26:47,570 --> 00:26:49,080
So I'm more--

518
00:26:49,080 --> 00:26:50,870
it's the same thing with
the meta viewport

519
00:26:50,870 --> 00:26:53,930
when you disable scaling.

520
00:26:53,930 --> 00:26:56,360
It's the same discussion
somehow.

521
00:26:56,360 --> 00:27:00,550
And in my view, it's supposed
to be the user choosing

522
00:27:00,550 --> 00:27:02,080
whether he wants to
zoom in o or.

523
00:27:02,080 --> 00:27:04,060
He may have good reasons
to do that.

524
00:27:04,060 --> 00:27:10,300
But on mobile devices or tablet
devices, it's hard to

525
00:27:10,300 --> 00:27:15,720
find another interaction that
could be used to zoom in.

526
00:27:15,720 --> 00:27:18,030
So you're kind of stuck.

527
00:27:18,030 --> 00:27:21,630
So when you develop web apps for
customers, for instance,

528
00:27:21,630 --> 00:27:25,320
you will have to make
some workarounds.

529
00:27:25,320 --> 00:27:28,980
And you will disable zoom in,
even if you don't want to,

530
00:27:28,980 --> 00:27:30,810
just because otherwise,
the web app is

531
00:27:30,810 --> 00:27:32,726
not responsive enough.

532
00:27:32,726 --> 00:27:35,580
BORIS SMUS: So we've had lots
of discussions about this

533
00:27:35,580 --> 00:27:36,720
particular thing.

534
00:27:36,720 --> 00:27:40,150
And I think this is an
optimization that's either in

535
00:27:40,150 --> 00:27:43,060
the Chrome beta for Android
or coming soon.

536
00:27:43,060 --> 00:27:46,680
Basically, if you have a
non-user-scalable page,

537
00:27:46,680 --> 00:27:50,670
there's no reason to have this
click delay, so we just

538
00:27:50,670 --> 00:27:53,560
disable it.

539
00:27:53,560 --> 00:27:56,960
Basically, I think this is the
way that things should be, and

540
00:27:56,960 --> 00:28:01,200
FastClick is a giant hack that
should never have existed.

541
00:28:01,200 --> 00:28:03,400
I'm not saying it's
like a bad thing.

542
00:28:03,400 --> 00:28:04,390
Clearly, there was a--

543
00:28:04,390 --> 00:28:05,250
MATT CARUANA GALIZIA:
I agree completely.

544
00:28:05,250 --> 00:28:06,980
BORIS SMUS: There was a
need for it when there

545
00:28:06,980 --> 00:28:07,610
was a need for it.

546
00:28:07,610 --> 00:28:10,450
But it's time to get past that
and fix our browsers.

547
00:28:10,450 --> 00:28:11,700
MATT CARUANA GALIZIA: I agree.

548
00:28:11,700 --> 00:28:14,855

549
00:28:14,855 --> 00:28:17,410
MAIREAD BUCHAN: I don't know.

550
00:28:17,410 --> 00:28:18,790
Why would you loading a page?

551
00:28:18,790 --> 00:28:23,340
Or can you guarantee that when
a pages is loaded that it's

552
00:28:23,340 --> 00:28:25,320
going to be zoom disabled?

553
00:28:25,320 --> 00:28:25,920
Do you see what I mean?

554
00:28:25,920 --> 00:28:28,880
Like even if you've made a
responsive mobile site, a user

555
00:28:28,880 --> 00:28:32,950
still might want to zoom
in on something.

556
00:28:32,950 --> 00:28:37,230
Can you ever really make
a web page that's--

557
00:28:37,230 --> 00:28:40,500
BORIS SMUS: I would argue that
yes, because if you look at

558
00:28:40,500 --> 00:28:42,430
native apps, basically--

559
00:28:42,430 --> 00:28:45,570
if we look at the extreme of
adapting content to your

560
00:28:45,570 --> 00:28:51,540
device, then in the ideal case,
we should be doing this.

561
00:28:51,540 --> 00:28:52,240
I don't think it's

562
00:28:52,240 --> 00:28:54,760
unreasonable for special cases.

563
00:28:54,760 --> 00:28:57,980
I'm not saying disable pinch
zooming in general or double

564
00:28:57,980 --> 00:29:00,280
tap to zoom, but I
think there are

565
00:29:00,280 --> 00:29:01,980
cases where it's justified.

566
00:29:01,980 --> 00:29:04,650
MATT CARUANA GALIZIA: If we
have a pinch event, then

567
00:29:04,650 --> 00:29:07,930
really, we could just listen for
that and zoom when we get

568
00:29:07,930 --> 00:29:11,170
that event, rather than
using double tap or

569
00:29:11,170 --> 00:29:12,810
anything like that.

570
00:29:12,810 --> 00:29:18,720
And pinch makes sense because
you can theoretically pinch

571
00:29:18,720 --> 00:29:22,520
with your hands if you're using
a Leap Motion device.

572
00:29:22,520 --> 00:29:24,780
So it makes sense as an
abstract gesture.

573
00:29:24,780 --> 00:29:27,672

574
00:29:27,672 --> 00:29:29,080
PETE LEPAGE: Cool.

575
00:29:29,080 --> 00:29:32,550
So as you guys were talking
about that, I wrote down one

576
00:29:32,550 --> 00:29:35,310
off-the-cuff idea is, why can't
we just put an attribute

577
00:29:35,310 --> 00:29:38,480
on elements and say, this
element, if the user double

578
00:29:38,480 --> 00:29:44,010
taps on it, anything in here,
we don't get a zoom.

579
00:29:44,010 --> 00:29:45,730
And then you can just say,
all right, great.

580
00:29:45,730 --> 00:29:48,340
Everything in here, if the user
touches on it, that's an

581
00:29:48,340 --> 00:29:51,320
immediate click.

582
00:29:51,320 --> 00:29:52,340
BORIS SMUS: Great idea.

583
00:29:52,340 --> 00:29:56,690
Microsoft implemented it in
IE 10, or maybe IE 9.

584
00:29:56,690 --> 00:30:00,580
There's a CSS property called
ms-touch-action, I think, and

585
00:30:00,580 --> 00:30:04,640
you can configure exactly what
happens when you touch this

586
00:30:04,640 --> 00:30:07,570
particular element
to the extent of

587
00:30:07,570 --> 00:30:09,490
disabling particular gestures.

588
00:30:09,490 --> 00:30:13,700
So you can say no scrolling
on this thing, or no pinch

589
00:30:13,700 --> 00:30:14,720
zooming on it.

590
00:30:14,720 --> 00:30:17,230
And I think it would be great
to standardize this sort of

591
00:30:17,230 --> 00:30:21,570
thing, just because declarative
things are kind of

592
00:30:21,570 --> 00:30:24,040
better from many perspectives.

593
00:30:24,040 --> 00:30:28,608
So, yeah, that's
my perspective.

594
00:30:28,608 --> 00:30:31,560
PETE LEPAGE: Do you know
where it is in the

595
00:30:31,560 --> 00:30:32,730
standardization process?

596
00:30:32,730 --> 00:30:33,610
Or is it even there?

597
00:30:33,610 --> 00:30:35,750
BORIS SMUS: As far as I know,
it's not anywhere.

598
00:30:35,750 --> 00:30:36,530
PETE LEPAGE: OK.

599
00:30:36,530 --> 00:30:36,845
All right.

600
00:30:36,845 --> 00:30:37,920
BORIS SMUS: But I
could be wrong.

601
00:30:37,920 --> 00:30:39,170
Rick?

602
00:30:39,170 --> 00:30:44,682

603
00:30:44,682 --> 00:30:46,255
RICK BYERS: I'm Rick Byers.

604
00:30:46,255 --> 00:30:50,030
I'm the Google person on the
Pointer Events Working Group.

605
00:30:50,030 --> 00:30:54,820
And so the question was the
ability to disable double tap

606
00:30:54,820 --> 00:30:56,210
to zoom with touch
action, right?

607
00:30:56,210 --> 00:30:59,190
So touch action, as we
standardize it right now, has

608
00:30:59,190 --> 00:31:03,120
pan, none, and auto-- pan-x,
pan-y, none, and auto.

609
00:31:03,120 --> 00:31:06,550
And double tap isn't in there,
in particular because to talk

610
00:31:06,550 --> 00:31:08,820
about zooming individual
elements only makes sense in

611
00:31:08,820 --> 00:31:11,420
IE's concept of content zoomable
where you can have an

612
00:31:11,420 --> 00:31:13,800
element that's independently
zoomable from

613
00:31:13,800 --> 00:31:15,140
the rest of the page.

614
00:31:15,140 --> 00:31:17,440
And so we debated adding some
notion of zoom-to-touch

615
00:31:17,440 --> 00:31:19,170
action, but without a notion
of content zoomable, it

616
00:31:19,170 --> 00:31:20,060
doesn't make any sense.

617
00:31:20,060 --> 00:31:22,570
All that really makes sense
is the page itself

618
00:31:22,570 --> 00:31:24,940
being zoomable or not.

619
00:31:24,940 --> 00:31:27,970
So far, in Chrome desktop, for
example, we don't have any

620
00:31:27,970 --> 00:31:29,240
zooming at all.

621
00:31:29,240 --> 00:31:31,100
We're not going to add double
tap, because there's no way in

622
00:31:31,100 --> 00:31:32,710
hell we want to add that
300 millisecond

623
00:31:32,710 --> 00:31:33,750
delay in Chrome desktop.

624
00:31:33,750 --> 00:31:35,610
And in Android, it's
the viewport tag to

625
00:31:35,610 --> 00:31:37,130
disable double tap.

626
00:31:37,130 --> 00:31:37,790
That's where we are right now.

627
00:31:37,790 --> 00:31:39,450
But I think we'll--

628
00:31:39,450 --> 00:31:43,160
we've got to figure out how
can we not delay the click

629
00:31:43,160 --> 00:31:45,150
while still permitting some--

630
00:31:45,150 --> 00:31:47,990
certainly pinch, we should still
permit without disabling

631
00:31:47,990 --> 00:31:48,380
double tap.

632
00:31:48,380 --> 00:31:50,630
So I think maybe adding
something to touch action is

633
00:31:50,630 --> 00:31:52,050
appropriate or some
other mechanism.

634
00:31:52,050 --> 00:31:58,511

635
00:31:58,511 --> 00:31:59,320
PETE LEPAGE: Anybody?

636
00:31:59,320 --> 00:32:01,160
MAIREAD BUCHAN: I kind of feel
like, why don't we just ditch

637
00:32:01,160 --> 00:32:02,170
double tap?

638
00:32:02,170 --> 00:32:04,570
Like, is it really that
much of a win?

639
00:32:04,570 --> 00:32:07,890
If you can pitch to zoom, do
you need two ways to zoom?

640
00:32:07,890 --> 00:32:10,586
Not really.

641
00:32:10,586 --> 00:32:13,670
Let's just filter that
out, fix that.

642
00:32:13,670 --> 00:32:18,198

643
00:32:18,198 --> 00:32:20,440
PETE LEPAGE: All right.

644
00:32:20,440 --> 00:32:22,640
Anybody have anything else they
want to add on that one?

645
00:32:22,640 --> 00:32:23,636
MATT CARUANA GALIZIA:
Just that I agree.

646
00:32:23,636 --> 00:32:26,130
PETE LEPAGE: All right.

647
00:32:26,130 --> 00:32:26,870
What do you guys think?

648
00:32:26,870 --> 00:32:30,490
Should just everybody take
away double tap to zoom?

649
00:32:30,490 --> 00:32:31,418
AUDIENCE: No.

650
00:32:31,418 --> 00:32:32,346
PETE LEPAGE: No.

651
00:32:32,346 --> 00:32:32,810
All right.

652
00:32:32,810 --> 00:32:34,000
Well, there we go.

653
00:32:34,000 --> 00:32:37,560
So it seems that the panelists
disagree with you.

654
00:32:37,560 --> 00:32:40,336
Jake?

655
00:32:40,336 --> 00:32:41,586
Can we get a mic?

656
00:32:41,586 --> 00:32:45,350

657
00:32:45,350 --> 00:32:48,180
AUDIENCE: So it's quite often
if I load a page on my phone

658
00:32:48,180 --> 00:32:53,500
that's not optimized for the
screen size-- it doesn't have

659
00:32:53,500 --> 00:32:54,440
a viewport metatag--

660
00:32:54,440 --> 00:32:56,950
I'll quite often do the double
tap thing, right, to bring the

661
00:32:56,950 --> 00:33:00,350
paragraph to full width
so I can read it.

662
00:33:00,350 --> 00:33:02,730
But there's probably some way
that we can do around that.

663
00:33:02,730 --> 00:33:08,680
If it does have a viewport tag,
but it isn't fixed zoom,

664
00:33:08,680 --> 00:33:10,360
when the user starts the
interaction we know that

665
00:33:10,360 --> 00:33:13,190
double tap's going to have no
effect because the paragraph

666
00:33:13,190 --> 00:33:14,230
is already full width.

667
00:33:14,230 --> 00:33:17,200
And then we could take
the shortcut there.

668
00:33:17,200 --> 00:33:19,200
We would assume that
one tap is click.

669
00:33:19,200 --> 00:33:20,600
We don't wait 300 milliseconds,
because double

670
00:33:20,600 --> 00:33:22,985
tap is probably not what
they're going to do.

671
00:33:22,985 --> 00:33:25,615

672
00:33:25,615 --> 00:33:30,910
AUDIENCE: And there are also
some touch devices that it

673
00:33:30,910 --> 00:33:33,250
doesn't implement multitouch.

674
00:33:33,250 --> 00:33:38,592
So with the single input, the
double tap solves the problem.

675
00:33:38,592 --> 00:33:39,710
FRANCOIS DAOUST: That's
one point I

676
00:33:39,710 --> 00:33:41,440
wanted to raise as well.

677
00:33:41,440 --> 00:33:44,500
When we talk about input, we
are actually entering a

678
00:33:44,500 --> 00:33:47,480
wonderful world of patents
and that kind of stuff.

679
00:33:47,480 --> 00:33:51,410
And it makes it hard, actually,
to be able to do

680
00:33:51,410 --> 00:33:53,530
whatever you want.

681
00:33:53,530 --> 00:33:57,390
And so indeed, the pinch
couldn't be done in previous

682
00:33:57,390 --> 00:34:02,010
version, at least of other
mobile devices, because of

683
00:34:02,010 --> 00:34:03,470
obvious patents--

684
00:34:03,470 --> 00:34:06,920
or maybe not obvious, actually--
but anyway, because

685
00:34:06,920 --> 00:34:07,490
of patents.

686
00:34:07,490 --> 00:34:10,639
So there's always this side of
the story that we don't like

687
00:34:10,639 --> 00:34:13,360
to talk about and that we don't
like as developers but

688
00:34:13,360 --> 00:34:15,749
that still exists
in this world.

689
00:34:15,749 --> 00:34:16,439
BORIS SMUS: Right.

690
00:34:16,439 --> 00:34:17,830
But I think that's--

691
00:34:17,830 --> 00:34:18,650
hello.

692
00:34:18,650 --> 00:34:19,080
Test.

693
00:34:19,080 --> 00:34:19,510
Test.

694
00:34:19,510 --> 00:34:20,370
FRANCOIS DAOUST: [INAUDIBLE].

695
00:34:20,370 --> 00:34:21,830
BORIS SMUS: Sure.

696
00:34:21,830 --> 00:34:24,780
That said, I think as
developers, there's nothing

697
00:34:24,780 --> 00:34:26,550
that prevents us from
implementing.

698
00:34:26,550 --> 00:34:27,810
[LAUGHTER]

699
00:34:27,810 --> 00:34:31,600
PETE LEPAGE: So obviously,
the audio gods don't

700
00:34:31,600 --> 00:34:32,760
want Boris to speak.

701
00:34:32,760 --> 00:34:32,940
There we go.

702
00:34:32,940 --> 00:34:33,636
All right.

703
00:34:33,636 --> 00:34:34,570
Let's try this again.

704
00:34:34,570 --> 00:34:39,280
BORIS SMUS: So I think the
patents don't affect insomuch

705
00:34:39,280 --> 00:34:41,460
as web developers as
we can implement

706
00:34:41,460 --> 00:34:42,750
our own gesture handlers.

707
00:34:42,750 --> 00:34:45,080
They're just not going to
be available natively in

708
00:34:45,080 --> 00:34:48,180
platforms for any foreseeable
future.

709
00:34:48,180 --> 00:34:51,340
But we can still make our own
gesture libraries, and there's

710
00:34:51,340 --> 00:34:52,620
many of them out there.

711
00:34:52,620 --> 00:34:56,100
So that shouldn't
be stopping any

712
00:34:56,100 --> 00:34:57,350
development in this direction.

713
00:34:57,350 --> 00:35:00,502

714
00:35:00,502 --> 00:35:03,390
FRANCOIS DAOUST: What it stops
usually is standardization.

715
00:35:03,390 --> 00:35:07,310
It's where things stop.

716
00:35:07,310 --> 00:35:12,650
And gestures have been stopped
for that precise reason, at

717
00:35:12,650 --> 00:35:15,012
W3C, at least.

718
00:35:15,012 --> 00:35:18,750
There are other examples.

719
00:35:18,750 --> 00:35:19,320
PETE LEPAGE: All right.

720
00:35:19,320 --> 00:35:20,950
Anything else?

721
00:35:20,950 --> 00:35:21,600
All right.

722
00:35:21,600 --> 00:35:23,190
Let's pop down to the
next question.

723
00:35:23,190 --> 00:35:25,460
This is one that I added because
I think it's a really

724
00:35:25,460 --> 00:35:30,340
important question that
gets addressed.

725
00:35:30,340 --> 00:35:35,170
As web developers, how can we
test our sites if we don't own

726
00:35:35,170 --> 00:35:38,160
a touch PC or a touch
laptop, right?

727
00:35:38,160 --> 00:35:40,350
How can we be testing our sites
to see how they're going

728
00:35:40,350 --> 00:35:42,110
to interact on some
of these things?

729
00:35:42,110 --> 00:35:45,210
Obviously, going down to the
local computer store and

730
00:35:45,210 --> 00:35:49,350
testing your web app on there
and then going home isn't

731
00:35:49,350 --> 00:35:50,600
going to work.

732
00:35:50,600 --> 00:35:52,618

733
00:35:52,618 --> 00:35:56,240
MAIREAD BUCHAN: Well, in my
experience, the only way to

734
00:35:56,240 --> 00:36:00,530
develop, to test on a device
is to have in your hand.

735
00:36:00,530 --> 00:36:03,180
And if you really can't afford
to that, then I think you need

736
00:36:03,180 --> 00:36:06,840
to get testing labs or these
kind of browser shop places

737
00:36:06,840 --> 00:36:08,200
where you've got someone
else doing it

738
00:36:08,200 --> 00:36:09,100
with an actual device.

739
00:36:09,100 --> 00:36:13,960
I haven't found any emulator or
simulator that was really

740
00:36:13,960 --> 00:36:14,510
that useful.

741
00:36:14,510 --> 00:36:17,680
And even if you're looking at
something on a screen, and

742
00:36:17,680 --> 00:36:20,760
you've got an iPad-shaped thing,
like our designers were

743
00:36:20,760 --> 00:36:21,520
designing things.

744
00:36:21,520 --> 00:36:24,420
And then when the QA actually
had an iPad in his hand, his

745
00:36:24,420 --> 00:36:27,580
thumb, the way he was holding
the device, actually obscured

746
00:36:27,580 --> 00:36:30,800
part of the design, which you
can't mimic unless you're

747
00:36:30,800 --> 00:36:33,540
really holding an
actual thing.

748
00:36:33,540 --> 00:36:35,840
I think if you can't afford
every device, and if you're a

749
00:36:35,840 --> 00:36:38,740
sole trader, there's no
way you could do that.

750
00:36:38,740 --> 00:36:42,300
You're going to have to
put an extra line

751
00:36:42,300 --> 00:36:45,475
item in your budget.

752
00:36:45,475 --> 00:36:46,710
FRANCOIS DAOUST: Yeah.

753
00:36:46,710 --> 00:36:51,250
Well, I'm afraid there's not
many other solutions.

754
00:36:51,250 --> 00:36:54,410
We do a lot of development on
connected TVs, for instance.

755
00:36:54,410 --> 00:36:59,590
And you try the emulators.

756
00:36:59,590 --> 00:37:04,420
They just don't work as the
actual TV, so you really have

757
00:37:04,420 --> 00:37:08,290
no other choice than to have the
set-top box, the TV, the

758
00:37:08,290 --> 00:37:10,330
whatever in your room
and try it.

759
00:37:10,330 --> 00:37:15,120
You can just delay the time at
which you start to try to test

760
00:37:15,120 --> 00:37:20,630
the app on a natural device,
but it has to be done,

761
00:37:20,630 --> 00:37:23,192
unfortunately.

762
00:37:23,192 --> 00:37:25,540
MATT CARUANA GALIZIA: At the FT
we use a testing framework

763
00:37:25,540 --> 00:37:31,710
called eggPlant to test using
the iOS simulator, and it

764
00:37:31,710 --> 00:37:32,790
seems to work quite well.

765
00:37:32,790 --> 00:37:38,080
It's just very difficult to get
using, because you have to

766
00:37:38,080 --> 00:37:40,705
learn their scripting language,
script the device.

767
00:37:40,705 --> 00:37:41,955
It's very labor intensive.

768
00:37:41,955 --> 00:37:44,690

769
00:37:44,690 --> 00:37:47,570
BORIS SMUS: I think it's worth
mentioning that the simplest

770
00:37:47,570 --> 00:37:51,820
thing you can do, if you're
especially a content-oriented

771
00:37:51,820 --> 00:37:55,800
site, is you can enable
touch events in the

772
00:37:55,800 --> 00:37:57,340
Chrome Developer Tools.

773
00:37:57,340 --> 00:37:59,770
So it's just a tick box
in the settings.

774
00:37:59,770 --> 00:38:03,690
And if your site doesn't work
with that enabled-- basically,

775
00:38:03,690 --> 00:38:06,550
what it does is it creates a
touch-equivalent event for

776
00:38:06,550 --> 00:38:07,710
each mouse event.

777
00:38:07,710 --> 00:38:11,090
And if your site doesn't work
there, then it's not

778
00:38:11,090 --> 00:38:12,180
guaranteed--

779
00:38:12,180 --> 00:38:14,180
or basically, if it doesn't work
there, it's guaranteed

780
00:38:14,180 --> 00:38:17,350
not to work on a
mobile device.

781
00:38:17,350 --> 00:38:22,020
So you don't have the opposite
guarantee, but

782
00:38:22,020 --> 00:38:24,340
it's at least something.

783
00:38:24,340 --> 00:38:26,810
The other thing is I would--

784
00:38:26,810 --> 00:38:30,960
pardon my shameless plug, but
basically, there's a GitHub

785
00:38:30,960 --> 00:38:37,440
repo that lets you take your
multitouch trackpad on your

786
00:38:37,440 --> 00:38:42,690
Mac device and just essentially
pass those events

787
00:38:42,690 --> 00:38:46,410
into the browser, synthesizing
multitouch events.

788
00:38:46,410 --> 00:38:49,460
If you want to check it out,
it's called MagicTouch, and

789
00:38:49,460 --> 00:38:51,302
it'll work on your Mac.

790
00:38:51,302 --> 00:38:52,552
End of plug.

791
00:38:52,552 --> 00:38:56,102

792
00:38:56,102 --> 00:38:58,174
BORIS SMUS: Rick.

793
00:38:58,174 --> 00:38:59,630
PETE LEPAGE: Mic coming
up behind you.

794
00:38:59,630 --> 00:39:01,862
MATT CARUANA GALIZIA:
Behind you.

795
00:39:01,862 --> 00:39:04,820
RICK BYERS: There's just one
more really important piece I

796
00:39:04,820 --> 00:39:06,910
think I just wanted to mention,
that for this common

797
00:39:06,910 --> 00:39:12,110
case that Matt was discussing
about a site that when you run

798
00:39:12,110 --> 00:39:14,230
it on a computer with
touch and mouse,

799
00:39:14,230 --> 00:39:15,630
the mouse stops working.

800
00:39:15,630 --> 00:39:19,180
That's the case we see all
the time in Chrome on

801
00:39:19,180 --> 00:39:20,290
touch-enabled laptops.

802
00:39:20,290 --> 00:39:21,650
That's actually really
easy to test.

803
00:39:21,650 --> 00:39:24,970
You can run Chrome with the
flag, dash, dash, touch

804
00:39:24,970 --> 00:39:25,790
events, colon, enable.

805
00:39:25,790 --> 00:39:27,910
From about:flags, you
can turn that on.

806
00:39:27,910 --> 00:39:30,090
We really would like to
have Chrome always

807
00:39:30,090 --> 00:39:31,090
support touch events.

808
00:39:31,090 --> 00:39:33,150
The problem is, people conflate
the idea "does the

809
00:39:33,150 --> 00:39:35,490
browser support touch events"
with "is there a touchscreen

810
00:39:35,490 --> 00:39:36,090
attached?"

811
00:39:36,090 --> 00:39:38,150
And in theory, we want the
browser to always support

812
00:39:38,150 --> 00:39:39,640
touch events, because you
could plug in a USB

813
00:39:39,640 --> 00:39:40,960
touchscreen any time.

814
00:39:40,960 --> 00:39:43,140
And we can't just suddenly start
have [? window down ?]

815
00:39:43,140 --> 00:39:44,440
on touch.

816
00:39:44,440 --> 00:39:46,940
We can't change whether or not
the browser supports touch

817
00:39:46,940 --> 00:39:49,790
events during the lifetime
of a renderer process.

818
00:39:49,790 --> 00:39:51,670
We can only do it on startup.

819
00:39:51,670 --> 00:39:53,860
It would confuse the page,
even if we could do.

820
00:39:53,860 --> 00:39:56,120
So we'd love to be able
to just say-- in

821
00:39:56,120 --> 00:39:56,890
fact, we've done it.

822
00:39:56,890 --> 00:39:58,970
I think for Chrome 22
for a while, we

823
00:39:58,970 --> 00:39:59,720
supported touch events.

824
00:39:59,720 --> 00:40:01,790
Everyone complained that
sites were broken.

825
00:40:01,790 --> 00:40:03,360
I'm like, yeah, it's because
they assume that supporting

826
00:40:03,360 --> 00:40:05,200
touch events means that there's
touchscreen attached

827
00:40:05,200 --> 00:40:06,110
when it doesn't.

828
00:40:06,110 --> 00:40:07,290
So please, turn that flag on.

829
00:40:07,290 --> 00:40:08,220
Run with it on all the time.

830
00:40:08,220 --> 00:40:10,210
It doesn't hurt anything except
it might break your

831
00:40:10,210 --> 00:40:11,490
site because you've got
bugs in your site.

832
00:40:11,490 --> 00:40:14,577

833
00:40:14,577 --> 00:40:17,660
BORIS SMUS: So actually
on that, it's sort

834
00:40:17,660 --> 00:40:19,330
of interesting when--

835
00:40:19,330 --> 00:40:21,630
I think we're getting to a place
where there's a lot of

836
00:40:21,630 --> 00:40:24,270
possible permutations of
input that's available.

837
00:40:24,270 --> 00:40:26,740
And there's no real
way to know what's

838
00:40:26,740 --> 00:40:30,815
actually hooked up.

839
00:40:30,815 --> 00:40:31,540
I don't know.

840
00:40:31,540 --> 00:40:35,040
Maybe I'm the only one that's
kind of hit this, but it seems

841
00:40:35,040 --> 00:40:37,880
like sort of a bigger issue
for the web platform.

842
00:40:37,880 --> 00:40:38,640
Just--

843
00:40:38,640 --> 00:40:42,490
yeah, no real point here.

844
00:40:42,490 --> 00:40:43,710
PETE LEPAGE: All right.

845
00:40:43,710 --> 00:40:45,764
Anything else we want
to add to this?

846
00:40:45,764 --> 00:40:46,890
All right.

847
00:40:46,890 --> 00:40:48,360
Let's pop down to the
next question.

848
00:40:48,360 --> 00:40:50,730
And I think it's actually going
back to the sort of

849
00:40:50,730 --> 00:40:54,140
standardization comments we've
had a couple of times.

850
00:40:54,140 --> 00:40:57,110
But should we started working
on this standardizing of

851
00:40:57,110 --> 00:41:00,490
spatial and gestural input from
the upcoming wave of 3D

852
00:41:00,490 --> 00:41:03,602
motion sensing devices
like Leap Motion?

853
00:41:03,602 --> 00:41:06,690
MAIREAD BUCHAN: And so I was
talking to a research

854
00:41:06,690 --> 00:41:09,270
department at Kingston
University, and they deal with

855
00:41:09,270 --> 00:41:10,900
human-computer interaction.

856
00:41:10,900 --> 00:41:16,850
So they've been working with
multimillion pound software

857
00:41:16,850 --> 00:41:21,020
and hardware to do human pose
and gesture detection.

858
00:41:21,020 --> 00:41:24,780
And they've written a couple
of EU standards for gesture

859
00:41:24,780 --> 00:41:26,860
and also human body pose.

860
00:41:26,860 --> 00:41:32,090
So that kind of research has
already existed, not in the

861
00:41:32,090 --> 00:41:35,840
web development world but
in the HCI world, for

862
00:41:35,840 --> 00:41:37,520
quite a long time.

863
00:41:37,520 --> 00:41:40,470
If I was going to see a standard
for us to work with

864
00:41:40,470 --> 00:41:44,740
Leap and Kinect, I would like
it to be following in the

865
00:41:44,740 --> 00:41:46,420
paths of other people's
research.

866
00:41:46,420 --> 00:41:49,340
I don't want to reinvent the
wheel for that kind of thing.

867
00:41:49,340 --> 00:41:53,480

868
00:41:53,480 --> 00:41:55,260
MATT CARUANA GALIZIA:
I agree with that.

869
00:41:55,260 --> 00:41:58,330
For most use cases, developers
will just want to listen to

870
00:41:58,330 --> 00:41:58,970
the intent.

871
00:41:58,970 --> 00:42:03,120
For example, in the few use
cases right now where a Leap

872
00:42:03,120 --> 00:42:06,040
Motion device is attached, we
just want our website to

873
00:42:06,040 --> 00:42:08,930
continue working if we're
listening for

874
00:42:08,930 --> 00:42:11,340
events on links, say.

875
00:42:11,340 --> 00:42:17,220
But for applications that
specifically target--

876
00:42:17,220 --> 00:42:20,070
meant to be used with Leap
Motion devices or the Kinect,

877
00:42:20,070 --> 00:42:25,220
say, then really need a standard
way of dealing with

878
00:42:25,220 --> 00:42:26,770
input from these devices.

879
00:42:26,770 --> 00:42:28,720
The market is probably
going to grow.

880
00:42:28,720 --> 00:42:31,990
There are going to be
many new devices.

881
00:42:31,990 --> 00:42:35,890
We can't just ship all the
different JavaScript libraries

882
00:42:35,890 --> 00:42:38,060
for every single device
with our application.

883
00:42:38,060 --> 00:42:40,356
It's just not scalable.

884
00:42:40,356 --> 00:42:41,260
BORIS SMUS: Yeah.

885
00:42:41,260 --> 00:42:44,810
I would sort of agree
in spirit with the

886
00:42:44,810 --> 00:42:48,260
standardization idea, but I
really do think it's early

887
00:42:48,260 --> 00:42:51,020
days for these kinds
of inputs.

888
00:42:51,020 --> 00:42:53,650
And I think before standardizing
it, it's

889
00:42:53,650 --> 00:42:57,660
worthwhile just to let a million
flowers bloom and just

890
00:42:57,660 --> 00:43:02,160
to see what the commonalities
are and what the useful things

891
00:43:02,160 --> 00:43:05,110
are for standardization before
we move in that path, because

892
00:43:05,110 --> 00:43:06,360
it's going to slow us down.

893
00:43:06,360 --> 00:43:09,172

894
00:43:09,172 --> 00:43:13,700
PETE LEPAGE: Matt, I want to
go back on the same path of

895
00:43:13,700 --> 00:43:16,890
something that you said that
kind of jogged my mind and I

896
00:43:16,890 --> 00:43:18,350
thought was kind
of interesting.

897
00:43:18,350 --> 00:43:21,040
Should we maybe think about with
the PointerEvents spec

898
00:43:21,040 --> 00:43:24,660
just adding a z-coordinate
to it?

899
00:43:24,660 --> 00:43:25,520
MATT CARUANA GALIZIA: Yeah.

900
00:43:25,520 --> 00:43:27,450
I think that make sense.

901
00:43:27,450 --> 00:43:29,790
Why not, really?

902
00:43:29,790 --> 00:43:32,160
PETE LEPAGE: Would something
like that work for Leap and

903
00:43:32,160 --> 00:43:35,080
all of these other things,
potentially?

904
00:43:35,080 --> 00:43:39,390
MATT CARUANA GALIZIA: It would
work in a limited sense.

905
00:43:39,390 --> 00:43:44,200
It wouldn't allow you to make
the best use of the Leap

906
00:43:44,200 --> 00:43:46,540
Motion device.

907
00:43:46,540 --> 00:43:52,440
But for doing basic things, like
manipulating something,

908
00:43:52,440 --> 00:43:57,160
let's say a graphic within a
3D plane, then that works.

909
00:43:57,160 --> 00:44:00,616
For more complex gestures, then
of course, it will be a

910
00:44:00,616 --> 00:44:03,910
bit more difficult to use
pointers in that sense.

911
00:44:03,910 --> 00:44:05,630
You'd need something a bit
more sophisticated.

912
00:44:05,630 --> 00:44:08,295

913
00:44:08,295 --> 00:44:11,170
MAIREAD BUCHAN: I think the way
I see it, there's a couple

914
00:44:11,170 --> 00:44:13,490
of different kinds of
applications that you might

915
00:44:13,490 --> 00:44:16,770
want to use, a 3D motion-sensor

916
00:44:16,770 --> 00:44:19,045
device and the internet.

917
00:44:19,045 --> 00:44:22,260
So one kind of use case is that
you're building a website

918
00:44:22,260 --> 00:44:23,200
that someone's going
to browse.

919
00:44:23,200 --> 00:44:25,090
So they're swiping carousels,
and they're

920
00:44:25,090 --> 00:44:26,110
scrolling the page.

921
00:44:26,110 --> 00:44:28,610
And that's quite traditional
web development.

922
00:44:28,610 --> 00:44:30,920
Or there's another aspect
where you might be doing

923
00:44:30,920 --> 00:44:35,480
something more in a 3D
environment, so gaming and

924
00:44:35,480 --> 00:44:41,640
things where you need inertia
and speed and like also, 3D

925
00:44:41,640 --> 00:44:44,960
motion does kind of tilt,
and rotation of a point.

926
00:44:44,960 --> 00:44:46,750
So it's not just x, y, z.

927
00:44:46,750 --> 00:44:49,090
There's actually a lot of other
information, and that's

928
00:44:49,090 --> 00:44:50,570
relevant to a 3D world.

929
00:44:50,570 --> 00:44:53,450
But it's not really relevant to
someone browsing a web page

930
00:44:53,450 --> 00:44:56,840
or reading a magazine
on their television.

931
00:44:56,840 --> 00:45:00,100
So what kind of application
you're developing, it depends

932
00:45:00,100 --> 00:45:01,530
how much information you need.

933
00:45:01,530 --> 00:45:07,030
So pointer is really good for
websites, and there's other

934
00:45:07,030 --> 00:45:11,412
things that would be relevant
for other kinds.

935
00:45:11,412 --> 00:45:12,360
BORIS SMUS: I agree.

936
00:45:12,360 --> 00:45:14,920
And I would actually be wary
of adding a z-coordinate to

937
00:45:14,920 --> 00:45:20,010
pointer events, partly just
because it's unclear what the

938
00:45:20,010 --> 00:45:22,700
units would be for
all this stuff.

939
00:45:22,700 --> 00:45:26,640
You're breaking the connection
of a mapping-to-a-screen

940
00:45:26,640 --> 00:45:28,140
coordinate.

941
00:45:28,140 --> 00:45:31,200
As soon as you're dealing with
tracking real world stuff,

942
00:45:31,200 --> 00:45:33,450
it's in some different
coordinate systems that's

943
00:45:33,450 --> 00:45:34,880
basically--

944
00:45:34,880 --> 00:45:38,300
if you can bring it back to
screen space, you're doing it

945
00:45:38,300 --> 00:45:39,740
with some weird transform.

946
00:45:39,740 --> 00:45:41,960
But there's some other
set of coordinates.

947
00:45:41,960 --> 00:45:45,810
Typically for a depth cam, it's
x, y, z, in millimeters,

948
00:45:45,810 --> 00:45:49,390
which would be very confusing to
suddenly change your units

949
00:45:49,390 --> 00:45:51,070
to millimeters in
pointer spec.

950
00:45:51,070 --> 00:45:54,745
So my vote for keeping
pointers clean.

951
00:45:54,745 --> 00:45:57,788

952
00:45:57,788 --> 00:45:59,940
PETE LEPAGE: Francois, do you
want to weigh in on that one?

953
00:45:59,940 --> 00:46:00,370
FRANCOIS DAOUST: [INAUDIBLE].

954
00:46:00,370 --> 00:46:01,091
PETE LEPAGE: All right.

955
00:46:01,091 --> 00:46:01,395
All right.

956
00:46:01,395 --> 00:46:04,496
FRANCOIS DAOUST: [INAUDIBLE].

957
00:46:04,496 --> 00:46:05,310
PETE LEPAGE: All right.

958
00:46:05,310 --> 00:46:07,710
So pop down to our
next question.

959
00:46:07,710 --> 00:46:11,240
What will be the equivalent
event for hover mouseover for

960
00:46:11,240 --> 00:46:12,660
touch devices?

961
00:46:12,660 --> 00:46:14,290
Should we abandon the
hover event when

962
00:46:14,290 --> 00:46:15,660
considering touch devices?

963
00:46:15,660 --> 00:46:19,167

964
00:46:19,167 --> 00:46:22,880
FRANCOIS DAOUST: I guess that
could happen in the future.

965
00:46:22,880 --> 00:46:25,840
You can already do that, some
kind of presence detection of

966
00:46:25,840 --> 00:46:30,290
the finger, with several
systems, infrared or--

967
00:46:30,290 --> 00:46:31,420
what's it's called?

968
00:46:31,420 --> 00:46:32,640
Ultrasound.

969
00:46:32,640 --> 00:46:34,830
There are some systems that
allow you to detect the

970
00:46:34,830 --> 00:46:38,860
presence of a finger without
actually touching the screen.

971
00:46:38,860 --> 00:46:44,170
But it has more limited use than
hover, and it's supposed

972
00:46:44,170 --> 00:46:49,470
that the user is not shaking and
is actually pointing his

973
00:46:49,470 --> 00:46:50,720
finger correctly.

974
00:46:50,720 --> 00:46:52,820

975
00:46:52,820 --> 00:46:55,250
We should not close the door
to that possibility, but I

976
00:46:55,250 --> 00:46:58,080
don't think that's a main
use case right now.

977
00:46:58,080 --> 00:47:00,170
BORIS SMUS: I think it's
important that we don't rely

978
00:47:00,170 --> 00:47:06,720
on hover for just the general
web, again, because of mixed

979
00:47:06,720 --> 00:47:09,160
modalities, possibly of input.

980
00:47:09,160 --> 00:47:11,370
If you rely on hover, generally
touch devices are

981
00:47:11,370 --> 00:47:13,750
not going to be able to
see whatever's there.

982
00:47:13,750 --> 00:47:16,500
It's a very clunky interaction
to have this.

983
00:47:16,500 --> 00:47:19,880
You can activate the hover
state, the CSS hover state, by

984
00:47:19,880 --> 00:47:22,360
doing this weird action.

985
00:47:22,360 --> 00:47:25,540
You press down on the link, and
then you move away from it

986
00:47:25,540 --> 00:47:27,480
before it long presses, or
something like that.

987
00:47:27,480 --> 00:47:29,390
And then you get the
hover state.

988
00:47:29,390 --> 00:47:32,430
But obviously this is not
something that we want to do

989
00:47:32,430 --> 00:47:34,080
or have people do.

990
00:47:34,080 --> 00:47:37,170
So I do think that
it's important.

991
00:47:37,170 --> 00:47:40,020
Though there's technology coming
to make this happen,

992
00:47:40,020 --> 00:47:42,630
it's not going to
happen tomorrow.

993
00:47:42,630 --> 00:47:45,950
You should be very aware of
hover states in touch and

994
00:47:45,950 --> 00:47:48,442
don't do it.

995
00:47:48,442 --> 00:47:49,610
PETE LEPAGE: There
a comment back--

996
00:47:49,610 --> 00:47:52,320
AUDIENCE: Actually, I
ask a question, yes.

997
00:47:52,320 --> 00:47:59,110
And the reason I ask is, so my
wife has a Samsung Note, which

998
00:47:59,110 --> 00:48:01,250
comes with a pen.

999
00:48:01,250 --> 00:48:05,120
Because it comes with pen, pen
can do the kind of hover

1000
00:48:05,120 --> 00:48:05,320
equivalent.

1001
00:48:05,320 --> 00:48:10,010
When it comes too close to the
surface, it mimics hover.

1002
00:48:10,010 --> 00:48:13,670
And also, when you do a drawing
in something like

1003
00:48:13,670 --> 00:48:15,960
Wacom they also have
the hover.

1004
00:48:15,960 --> 00:48:18,200
And it's very critical,
especially when you start

1005
00:48:18,200 --> 00:48:20,470
doing [? data ?] visualization
or something, you don't want

1006
00:48:20,470 --> 00:48:23,130
to touch everything, because
you just want to glance the

1007
00:48:23,130 --> 00:48:24,110
information.

1008
00:48:24,110 --> 00:48:26,800
Then you need a [INAUDIBLE]

1009
00:48:26,800 --> 00:48:31,380
information, which I don't
want to touch everything.

1010
00:48:31,380 --> 00:48:36,400
So I think hover is kind of
getting neglected, especially

1011
00:48:36,400 --> 00:48:36,960
in the touch.

1012
00:48:36,960 --> 00:48:40,070
You think a touch panel
enhances the input--

1013
00:48:40,070 --> 00:48:40,860
PETE LEPAGE: Yeah.

1014
00:48:40,860 --> 00:48:41,570
AUDIENCE: --but it's actually
one [? other ?]

1015
00:48:41,570 --> 00:48:41,760
thing.

1016
00:48:41,760 --> 00:48:42,450
It's decreasing.

1017
00:48:42,450 --> 00:48:43,240
PETE LEPAGE: Yeah.

1018
00:48:43,240 --> 00:48:43,550
Yeah.

1019
00:48:43,550 --> 00:48:45,350
I think that's a really
valid point.

1020
00:48:45,350 --> 00:48:48,350
MAIREAD BUCHAN: I think it's
kind of highlighting the

1021
00:48:48,350 --> 00:48:51,610
problem of like a kind of--

1022
00:48:51,610 --> 00:48:53,820
I don't want to use the word
"semantics," but I can't think

1023
00:48:53,820 --> 00:48:54,670
of anything better--

1024
00:48:54,670 --> 00:48:59,650
like a hover with a mouse on
a 2D screen is not really a

1025
00:48:59,650 --> 00:49:00,160
hover at all.

1026
00:49:00,160 --> 00:49:02,860
That's a mouse entering
a bounded area.

1027
00:49:02,860 --> 00:49:05,260
It's not hovering just above it
because you've only got two

1028
00:49:05,260 --> 00:49:07,370
dimensions.

1029
00:49:07,370 --> 00:49:11,120
What's a hover in a 3D world
is different to a

1030
00:49:11,120 --> 00:49:12,010
hover in a 2D world.

1031
00:49:12,010 --> 00:49:16,700
And actually, it should be
pointer Enter before pointer

1032
00:49:16,700 --> 00:49:17,920
is activated.

1033
00:49:17,920 --> 00:49:20,990
And your active is your click,
and your Enter is your hover.

1034
00:49:20,990 --> 00:49:24,370
But we need to move away from
that kind of terminology,

1035
00:49:24,370 --> 00:49:26,570
because it is confusing.

1036
00:49:26,570 --> 00:49:27,820
It's a mixed metaphor.

1037
00:49:27,820 --> 00:49:30,330

1038
00:49:30,330 --> 00:49:32,790
I like hover, but I tell my
designers they're not allowed

1039
00:49:32,790 --> 00:49:35,802
to use it anymore.

1040
00:49:35,802 --> 00:49:37,530
PETE LEPAGE: We've
got time for, I

1041
00:49:37,530 --> 00:49:38,780
think, one more question.

1042
00:49:38,780 --> 00:49:41,950

1043
00:49:41,950 --> 00:49:44,420
So we'll go for this last one.

1044
00:49:44,420 --> 00:49:47,280
Smooth scrolling is critical
for a good touchscreen

1045
00:49:47,280 --> 00:49:48,180
experience.

1046
00:49:48,180 --> 00:49:50,520
What are some of the common
pitfalls for introducing

1047
00:49:50,520 --> 00:49:52,750
scroll jank to touch input?

1048
00:49:52,750 --> 00:49:55,396

1049
00:49:55,396 --> 00:49:57,850
BORIS SMUS: So one of the common
things people tend to

1050
00:49:57,850 --> 00:50:02,330
do is do a bunch of stuff
in their input handlers.

1051
00:50:02,330 --> 00:50:05,470
So this breaks down really
quickly with multitouch,

1052
00:50:05,470 --> 00:50:09,765
because you're having your
touch move events firing

1053
00:50:09,765 --> 00:50:11,380
basically at a rate proportional
to the number of

1054
00:50:11,380 --> 00:50:12,770
fingers on your screen.

1055
00:50:12,770 --> 00:50:15,420
So you end up having
a flood of--

1056
00:50:15,420 --> 00:50:16,810
I don't know-- something
like--

1057
00:50:16,810 --> 00:50:21,940
I've seen it go up to, like,
200 fps touch input events.

1058
00:50:21,940 --> 00:50:26,860
So if you're trying to render
at 200 fps, you're obviously

1059
00:50:26,860 --> 00:50:31,210
going to be throttling your
rendering engine.

1060
00:50:31,210 --> 00:50:35,270
The workaround to this is use
RequestAnimationFrame, set

1061
00:50:35,270 --> 00:50:40,960
state in your input handler, and
then render on render as

1062
00:50:40,960 --> 00:50:42,210
opposed to on input.

1063
00:50:42,210 --> 00:50:45,556

1064
00:50:45,556 --> 00:50:47,080
PETE LEPAGE: Anybody else
got anything they

1065
00:50:47,080 --> 00:50:48,660
want to add to that?

1066
00:50:48,660 --> 00:50:49,090
Who's there?

1067
00:50:49,090 --> 00:50:49,650
RICK BYERS: Rick.

1068
00:50:49,650 --> 00:50:50,640
PETE LEPAGE: All right.

1069
00:50:50,640 --> 00:50:51,910
Can we get a mic over
there real quick.

1070
00:50:51,910 --> 00:50:54,540

1071
00:50:54,540 --> 00:50:55,400
RICK BYERS: I'm sorry.

1072
00:50:55,400 --> 00:50:58,840
This is such a big problem I
can't help not speak up again.

1073
00:50:58,840 --> 00:51:00,770
I think people often don't
realize the implication of

1074
00:51:00,770 --> 00:51:02,260
putting a touch handler
on your page.

1075
00:51:02,260 --> 00:51:05,190
So if you're using touch events,
the model is that the

1076
00:51:05,190 --> 00:51:07,390
browser can't decide whether
or not to scroll until it's

1077
00:51:07,390 --> 00:51:10,010
dispatched the touch
starter-touch move event to

1078
00:51:10,010 --> 00:51:11,110
you and waited to see if
you're going to call

1079
00:51:11,110 --> 00:51:11,770
preventDefault.

1080
00:51:11,770 --> 00:51:13,820
And if you preventDefault on the
touch starter-touch move,

1081
00:51:13,820 --> 00:51:15,040
that means you're canceling
the scroll.

1082
00:51:15,040 --> 00:51:17,040
You might even be in the middle
of the scroll, and you

1083
00:51:17,040 --> 00:51:18,710
preventDefault to move, and it
means we have to cancel the

1084
00:51:18,710 --> 00:51:21,520
scroll, which means in modern
browsers, we try to do as much

1085
00:51:21,520 --> 00:51:23,700
scrolling as possible
on the GPU thread.

1086
00:51:23,700 --> 00:51:26,350
Which means we've got to block
the GPU thread, synchronize

1087
00:51:26,350 --> 00:51:27,680
with the main thread that might
be in the middle of

1088
00:51:27,680 --> 00:51:30,660
JavaScript or loading a page to
wait to see what your touch

1089
00:51:30,660 --> 00:51:31,940
handler is going to do
before we can go

1090
00:51:31,940 --> 00:51:32,940
back and undo scrolling.

1091
00:51:32,940 --> 00:51:34,020
And it's a huge problem.

1092
00:51:34,020 --> 00:51:37,240
So the key guidance
I would give is--

1093
00:51:37,240 --> 00:51:40,070
what we've done in the recent
versions of Chrome and what

1094
00:51:40,070 --> 00:51:43,540
iOS does is it's got region
tracking so that the GPU

1095
00:51:43,540 --> 00:51:45,860
thread knows which regions
of the page have a

1096
00:51:45,860 --> 00:51:47,060
touch handler on it.

1097
00:51:47,060 --> 00:51:49,590
So if you confine your touch
handlers to just the elements

1098
00:51:49,590 --> 00:51:52,890
that really need to have touch
handlers, then we can only

1099
00:51:52,890 --> 00:51:54,680
introduce the jank when
you touch those.

1100
00:51:54,680 --> 00:51:57,530
If you put a touch-move handler
on your document, it

1101
00:51:57,530 --> 00:51:59,580
means that every single scroll
has got a block on the main

1102
00:51:59,580 --> 00:52:01,710
thread, and it's going to be
almost impossible to have

1103
00:52:01,710 --> 00:52:03,990
smooth scrolling.

1104
00:52:03,990 --> 00:52:05,570
This is one of the things I
think is a problem with the

1105
00:52:05,570 --> 00:52:06,300
touch event model.

1106
00:52:06,300 --> 00:52:08,640
Pointer event solves this.

1107
00:52:08,640 --> 00:52:11,744
PETE LEPAGE: There's a
comment back there.

1108
00:52:11,744 --> 00:52:12,680
AUDIENCE: Hi.

1109
00:52:12,680 --> 00:52:14,370
It was just related to
what you were saying.

1110
00:52:14,370 --> 00:52:16,850
How does that translate
through to clicks?

1111
00:52:16,850 --> 00:52:19,300
Is it just touch, or what
happens when you've got the

1112
00:52:19,300 --> 00:52:21,955
simulated clicks from the touch
events with scrolling?

1113
00:52:21,955 --> 00:52:24,822

1114
00:52:24,822 --> 00:52:25,590
PETE LEPAGE: Sorry.

1115
00:52:25,590 --> 00:52:26,520
Just to make sure
I understand.

1116
00:52:26,520 --> 00:52:28,250
What happens when you have
simulated clicks?

1117
00:52:28,250 --> 00:52:30,925
AUDIENCE: So if you've got a
click handler element that

1118
00:52:30,925 --> 00:52:33,355
you're using to scroll, does
exactly the same thing apply,

1119
00:52:33,355 --> 00:52:33,703
or it just--

1120
00:52:33,703 --> 00:52:37,330
RICK BYERS: It's just touch
handlers, because click is

1121
00:52:37,330 --> 00:52:40,280
triggered by a tap gesture, and
so there's no ambiguity

1122
00:52:40,280 --> 00:52:41,990
between scrolling and tapping.

1123
00:52:41,990 --> 00:52:43,483
So you can have a tap handler,
you can have

1124
00:52:43,483 --> 00:52:44,870
a mouse-down handler.

1125
00:52:44,870 --> 00:52:46,900
In theory, mouse wheel
has the same problem.

1126
00:52:46,900 --> 00:52:49,740
In theory, mouse wheels are
blocked on JavaScript.

1127
00:52:49,740 --> 00:52:51,640
If there's a JavaScript
handler, we have to.

1128
00:52:51,640 --> 00:52:51,970
But--

1129
00:52:51,970 --> 00:52:52,480
AUDIENCE: [INAUDIBLE]--

1130
00:52:52,480 --> 00:52:54,120
RICK BYERS: --all browser
implementations

1131
00:52:54,120 --> 00:52:55,370
today always block.

1132
00:52:55,370 --> 00:52:57,070
They don't do the region
tracking for mouse wheel,

1133
00:52:57,070 --> 00:52:59,310
because there's a psychological
effect.

1134
00:52:59,310 --> 00:53:01,370
Scrolling with your finger, you
really notice the jank.

1135
00:53:01,370 --> 00:53:03,040
Scrolling with your mouse wheel
or the trackpad, you

1136
00:53:03,040 --> 00:53:04,070
don't notice it so much
because you're

1137
00:53:04,070 --> 00:53:05,450
not physically connected.

1138
00:53:05,450 --> 00:53:08,050
So in theory, the problem exists
for mouse wheel, and we

1139
00:53:08,050 --> 00:53:11,200
said we're probably going to
apply the same region tracking

1140
00:53:11,200 --> 00:53:12,830
we've done for touch to
mouse wheel in Chrome.

1141
00:53:12,830 --> 00:53:14,390
We just haven't done it yet,
because it's not as important

1142
00:53:14,390 --> 00:53:15,640
because of that psychological
effect.

1143
00:53:15,640 --> 00:53:18,900

1144
00:53:18,900 --> 00:53:21,000
FRANCOIS DAOUST: I know the
discussion has focused on

1145
00:53:21,000 --> 00:53:24,030
touch, and the question
mentioned touch explicitly,

1146
00:53:24,030 --> 00:53:28,600
which I just wanted to open it
to another dimension, which is

1147
00:53:28,600 --> 00:53:33,840
just a regular nav-down,
nav-right, nav-left, nav-up

1148
00:53:33,840 --> 00:53:37,800
events, which are the ones that
you'll receive when the

1149
00:53:37,800 --> 00:53:41,210
user is using a TV remote,
for instance, on a TV.

1150
00:53:41,210 --> 00:53:45,080
And it makes scrolling,
actually, a bit of a pain

1151
00:53:45,080 --> 00:53:48,460
because you have to handle it
yourself in the web app with

1152
00:53:48,460 --> 00:53:49,590
the nav-down.

1153
00:53:49,590 --> 00:53:53,540
And you have to, well, scroll
the viewport, obviously, and

1154
00:53:53,540 --> 00:53:57,040
then also handle links
in the good old days.

1155
00:53:57,040 --> 00:54:01,010
But the TV is kind of huge
screen, as opposed to the

1156
00:54:01,010 --> 00:54:04,950
mobile of 2000, where you had
the keypad, but you had the

1157
00:54:04,950 --> 00:54:07,570
small screen, so it was kind
of easy to make the

1158
00:54:07,570 --> 00:54:08,340
navigation.

1159
00:54:08,340 --> 00:54:10,990
So anyway, I just wanted
to raise the point.

1160
00:54:10,990 --> 00:54:15,460
Do not forget that there's more
than touch and mouse.

1161
00:54:15,460 --> 00:54:18,960
PETE LEPAGE: I think that's a
great point, and I think the

1162
00:54:18,960 --> 00:54:21,440
performance tip there of really
making sure that you're

1163
00:54:21,440 --> 00:54:25,030
being aware of where you're
putting your touch events,

1164
00:54:25,030 --> 00:54:28,010
listeners, and all that stuff
is a really great

1165
00:54:28,010 --> 00:54:29,560
point to end on.

1166
00:54:29,560 --> 00:54:32,310
I want to thank the panelists
for joining us up on stage.

1167
00:54:32,310 --> 00:54:35,470
I hope you guys learned
something, and it was quite

1168
00:54:35,470 --> 00:54:37,010
interesting for you.

1169
00:54:37,010 --> 00:54:38,490
And go build cool.

1170
00:54:38,490 --> 00:54:44,043

