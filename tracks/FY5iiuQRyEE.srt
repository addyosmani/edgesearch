1
00:00:00,000 --> 00:00:05,880

2
00:00:05,880 --> 00:00:07,080
IVAN ZUZAK: Hey, everyone.

3
00:00:07,080 --> 00:00:11,170
So I noticed on Moderator that
someone said, why do we have

4
00:00:11,170 --> 00:00:13,870
testing and tooling
in the same panel?

5
00:00:13,870 --> 00:00:17,470
So we will try to cover
both topics equally.

6
00:00:17,470 --> 00:00:23,060
And with that, please join me
in welcoming Simon Stewart.

7
00:00:23,060 --> 00:00:26,720
He works at Facebook, and he is
known for creating Selenium

8
00:00:26,720 --> 00:00:28,890
and WebDriver.

9
00:00:28,890 --> 00:00:34,070
Next to him is Remy Sharp, who
is the creator of JS Bin, JS

10
00:00:34,070 --> 00:00:38,720
Console, and he curates the
Full Frontal conference.

11
00:00:38,720 --> 00:00:41,530
David Blooman from BBC
News, who is the

12
00:00:41,530 --> 00:00:43,180
testing superhero there.

13
00:00:43,180 --> 00:00:46,030
And next to him is Paul Irish,
who is our opener.

14
00:00:46,030 --> 00:00:50,510
He is a guru on the Chrome
Developer Relations team.

15
00:00:50,510 --> 00:00:55,360
And he's also known for many,
many developer tools, such as

16
00:00:55,360 --> 00:00:58,240
Modernizr, Yeoman, et
cetera, et cetera.

17
00:00:58,240 --> 00:01:03,400
So I will invite Paul to give
an excellent introduction.

18
00:01:03,400 --> 00:01:09,040
[APPLAUSE]

19
00:01:09,040 --> 00:01:11,370
PAUL IRISH: All right.

20
00:01:11,370 --> 00:01:13,290
I'm going to go fast on this.

21
00:01:13,290 --> 00:01:16,040
And I apologize, because I'm
speaking with an accent, for

22
00:01:16,040 --> 00:01:17,896
probably most of you.

23
00:01:17,896 --> 00:01:19,520
But we're going to go quick.

24
00:01:19,520 --> 00:01:21,410
First, I'm going to give
a lay of the land

25
00:01:21,410 --> 00:01:22,730
of the tooling ecosystem.

26
00:01:22,730 --> 00:01:26,330
And then I'm going to give a few
demos showcasing some of

27
00:01:26,330 --> 00:01:29,570
the cool stuff that's emerging
or things you might have not

28
00:01:29,570 --> 00:01:31,670
seen in this area.

29
00:01:31,670 --> 00:01:34,490
So first, it's hard to
conceptualize as far as all

30
00:01:34,490 --> 00:01:36,790
the things that are captured
by tooling.

31
00:01:36,790 --> 00:01:37,980
This is one approach--

32
00:01:37,980 --> 00:01:39,650
Addy Osmani and I
worked on this--

33
00:01:39,650 --> 00:01:42,480
kind of laying out a bunch of
the tools as far as the life

34
00:01:42,480 --> 00:01:45,280
cycle of a project, from
boilerplate to abstractions,

35
00:01:45,280 --> 00:01:48,130
the application stack, and then
into workflow performance

36
00:01:48,130 --> 00:01:49,440
and builds.

37
00:01:49,440 --> 00:01:53,040
But then we in the group here
were thinking about something

38
00:01:53,040 --> 00:01:54,220
along these lines, too--

39
00:01:54,220 --> 00:01:56,330
this is very much in
the tooling vein--

40
00:01:56,330 --> 00:01:59,970
the package and dependency
management of my application

41
00:01:59,970 --> 00:02:01,010
source code.

42
00:02:01,010 --> 00:02:03,260
What my editing experience is
like, what the tools that the

43
00:02:03,260 --> 00:02:05,790
browser actually provides is.

44
00:02:05,790 --> 00:02:07,820
When it comes to testing, both
unit testing, integration

45
00:02:07,820 --> 00:02:08,979
testing, CSS testing.

46
00:02:08,979 --> 00:02:10,860
I'm going to show a demo
of some of that.

47
00:02:10,860 --> 00:02:13,340
Then build and deployment, how
I'm automating browsers.

48
00:02:13,340 --> 00:02:15,190
I'm probably going to be doing
that inside Continuous

49
00:02:15,190 --> 00:02:16,290
Integration.

50
00:02:16,290 --> 00:02:17,700
And then there's a lot
inside mobile.

51
00:02:17,700 --> 00:02:20,690
So handling mobile devices,
whether they're local or in

52
00:02:20,690 --> 00:02:23,000
the cloud, there's a lot.

53
00:02:23,000 --> 00:02:24,520
So I want to dive into
a few things.

54
00:02:24,520 --> 00:02:29,730
So CSS testing, this is a
fantastic slide deck and site

55
00:02:29,730 --> 00:02:31,870
put together by Simon Madine.

56
00:02:31,870 --> 00:02:34,040
This is focused on
four styles.

57
00:02:34,040 --> 00:02:36,620
How can we better have
a feel for if we're

58
00:02:36,620 --> 00:02:37,810
screwing up or not?

59
00:02:37,810 --> 00:02:40,310
One of the projects that's
listed here--

60
00:02:40,310 --> 00:02:44,560
a number of these are pretty
young projects, but this one,

61
00:02:44,560 --> 00:02:46,480
called Fighting Layout Bugs,
has been around for about

62
00:02:46,480 --> 00:02:48,420
three years.

63
00:02:48,420 --> 00:02:51,230
And it's actually offered
in Java, mostly

64
00:02:51,230 --> 00:02:52,910
for use with Maven.

65
00:02:52,910 --> 00:02:55,040
And it does things like
these five tests here.

66
00:02:55,040 --> 00:02:56,260
One of them is DetectTextNearOr

67
00:02:56,260 --> 00:02:57,510
OverlappingVerticalEdge.

68
00:02:57,510 --> 00:03:01,970

69
00:03:01,970 --> 00:03:04,670
But what you'll end up
is this sort of test.

70
00:03:04,670 --> 00:03:07,210
So it can actually detect when
you have text that's running

71
00:03:07,210 --> 00:03:09,380
up against something
like an image or

72
00:03:09,380 --> 00:03:11,150
even overflowing here.

73
00:03:11,150 --> 00:03:13,610
And this is completely
automated, so on every commit,

74
00:03:13,610 --> 00:03:16,300
Finding Layout Bugs is going to
make sure that you do not

75
00:03:16,300 --> 00:03:19,370
have one of these problems
in your target browsers.

76
00:03:19,370 --> 00:03:22,110
Pretty cool.

77
00:03:22,110 --> 00:03:24,045
So you might be running this
inside Continuous Integration,

78
00:03:24,045 --> 00:03:26,280
and I've seen a lot of movement
here recently.

79
00:03:26,280 --> 00:03:28,850
Travis has kind of opened up
everyone's eyes in the open

80
00:03:28,850 --> 00:03:32,750
source world, as far as
what can be done here.

81
00:03:32,750 --> 00:03:37,920
This here is Travis running
the new Dojo 2 tests.

82
00:03:37,920 --> 00:03:43,050
And so actually, Travis pulled
down the latest Dojo 2 source,

83
00:03:43,050 --> 00:03:46,590
built out what it needed, and
then it connected up to Sauce

84
00:03:46,590 --> 00:03:50,210
Labs, and opened up a bunch of
desktop and mobile browsers,

85
00:03:50,210 --> 00:03:54,190
and ran the test suite of
Dojo 2 on all of them.

86
00:03:54,190 --> 00:03:56,700
Reported back, and now for every
single commit and every

87
00:03:56,700 --> 00:04:00,270
single pull request, we know
if we are looking good and

88
00:04:00,270 --> 00:04:01,520
green or not.

89
00:04:01,520 --> 00:04:03,950

90
00:04:03,950 --> 00:04:05,930
Telemetry was mentioned
a little bit before.

91
00:04:05,930 --> 00:04:09,860
And I just wanted to give a
better idea of what it does

92
00:04:09,860 --> 00:04:10,950
and how it works.

93
00:04:10,950 --> 00:04:15,210
Unfortunately, it requires a
check out of the Chromium code

94
00:04:15,210 --> 00:04:17,200
base, which is about five gigs,
and I didn't want to

95
00:04:17,200 --> 00:04:18,279
pull that down on the Wi-Fi.

96
00:04:18,279 --> 00:04:21,149
So let me just talk it out.

97
00:04:21,149 --> 00:04:22,830
Telemetry would take something
like this page.

98
00:04:22,830 --> 00:04:25,290
Now, it's going to do something
like scroll the page

99
00:04:25,290 --> 00:04:27,950
down, and it's going
to pop back up and

100
00:04:27,950 --> 00:04:29,240
scroll it down again.

101
00:04:29,240 --> 00:04:31,570
While it did those two things,
it's going to be extracting a

102
00:04:31,570 --> 00:04:33,070
bunch of metrics from
the browser.

103
00:04:33,070 --> 00:04:34,110
Like what was the paint rate?

104
00:04:34,110 --> 00:04:37,240
How many million pixels per
second are being painted?

105
00:04:37,240 --> 00:04:39,260
What was the FPS?

106
00:04:39,260 --> 00:04:41,120
And now it's going to take all
these metrics and provide them

107
00:04:41,120 --> 00:04:41,730
to me in a nice way.

108
00:04:41,730 --> 00:04:44,300
And then I can take this and
plot it out against time or

109
00:04:44,300 --> 00:04:46,870
against all my commits and
see, are my performance

110
00:04:46,870 --> 00:04:49,010
thresholds being met
as the project is

111
00:04:49,010 --> 00:04:50,550
growing and as it's living?

112
00:04:50,550 --> 00:04:54,010
Or are me and my teammate adding
things to it that kill

113
00:04:54,010 --> 00:04:56,050
the visual performance?

114
00:04:56,050 --> 00:04:57,770
So there's a lot
of power here.

115
00:04:57,770 --> 00:04:59,940
Another project from
the Chromium

116
00:04:59,940 --> 00:05:01,990
team is called Endure.

117
00:05:01,990 --> 00:05:04,220
This is something where you
can write a test like, OK,

118
00:05:04,220 --> 00:05:06,410
open up Gmail, start
composing.

119
00:05:06,410 --> 00:05:07,890
Now discard.

120
00:05:07,890 --> 00:05:08,660
Start composing again.

121
00:05:08,660 --> 00:05:09,510
Discard.

122
00:05:09,510 --> 00:05:11,990
Repeat this for six hours.

123
00:05:11,990 --> 00:05:14,370
Now tell me what's up.

124
00:05:14,370 --> 00:05:17,420
So Endure will take this and
just handle the browser

125
00:05:17,420 --> 00:05:19,550
automation for you.

126
00:05:19,550 --> 00:05:22,370
And then it will give you back
some really fantastic insight

127
00:05:22,370 --> 00:05:26,320
on the memory consumption of
this application over time

128
00:05:26,320 --> 00:05:28,080
across a number of
different axes.

129
00:05:28,080 --> 00:05:31,610
So you're able to understand
if you're increasing in an

130
00:05:31,610 --> 00:05:34,840
uncontrollable way in your
memory situation.

131
00:05:34,840 --> 00:05:35,860
All right.

132
00:05:35,860 --> 00:05:39,620
Now, we've seen a lot of new
advancements when it comes to

133
00:05:39,620 --> 00:05:41,420
mobile and cross-device
testing.

134
00:05:41,420 --> 00:05:44,290
This was a project I bet a
number of you have seen called

135
00:05:44,290 --> 00:05:49,630
Remote Preview, where I can
navigate to a URL here on my

136
00:05:49,630 --> 00:05:53,150
machine, and all the browsers
follow my navigation.

137
00:05:53,150 --> 00:05:56,350
Adobe Edge Inspect also has
a similar functionality.

138
00:05:56,350 --> 00:05:57,020
And so it's cool.

139
00:05:57,020 --> 00:05:59,650
I got all these phones right
here, and they're just

140
00:05:59,650 --> 00:06:00,540
following me around.

141
00:06:00,540 --> 00:06:01,850
It's pretty fantastic.

142
00:06:01,850 --> 00:06:04,060
Mixture is another project.

143
00:06:04,060 --> 00:06:05,030
Does some fantastic things.

144
00:06:05,030 --> 00:06:07,720
It also does the same
thing, but on top of

145
00:06:07,720 --> 00:06:08,740
this, it will add--

146
00:06:08,740 --> 00:06:10,430
let's say there's a button.

147
00:06:10,430 --> 00:06:11,210
I click it.

148
00:06:11,210 --> 00:06:13,800
It pops up a dialogue, and
I close that dialogue.

149
00:06:13,800 --> 00:06:17,560
Mixture will do the same stuff
but actually repeat those same

150
00:06:17,560 --> 00:06:20,610
actions on all of these
devices as well.

151
00:06:20,610 --> 00:06:25,050
So not just navigation but
actual click events so you can

152
00:06:25,050 --> 00:06:27,640
see and verify that things are
occurring the way that you

153
00:06:27,640 --> 00:06:29,690
would expect.

154
00:06:29,690 --> 00:06:33,450
Now, I think it's cool to have
all this on devices that are

155
00:06:33,450 --> 00:06:33,990
next to you.

156
00:06:33,990 --> 00:06:37,070
But not everyone can afford all
the devices that you need

157
00:06:37,070 --> 00:06:38,450
to actually support.

158
00:06:38,450 --> 00:06:41,460
So we've been seeing things like
cloud browser testing.

159
00:06:41,460 --> 00:06:44,830
BrowserStack is one I think most
people are familiar with.

160
00:06:44,830 --> 00:06:50,650
And for mobile, they use
emulators, which is cool.

161
00:06:50,650 --> 00:06:53,560
DeviceAnywhere actually features
real devices, which

162
00:06:53,560 --> 00:06:54,290
is pretty cool.

163
00:06:54,290 --> 00:06:55,140
It's a paid service, though.

164
00:06:55,140 --> 00:06:58,760
They did just recently offer
this free service.

165
00:06:58,760 --> 00:07:03,640
So I'm opening up
an iPhone 4S.

166
00:07:03,640 --> 00:07:06,860
So this is actually a real
device, and I'm able to kind

167
00:07:06,860 --> 00:07:08,480
of play around with it--

168
00:07:08,480 --> 00:07:08,910
[INAUDIBLE]

169
00:07:08,910 --> 00:07:10,410
Google News--

170
00:07:10,410 --> 00:07:11,440
and click around.

171
00:07:11,440 --> 00:07:13,560
I can also do--

172
00:07:13,560 --> 00:07:18,790
let's see, I can mimic
a swipe and see that.

173
00:07:18,790 --> 00:07:21,560
And you can see that the
performance here is actually

174
00:07:21,560 --> 00:07:22,670
pretty good.

175
00:07:22,670 --> 00:07:25,350
It's telling me that
my latency is OK.

176
00:07:25,350 --> 00:07:28,010
And so this could actually even
get quite a bit better.

177
00:07:28,010 --> 00:07:30,570
But it's pretty fantastic to
connect to an actual device

178
00:07:30,570 --> 00:07:33,350
and get a better idea of
what my performance

179
00:07:33,350 --> 00:07:36,760
situation is on that.

180
00:07:36,760 --> 00:07:39,150
This is a project that is
totally alpha and has never

181
00:07:39,150 --> 00:07:42,180
really been shown at all.

182
00:07:42,180 --> 00:07:43,130
So I just want to FYI.

183
00:07:43,130 --> 00:07:45,205
It's got some rough edges,
but it's pretty cool.

184
00:07:45,205 --> 00:07:47,410
It's a project from some
engineers at Google.

185
00:07:47,410 --> 00:07:49,250
It's called Tracing Framework.

186
00:07:49,250 --> 00:07:54,120
And it's a bunch of analyses
for smoothness

187
00:07:54,120 --> 00:07:56,160
inside of the browser.

188
00:07:56,160 --> 00:07:58,670
And so the cool thing about it
is the instrumentation is

189
00:07:58,670 --> 00:08:01,200
written completely in
JavaScript, which means it

190
00:08:01,200 --> 00:08:04,630
runs in Chrome, Firefox,
IE, mobile

191
00:08:04,630 --> 00:08:06,290
browsers, and web views.

192
00:08:06,290 --> 00:08:08,180
So if you ever feel like you're
in a situation where

193
00:08:08,180 --> 00:08:11,110
you do not have the browser
tooling to give you enough

194
00:08:11,110 --> 00:08:13,800
insight in any of these
situations,

195
00:08:13,800 --> 00:08:15,190
check out Tracing Framework.

196
00:08:15,190 --> 00:08:18,410
Still, it's rough in alpha,
but it's worth a look.

197
00:08:18,410 --> 00:08:21,050
Now, this conversation wouldn't
be complete without

198
00:08:21,050 --> 00:08:24,200
talking about the dev tools
that are in the browser.

199
00:08:24,200 --> 00:08:26,440
And I wanted to show
a few things.

200
00:08:26,440 --> 00:08:29,190
The first up is Canvas
Inspection.

201
00:08:29,190 --> 00:08:31,390
And the cool thing is we've
never showed this before.

202
00:08:31,390 --> 00:08:32,890
And it's coming out.

203
00:08:32,890 --> 00:08:35,559
It's still kind of
an experiment.

204
00:08:35,559 --> 00:08:37,049
But I'm excited to show it.

205
00:08:37,049 --> 00:08:40,020
So I brought up here this
WebGL Aquarium.

206
00:08:40,020 --> 00:08:41,299
It's pretty cool.

207
00:08:41,299 --> 00:08:43,770
Now, when we're in Profiles, we
see Capture Canvas Frame.

208
00:08:43,770 --> 00:08:47,020
But I actually need to have the
dev tools open while this

209
00:08:47,020 --> 00:08:49,650
canvas is created.

210
00:08:49,650 --> 00:08:52,730
Now I'm going to capture
that frame.

211
00:08:52,730 --> 00:08:57,420
And up here, it looks like we
captured it at 4,300 calls to

212
00:08:57,420 --> 00:08:59,140
the context.

213
00:08:59,140 --> 00:09:01,360
And these are all the calls that
were made that changed

214
00:09:01,360 --> 00:09:02,220
the context.

215
00:09:02,220 --> 00:09:04,800
And I can step through
all of them.

216
00:09:04,800 --> 00:09:06,790
And what it's going to do is
it's going to replay all the

217
00:09:06,790 --> 00:09:08,410
calls up to this point.

218
00:09:08,410 --> 00:09:12,830
And I can set through
all the draw calls.

219
00:09:12,830 --> 00:09:14,430
Let's see.

220
00:09:14,430 --> 00:09:15,680
Give me some fishes.

221
00:09:15,680 --> 00:09:18,060

222
00:09:18,060 --> 00:09:19,310
Fishes!

223
00:09:19,310 --> 00:09:23,640

224
00:09:23,640 --> 00:09:24,890
Fish, fish.

225
00:09:24,890 --> 00:09:27,700

226
00:09:27,700 --> 00:09:28,833
Yeah, good.

227
00:09:28,833 --> 00:09:29,660
Great.

228
00:09:29,660 --> 00:09:30,540
Fishes.

229
00:09:30,540 --> 00:09:34,220
So we're able to see
step-by-step as this frame is

230
00:09:34,220 --> 00:09:38,410
being constructed and correlate
that back to my

231
00:09:38,410 --> 00:09:41,630
actual code of what
was happening.

232
00:09:41,630 --> 00:09:44,460
So I can click over there and
see this, in fact, was making

233
00:09:44,460 --> 00:09:45,610
these draw calls.

234
00:09:45,610 --> 00:09:47,320
Now, I don't know if you guys
noticed this, but when I

235
00:09:47,320 --> 00:09:51,750
actually clicked from Profiles
over into the Sources panel,

236
00:09:51,750 --> 00:09:54,590
there was a little
bit of a delay.

237
00:09:54,590 --> 00:09:58,060
Now, let's say I actually want
to figure out why there's such

238
00:09:58,060 --> 00:09:59,620
a delay there.

239
00:09:59,620 --> 00:10:05,380
So first, I'm going to undock
this move over that guy, and I

240
00:10:05,380 --> 00:10:08,160
think you see what's happening
here is that I'm using the dev

241
00:10:08,160 --> 00:10:10,360
tools on the dev tools.

242
00:10:10,360 --> 00:10:13,230
I'm going to start a new
timeline, and I'm going to

243
00:10:13,230 --> 00:10:15,880
repeat this action.

244
00:10:15,880 --> 00:10:18,440
And there we go, capture that.

245
00:10:18,440 --> 00:10:20,550
So inside the timeline, we're
getting some good information

246
00:10:20,550 --> 00:10:22,500
on how long things like
paints, recalc

247
00:10:22,500 --> 00:10:24,250
styles are all taking.

248
00:10:24,250 --> 00:10:27,700
And over here on the left-hand
side, we can see this yellow.

249
00:10:27,700 --> 00:10:29,730
And this is my click event.

250
00:10:29,730 --> 00:10:31,820
And we can see that it
was pretty long.

251
00:10:31,820 --> 00:10:33,800
In this case, it
took almost 400

252
00:10:33,800 --> 00:10:35,720
milliseconds to complete that.

253
00:10:35,720 --> 00:10:38,251
Now why was that?

254
00:10:38,251 --> 00:10:39,540
Eesh.

255
00:10:39,540 --> 00:10:42,585
So you look over here, and you
see this is what happened

256
00:10:42,585 --> 00:10:43,410
inside that time.

257
00:10:43,410 --> 00:10:45,570
We got a lot of Recalculate
Style and Layout, and Recalc

258
00:10:45,570 --> 00:10:47,120
Style, Layout.

259
00:10:47,120 --> 00:10:48,650
And this is what we were talking
about before when we

260
00:10:48,650 --> 00:10:53,290
were talking about excess
reflows, layout thrashing.

261
00:10:53,290 --> 00:10:57,470
Layout and reflow are the same
thing across browsers.

262
00:10:57,470 --> 00:10:59,300
But this is a bad situation.

263
00:10:59,300 --> 00:11:00,630
This is a pattern you
want to avoid.

264
00:11:00,630 --> 00:11:01,950
And the cool thing here
is the dev tools are

265
00:11:01,950 --> 00:11:03,240
actually telling you this.

266
00:11:03,240 --> 00:11:05,980
There's a little indicator that
says you might have a

267
00:11:05,980 --> 00:11:08,040
problem. "Forced synchronous
layer is a possible

268
00:11:08,040 --> 00:11:09,970
performance bottleneck." And
the fact that we're seeing

269
00:11:09,970 --> 00:11:13,010
this nonstop back and forth
means there's probably an

270
00:11:13,010 --> 00:11:14,960
ability to optimize.

271
00:11:14,960 --> 00:11:17,855
So Pavel, you should
probably optimize

272
00:11:17,855 --> 00:11:21,210
this in the dev tools.

273
00:11:21,210 --> 00:11:22,850
Sounds good.

274
00:11:22,850 --> 00:11:24,310
All right.

275
00:11:24,310 --> 00:11:27,950
So a lot of times, there is
a problem with paint.

276
00:11:27,950 --> 00:11:30,490
Paint is consuming a lot of
time, and it's a little hard

277
00:11:30,490 --> 00:11:32,420
to get a feel for
what's going on.

278
00:11:32,420 --> 00:11:34,840
So earlier in some talks, they
brought up continuous page

279
00:11:34,840 --> 00:11:40,940
repainting, and I want to show
what that looks like.

280
00:11:40,940 --> 00:11:42,750
Let's try this guy.

281
00:11:42,750 --> 00:11:45,120
Yeah, cool.

282
00:11:45,120 --> 00:11:47,663
All right, bringing back the dev
tools, I'm going to dock

283
00:11:47,663 --> 00:11:49,010
them again.

284
00:11:49,010 --> 00:11:51,530
And over here in the settings,
I'm going to turn on

285
00:11:51,530 --> 00:11:53,860
continuous page repainting.

286
00:11:53,860 --> 00:11:57,390
So up here, we get an idea of
how long it's taking to paint

287
00:11:57,390 --> 00:11:58,890
this page right here.

288
00:11:58,890 --> 00:12:02,910
So let's say right now it's
taking about 15 milliseconds.

289
00:12:02,910 --> 00:12:05,880
But first, I'm going to go over
here, and I'm going to

290
00:12:05,880 --> 00:12:07,350
turn off some of the styles.

291
00:12:07,350 --> 00:12:10,445
So on each of these little
Chrome logos, I got a box

292
00:12:10,445 --> 00:12:11,580
shadow and a border radius.

293
00:12:11,580 --> 00:12:12,965
I'm going to clear those off.

294
00:12:12,965 --> 00:12:16,050
And my paint time jumps
down, which is good.

295
00:12:16,050 --> 00:12:17,780
It's much cheaper to
paint this page.

296
00:12:17,780 --> 00:12:20,090
Now, the interesting thing here
is that because I have

297
00:12:20,090 --> 00:12:22,960
this live feedback and kind of
play around, I can see what is

298
00:12:22,960 --> 00:12:24,980
contributing to long paints.

299
00:12:24,980 --> 00:12:28,440
So if I add on border radius,
you can see it jumped up from

300
00:12:28,440 --> 00:12:32,010
about twos and threes up
to the fours and fives.

301
00:12:32,010 --> 00:12:32,970
Cool.

302
00:12:32,970 --> 00:12:36,310
Take that off and put on box
shadow, which is normally kind

303
00:12:36,310 --> 00:12:37,880
of expensive, you hear.

304
00:12:37,880 --> 00:12:41,750
But my paint time is actually
pretty reasonable.

305
00:12:41,750 --> 00:12:43,130
But check this out.

306
00:12:43,130 --> 00:12:44,380
I add both of them--

307
00:12:44,380 --> 00:12:46,880

308
00:12:46,880 --> 00:12:48,460
ooh--

309
00:12:48,460 --> 00:12:50,770
and my paint time just
went up to about 20

310
00:12:50,770 --> 00:12:53,660
milliseconds per frame.

311
00:12:53,660 --> 00:12:56,820
And so I get great feedback
here on what is actually

312
00:12:56,820 --> 00:12:57,390
contributing.

313
00:12:57,390 --> 00:13:01,300
It turns out that by themselves,
these styles,

314
00:13:01,300 --> 00:13:02,390
they're pretty cheap.

315
00:13:02,390 --> 00:13:05,600
But in combination, the browser
takes a little bit of

316
00:13:05,600 --> 00:13:07,980
time on it.

317
00:13:07,980 --> 00:13:11,080
Now, painting can be expensive,
and there's a lot

318
00:13:11,080 --> 00:13:13,010
that could be done.

319
00:13:13,010 --> 00:13:16,405
And I wanted to show one thing
that has been done recently.

320
00:13:16,405 --> 00:13:17,670
So--

321
00:13:17,670 --> 00:13:18,480
cool.

322
00:13:18,480 --> 00:13:23,360
This right here is Chrome
for Android stable.

323
00:13:23,360 --> 00:13:26,880
And so we have an article
on HTML5 Rocks.

324
00:13:26,880 --> 00:13:30,590
And now what I'm going to do
is just scroll the page.

325
00:13:30,590 --> 00:13:31,250
Scroll.

326
00:13:31,250 --> 00:13:31,750
There we go.

327
00:13:31,750 --> 00:13:32,900
Cool.

328
00:13:32,900 --> 00:13:37,100
And you see I'm scrolling down,
and the browser kind of

329
00:13:37,100 --> 00:13:38,390
catches up.

330
00:13:38,390 --> 00:13:41,930
But for a little while,
the page is blank.

331
00:13:41,930 --> 00:13:44,260
And then it comes in.

332
00:13:44,260 --> 00:13:47,660
So it's probably not optimal.

333
00:13:47,660 --> 00:13:50,010
We just added a new thing to
Chrome on Android called

334
00:13:50,010 --> 00:13:52,080
multi-threaded painting.

335
00:13:52,080 --> 00:13:55,820
And so here--

336
00:13:55,820 --> 00:13:57,780
so this is Chrome for
Android beta.

337
00:13:57,780 --> 00:14:00,090
You can get this from
Google Play.

338
00:14:00,090 --> 00:14:05,740
Now if I scroll, I think you
see that there's no white.

339
00:14:05,740 --> 00:14:06,290
That's cool.

340
00:14:06,290 --> 00:14:07,210
Another thing--

341
00:14:07,210 --> 00:14:09,430
you might be able to see it--
is the text actually gets a

342
00:14:09,430 --> 00:14:11,790
little blurry when this
is going too fast.

343
00:14:11,790 --> 00:14:15,620
And we have low-res tiles that
are in place just in case

344
00:14:15,620 --> 00:14:17,940
you're moving really, really
fast, that it will resolve to

345
00:14:17,940 --> 00:14:20,380
the crisp picture that
you're looking for.

346
00:14:20,380 --> 00:14:23,090
So this actual painting is
happening on a separate

347
00:14:23,090 --> 00:14:26,390
thread, which is pretty cool,
one, for the performance

348
00:14:26,390 --> 00:14:30,340
benefit, but two, for speed.

349
00:14:30,340 --> 00:14:31,850
Over here, this is
about tracing.

350
00:14:31,850 --> 00:14:35,000
I think this has been mentioned
before as well.

351
00:14:35,000 --> 00:14:36,370
Here, we get kind of--

352
00:14:36,370 --> 00:14:38,270
I mean, this looks
intimidating.

353
00:14:38,270 --> 00:14:42,870
And it is, but there's good
ways to read these things.

354
00:14:42,870 --> 00:14:45,920
So right now, I'm zooming in
on the RendererMain thread.

355
00:14:45,920 --> 00:14:47,270
This is the UI thread.

356
00:14:47,270 --> 00:14:50,910
This is the "don't block
this thread" thread.

357
00:14:50,910 --> 00:14:52,280
There's a lot of other parts
in the browser, like the

358
00:14:52,280 --> 00:14:56,150
compositor up here, but I'm
going to jump in to this guy

359
00:14:56,150 --> 00:14:56,970
and zoom in.

360
00:14:56,970 --> 00:15:00,530
And down here, we've
got a few things.

361
00:15:00,530 --> 00:15:01,440
V8.callFunction.

362
00:15:01,440 --> 00:15:02,300
This is JavaScript.

363
00:15:02,300 --> 00:15:04,410
JavaScript is running
right now.

364
00:15:04,410 --> 00:15:07,520
And then, all of a sudden,
we hit Picture Record.

365
00:15:07,520 --> 00:15:13,090
So this is a capture from Chrome
Canary on desktop doing

366
00:15:13,090 --> 00:15:14,760
multi-threaded painting.

367
00:15:14,760 --> 00:15:16,690
And this Picture Record is
actually recording all the

368
00:15:16,690 --> 00:15:19,500
draw calls that are coming
into Chrome.

369
00:15:19,500 --> 00:15:21,020
And Chrome is like, OK, I've
got all these draws.

370
00:15:21,020 --> 00:15:22,830
Here they are.

371
00:15:22,830 --> 00:15:23,500
I'm going to pass it up
to the compositor.

372
00:15:23,500 --> 00:15:25,980
The compositors are like, cool,
I'm going to spawn off a

373
00:15:25,980 --> 00:15:28,170
new thread that's
CompositorWorker, and he's

374
00:15:28,170 --> 00:15:30,040
going to take care
of this for you.

375
00:15:30,040 --> 00:15:33,450
So CompositorWorker right here,
he's doing the paint.

376
00:15:33,450 --> 00:15:36,310
This paint raster right here
is the actual paints.

377
00:15:36,310 --> 00:15:39,230
And what this means is because
this is on a separate thread,

378
00:15:39,230 --> 00:15:42,950
I can now be executing
JavaScript at the same time.

379
00:15:42,950 --> 00:15:45,140
So here we are in V8, executing
JavaScript at the

380
00:15:45,140 --> 00:15:47,050
same time as I'm doing paints.

381
00:15:47,050 --> 00:15:49,000
We haven't been able to do
this before, but now it's

382
00:15:49,000 --> 00:15:49,710
finally happening.

383
00:15:49,710 --> 00:15:52,330
I'm really excited about that.

384
00:15:52,330 --> 00:15:56,310
All right, the last thing I just
want to mention is I'm

385
00:15:56,310 --> 00:15:58,170
not going to demo Remote
Debugging, but everything that

386
00:15:58,170 --> 00:16:02,800
I showed is available, just
the same thing, just

387
00:16:02,800 --> 00:16:05,130
connecting on here.

388
00:16:05,130 --> 00:16:08,430
Really fantastic, because the
performance characteristics on

389
00:16:08,430 --> 00:16:12,620
a device with hardware that is
so different as a laptop is

390
00:16:12,620 --> 00:16:14,660
something that you really want
to be very mindful of as

391
00:16:14,660 --> 00:16:17,680
you're developing all
these experiences.

392
00:16:17,680 --> 00:16:21,840
Lastly, a few trends I think
I've been witnessing and will

393
00:16:21,840 --> 00:16:24,070
continue in 2013.

394
00:16:24,070 --> 00:16:26,040
We're seeing a rise of people
leveraging Continuous

395
00:16:26,040 --> 00:16:28,790
Integration, not just for
running things like unit tests

396
00:16:28,790 --> 00:16:30,500
but also making sure that
there's no performance

397
00:16:30,500 --> 00:16:32,960
regressions as the project
is built out.

398
00:16:32,960 --> 00:16:35,300
Things like people are focusing
on a better mobile

399
00:16:35,300 --> 00:16:39,820
debugging workflow and making
sure that for throwing tests

400
00:16:39,820 --> 00:16:44,440
on there, getting tests out of
it, and seeing their work,

401
00:16:44,440 --> 00:16:46,570
that everything is working
very nicely.

402
00:16:46,570 --> 00:16:49,060
A bigger adoption of using
dependency management, not

403
00:16:49,060 --> 00:16:51,820
just for third-party libraries
but also for your own

404
00:16:51,820 --> 00:16:54,140
application code, and people
being very mindful of

405
00:16:54,140 --> 00:16:57,440
performance from the beginning
of the project so that a

406
00:16:57,440 --> 00:17:00,110
project can sail nicely from
these devices to these

407
00:17:00,110 --> 00:17:04,640
devices, and all your
users are happy.

408
00:17:04,640 --> 00:17:07,680
That's it for this little
opener, and let's

409
00:17:07,680 --> 00:17:09,158
get into the panel.

410
00:17:09,158 --> 00:17:15,990
[APPLAUSE]

411
00:17:15,990 --> 00:17:17,240
IVAN ZUZAK: That's awesome.

412
00:17:17,240 --> 00:17:20,390

413
00:17:20,390 --> 00:17:23,130
[INAUDIBLE].

414
00:17:23,130 --> 00:17:25,090
PAUL IRISH: I do.

415
00:17:25,090 --> 00:17:27,384
IVAN ZUZAK: OK, that's
all we have as intro.

416
00:17:27,384 --> 00:17:35,440

417
00:17:35,440 --> 00:17:38,870
So there is, like, 30 questions
on Moderator--

418
00:17:38,870 --> 00:17:39,330
33.

419
00:17:39,330 --> 00:17:42,500
And let's just try to
get as much through.

420
00:17:42,500 --> 00:18:01,090

421
00:18:01,090 --> 00:18:06,280
So the first question that
[INAUDIBLE], also from Google

422
00:18:06,280 --> 00:18:10,440
Chrome Developer Relations put
on Moderator was, mobile is a

423
00:18:10,440 --> 00:18:14,540
big focus for developers
this year.

424
00:18:14,540 --> 00:18:17,250
So what do you see as being the
biggest pain points in the

425
00:18:17,250 --> 00:18:18,280
mobile test--

426
00:18:18,280 --> 00:18:19,840
mobile tooling landscape?

427
00:18:19,840 --> 00:18:23,160
And I think everyone can just
chip in what they think.

428
00:18:23,160 --> 00:18:24,410
So let's start from Remy.

429
00:18:24,410 --> 00:18:27,485

430
00:18:27,485 --> 00:18:31,420
REMY SHARP: The other browsers
is the big pain point for me

431
00:18:31,420 --> 00:18:33,030
at the moment.

432
00:18:33,030 --> 00:18:38,380
The fact that I've got Dev Tools
on Android is amazing.

433
00:18:38,380 --> 00:18:45,610
But then I have to use Safari,
and that's horrible for me.

434
00:18:45,610 --> 00:18:47,790
And that has kind of
set me up to--

435
00:18:47,790 --> 00:18:51,180
I've started a project
in my company--

436
00:18:51,180 --> 00:18:54,660
very, very early days-- where
I'm trying to get the point,

437
00:18:54,660 --> 00:18:58,010
ultimately, to just use Dev
Tools to debug every single

438
00:18:58,010 --> 00:19:00,940
mobile platform--

439
00:19:00,940 --> 00:19:06,170
Safari, Firefox, Opera, Chrome,
Windows, all of them--

440
00:19:06,170 --> 00:19:07,860
using the debugger protocol.

441
00:19:07,860 --> 00:19:12,540
And it's not so much of an
automation tool, and it's

442
00:19:12,540 --> 00:19:15,900
having the hardware there but
using just Dev Tools to go in

443
00:19:15,900 --> 00:19:19,880
and do that micro debugging, but
have one familiar tool and

444
00:19:19,880 --> 00:19:22,000
just debug the other tools.

445
00:19:22,000 --> 00:19:24,410
I hate working with Safari's
remote debugger.

446
00:19:24,410 --> 00:19:27,410
It's great that we've got it,
but I really, really struggle

447
00:19:27,410 --> 00:19:28,910
with the tool.

448
00:19:28,910 --> 00:19:34,630
So the pain point, for me, is
it just kind of exposes how

449
00:19:34,630 --> 00:19:36,470
bad the other dev tools are.

450
00:19:36,470 --> 00:19:39,270
IE 10 mobile, that's
a great browser.

451
00:19:39,270 --> 00:19:40,520
But where are the dev tools?

452
00:19:40,520 --> 00:19:43,360

453
00:19:43,360 --> 00:19:45,934
SIMON STEWART: OK.

454
00:19:45,934 --> 00:19:51,290
So the desktop world was
surprisingly simple, entirely

455
00:19:51,290 --> 00:19:52,440
by accident.

456
00:19:52,440 --> 00:19:54,620
But it was surprisingly
simple.

457
00:19:54,620 --> 00:19:57,390
We only had web apps running
in a browser,

458
00:19:57,390 --> 00:19:58,750
and that was fine.

459
00:19:58,750 --> 00:20:03,120
The mobile world, because the
devices are underpowered, and

460
00:20:03,120 --> 00:20:05,800
they're a little bit puny, and
Moore's Law is helping, but

461
00:20:05,800 --> 00:20:08,360
they are improving.

462
00:20:08,360 --> 00:20:11,820
The apps we get when we need
to test aren't just

463
00:20:11,820 --> 00:20:12,710
running in a browser.

464
00:20:12,710 --> 00:20:14,990
They're running in web views
contained within the native

465
00:20:14,990 --> 00:20:16,070
application.

466
00:20:16,070 --> 00:20:18,940
And you need to be able to test
the communication between

467
00:20:18,940 --> 00:20:21,000
the native part of the app in
the web part of the app, and

468
00:20:21,000 --> 00:20:22,250
the web part in the
native part.

469
00:20:22,250 --> 00:20:23,520
And who knows, right?

470
00:20:23,520 --> 00:20:26,180
It's a complete nightmare.

471
00:20:26,180 --> 00:20:29,980
So not only do we have a more
complex testing environment to

472
00:20:29,980 --> 00:20:32,630
begin with, the tooling
just isn't there.

473
00:20:32,630 --> 00:20:36,260
It's still early days.

474
00:20:36,260 --> 00:20:38,800
There are very few tools out
there that can actually be

475
00:20:38,800 --> 00:20:42,820
used to test a hybrid
application successfully and

476
00:20:42,820 --> 00:20:47,730
in a way that won't cause your
developers to scream at you in

477
00:20:47,730 --> 00:20:50,880
just pure rage and
frustration.

478
00:20:50,880 --> 00:20:54,530
We'll get there one day, but
that's the main pain point,

479
00:20:54,530 --> 00:20:57,761
just that the tooling
isn't there.

480
00:20:57,761 --> 00:21:01,940
DAVID BLOOMAN: Yeah, similar
to Remy, but [INAUDIBLE].

481
00:21:01,940 --> 00:21:09,260

482
00:21:09,260 --> 00:21:12,310
I don't like Safari at all,
so I don't use it.

483
00:21:12,310 --> 00:21:16,050
But the generic Web Inspector
Remote has been quite

484
00:21:16,050 --> 00:21:19,170
successful, quite
useful for me.

485
00:21:19,170 --> 00:21:21,350
But that's only for
WebKit browsers.

486
00:21:21,350 --> 00:21:22,570
But what about everything
else?

487
00:21:22,570 --> 00:21:25,790
And things like BlackBerrys,
which are still very high

488
00:21:25,790 --> 00:21:28,150
usage and something like News
is very difficult to do

489
00:21:28,150 --> 00:21:29,390
anything with.

490
00:21:29,390 --> 00:21:33,025
And then automations, iOS and
Android are pretty much the

491
00:21:33,025 --> 00:21:33,730
only two platforms.

492
00:21:33,730 --> 00:21:35,830
So you're stuck with them.

493
00:21:35,830 --> 00:21:38,880
Even the new platforms, like
BlackBerry, how do you even

494
00:21:38,880 --> 00:21:41,090
approach them with no tools?

495
00:21:41,090 --> 00:21:42,380
You can't do much with them.

496
00:21:42,380 --> 00:21:45,080
So there's a lot lacking.

497
00:21:45,080 --> 00:21:49,610
And hopefully, some nice people
will come along and

498
00:21:49,610 --> 00:21:52,900
build something new, and
the tools will mature.

499
00:21:52,900 --> 00:21:55,320
But there are still the legacy
browsers and operating systems

500
00:21:55,320 --> 00:21:57,390
that we're going to have to
deal with for a long time.

501
00:21:57,390 --> 00:21:59,960
So tooling is going to get
better, but it's also going to

502
00:21:59,960 --> 00:22:01,470
stay bad at the same time.

503
00:22:01,470 --> 00:22:04,440

504
00:22:04,440 --> 00:22:08,370
PAUL IRISH: I would say one part
of this is that I think a

505
00:22:08,370 --> 00:22:11,730
lot of developers' workflow for
their mobile testing is

506
00:22:11,730 --> 00:22:13,300
extremely manual.

507
00:22:13,300 --> 00:22:17,630
It is a matter of putting up the
newest version on stage,

508
00:22:17,630 --> 00:22:21,460
hitting Refresh, seeing,
exploring, then going to the

509
00:22:21,460 --> 00:22:23,950
next device that has the
viewport that they care about,

510
00:22:23,950 --> 00:22:25,730
and hitting Refresh,
testing that.

511
00:22:25,730 --> 00:22:28,300
And I think it's just
really slow.

512
00:22:28,300 --> 00:22:30,500
And there's a lot of existing
solutions that can totally

513
00:22:30,500 --> 00:22:31,520
improve that.

514
00:22:31,520 --> 00:22:34,850
And I think that's worth
looking into.

515
00:22:34,850 --> 00:22:37,010
The other part that I think is
important-- and I mentioned

516
00:22:37,010 --> 00:22:41,630
this in the opening, which is
that I don't think every

517
00:22:41,630 --> 00:22:45,040
developer can afford all the
devices that they need to be

518
00:22:45,040 --> 00:22:47,330
testing on.

519
00:22:47,330 --> 00:22:51,580
I mean, the Remote Debugging
capability that we're seeing

520
00:22:51,580 --> 00:22:53,960
is very important when you
have the device there.

521
00:22:53,960 --> 00:22:59,700
But I do think that
having access to--

522
00:22:59,700 --> 00:23:04,200
being able to run your
application in these mobile

523
00:23:04,200 --> 00:23:05,350
devices that you don't actually

524
00:23:05,350 --> 00:23:06,860
own is really important.

525
00:23:06,860 --> 00:23:10,600
So I'm looking forward to seeing
how we can solve that.

526
00:23:10,600 --> 00:23:11,902
Yeah.

527
00:23:11,902 --> 00:23:15,810
IVAN ZUZAK: Great OK,
so let's continue.

528
00:23:15,810 --> 00:23:18,840
The question is, what are
currently the best tools and

529
00:23:18,840 --> 00:23:22,280
workflows for testing and
debugging mobile devices?

530
00:23:22,280 --> 00:23:25,534
And I think David
can start this.

531
00:23:25,534 --> 00:23:29,760
DAVID BLOOMAN: Yeah,
so I've tried to--

532
00:23:29,760 --> 00:23:32,990
in my role at the BBC, tried to
just use as many tools as I

533
00:23:32,990 --> 00:23:36,000
can, really, to get the best
out of all our devices.

534
00:23:36,000 --> 00:23:40,530
But as you said, it's a
very manual process

535
00:23:40,530 --> 00:23:42,370
a lot of the time.

536
00:23:42,370 --> 00:23:46,270
But we've implemented, recently,
the CSS Regression

537
00:23:46,270 --> 00:23:50,705
Testing, which internally we
call a "snappy snaps." So it

538
00:23:50,705 --> 00:23:53,880
will capture two images
of two domains.

539
00:23:53,880 --> 00:23:59,060
So we use a stage and a live
environment, every

540
00:23:59,060 --> 00:24:01,520
[? resolution ?] we really want,
and then various asset

541
00:24:01,520 --> 00:24:05,040
types, so front page and story
pages, and then compare them

542
00:24:05,040 --> 00:24:08,570
using ImageMagick to output a
[? DIF ?] image, which you can

543
00:24:08,570 --> 00:24:09,060
then review.

544
00:24:09,060 --> 00:24:13,220
So you can test a massive amount
of pages of different

545
00:24:13,220 --> 00:24:16,300
resolutions very quickly and
identify the differences and

546
00:24:16,300 --> 00:24:18,220
then collaboratively decide
how you want to

547
00:24:18,220 --> 00:24:19,280
move on from there.

548
00:24:19,280 --> 00:24:22,150
So there are tools like that
that really just cut down the

549
00:24:22,150 --> 00:24:25,470
amount of manual testing you can
do, because you can just

550
00:24:25,470 --> 00:24:27,530
automate a lot of it.

551
00:24:27,530 --> 00:24:30,190
ImageMagick is a very powerful
tool, so you can use

552
00:24:30,190 --> 00:24:31,440
percentage differences,
as well.

553
00:24:31,440 --> 00:24:34,375
So it's just a series of numbers
that come out, and you

554
00:24:34,375 --> 00:24:38,610
know whether you've got
huge CSS regressions.

555
00:24:38,610 --> 00:24:41,215
And again, tools like Web
Inspector Remote and Remote

556
00:24:41,215 --> 00:24:44,150
Debugging on Android, especially
of picking up

557
00:24:44,150 --> 00:24:48,492
networking things, like are we
making sure that stats are

558
00:24:48,492 --> 00:24:52,860
being recorded over the Chrome
Dev Tools is so important.

559
00:24:52,860 --> 00:24:57,510
And using those tools has been
really beneficial for us.

560
00:24:57,510 --> 00:25:00,210
There are other tools, like
Remote Preview and Adobe

561
00:25:00,210 --> 00:25:01,900
Shadow, which you can use.

562
00:25:01,900 --> 00:25:06,690
But the things is that Adobe
Shadow or Edge Inspect is a

563
00:25:06,690 --> 00:25:07,600
costly one.

564
00:25:07,600 --> 00:25:10,170
And I think that's where the
cost element is quite

565
00:25:10,170 --> 00:25:11,660
difficult in mobile
[? responsive ?]

566
00:25:11,660 --> 00:25:15,410
because you need all the devices
in a lot of cases, and

567
00:25:15,410 --> 00:25:19,250
financially, it's impossible to
have for an independent or

568
00:25:19,250 --> 00:25:20,750
small company.

569
00:25:20,750 --> 00:25:23,810
BrowserStack is a good option.

570
00:25:23,810 --> 00:25:30,030
And I haven't really looked into
TestPlant, but it's an

571
00:25:30,030 --> 00:25:31,552
option as well.

572
00:25:31,552 --> 00:25:33,920
But there are some good tools.

573
00:25:33,920 --> 00:25:37,460
I think if you're interested,
there's a great amount of

574
00:25:37,460 --> 00:25:40,840
tools on RGA Online, a site
which will point you in the

575
00:25:40,840 --> 00:25:41,325
right direction.

576
00:25:41,325 --> 00:25:42,430
IVAN ZUZAK: Great.

577
00:25:42,430 --> 00:25:45,590
Simon, what can you tell
us about WebDriver?

578
00:25:45,590 --> 00:25:47,640
SIMON STEWART: Yeah,
WebDriver.

579
00:25:47,640 --> 00:25:51,350
So tools for doing testing
on mobile.

580
00:25:51,350 --> 00:25:54,480
The first thing I was going to
suggest was it isn't that

581
00:25:54,480 --> 00:25:56,970
different from being on
the desktop, right?

582
00:25:56,970 --> 00:25:59,810
So you could use all the
JavaScript frameworks that are

583
00:25:59,810 --> 00:26:02,370
already out there, things like
Jasmine, for example, if

584
00:26:02,370 --> 00:26:07,130
you're a BDD fan, still work
in a mobile browser.

585
00:26:07,130 --> 00:26:09,990
And a mobile browser nowadays
runs on a device that has the

586
00:26:09,990 --> 00:26:14,760
same power as the old G5 Macs
that people used to do their

587
00:26:14,760 --> 00:26:16,170
development on.

588
00:26:16,170 --> 00:26:18,640
We think of them as underpowered
devices.

589
00:26:18,640 --> 00:26:20,240
They're enormously
capable, and they

590
00:26:20,240 --> 00:26:21,590
keep on getting faster.

591
00:26:21,590 --> 00:26:25,230
So you could keep
on doing that.

592
00:26:25,230 --> 00:26:27,480
I obviously have a
vested interest.

593
00:26:27,480 --> 00:26:29,360
I am the lead of the
Selenium project.

594
00:26:29,360 --> 00:26:30,670
I invented WebDriver.

595
00:26:30,670 --> 00:26:33,580
We're standardizing
that with the W3C.

596
00:26:33,580 --> 00:26:36,960
Hopefully, the best way to test
mobile browsers will be

597
00:26:36,960 --> 00:26:41,220
to use the WebDriver APIs, which
will enable you to do

598
00:26:41,220 --> 00:26:44,070
all sorts of fun things,
particularly from the point of

599
00:26:44,070 --> 00:26:46,930
view of automating a browser
from a user's perspective.

600
00:26:46,930 --> 00:26:50,010
Go to this page, click on this
link, execute this piece of

601
00:26:50,010 --> 00:26:50,900
JavaScript.

602
00:26:50,900 --> 00:26:54,070
Now let me see what the text is
on the page as a user would

603
00:26:54,070 --> 00:26:57,180
see it, which is an enormously
powerful thing to do.

604
00:26:57,180 --> 00:27:00,850
And I've been on projects
where we've had those

605
00:27:00,850 --> 00:27:04,220
end-to-end tests, smaller
integration tests, unit tests,

606
00:27:04,220 --> 00:27:07,510
realize that we've made some
fundamental failures in the

607
00:27:07,510 --> 00:27:09,820
architecture of the application,
thrown away every

608
00:27:09,820 --> 00:27:13,100
test apart from the WebDriver
tests, and rebuilt everything

609
00:27:13,100 --> 00:27:14,680
just using those.

610
00:27:14,680 --> 00:27:18,900
So if you write them well,
they can work.

611
00:27:18,900 --> 00:27:22,040
If I was going to name
frameworks, obviously Selenium

612
00:27:22,040 --> 00:27:23,920
is probably one that I
would rush out and

613
00:27:23,920 --> 00:27:26,510
download right now.

614
00:27:26,510 --> 00:27:30,310
I'm biased, though,
so that's OK.

615
00:27:30,310 --> 00:27:32,780
For mobile, it might be worth
having a look at a thing

616
00:27:32,780 --> 00:27:36,630
called iOS Driver, which is
written by Francois Reynaud,

617
00:27:36,630 --> 00:27:39,940
who is working at eBay.

618
00:27:39,940 --> 00:27:44,110
And Sauce Labs recently put a
lot of weight behind a project

619
00:27:44,110 --> 00:27:45,570
called Appium.

620
00:27:45,570 --> 00:27:48,760
So if you go to saucelabs.com
and take a look for Appium on

621
00:27:48,760 --> 00:27:51,050
their site, you'll be
able to find it.

622
00:27:51,050 --> 00:27:53,230
Both of those are for iOS.

623
00:27:53,230 --> 00:27:57,210
And they allow you to test
native apps, hybrid apps, and

624
00:27:57,210 --> 00:27:58,880
just plain web apps, as well.

625
00:27:58,880 --> 00:28:00,390
So that's pretty cool.

626
00:28:00,390 --> 00:28:04,860
On the Android platform, I think
it's still fair game.

627
00:28:04,860 --> 00:28:07,920
There will be something that
uses UI automation.

628
00:28:07,920 --> 00:28:10,330
And there's going to be a period
of about a year, two

629
00:28:10,330 --> 00:28:13,010
years, while people
go, what about the

630
00:28:13,010 --> 00:28:14,410
older versions of Android?

631
00:28:14,410 --> 00:28:15,450
They're still really popular.

632
00:28:15,450 --> 00:28:17,310
And then people will realize
that it's a pain in the

633
00:28:17,310 --> 00:28:19,340
backside to test those things.

634
00:28:19,340 --> 00:28:23,510
And time will be on our side,
and hopefully, we'll only have

635
00:28:23,510 --> 00:28:29,190
ICS and above in about 50 years
of something, in the way

636
00:28:29,190 --> 00:28:30,930
that Android is updating.

637
00:28:30,930 --> 00:28:32,900
But it'll happen eventually,
and that will

638
00:28:32,900 --> 00:28:35,975
be extremely cool.

639
00:28:35,975 --> 00:28:37,460
IVAN ZUZAK: Want to add
something, Remy?

640
00:28:37,460 --> 00:28:41,110
REMY SHARP: Yeah, I'm
more in the kind of

641
00:28:41,110 --> 00:28:42,080
debugging end of things.

642
00:28:42,080 --> 00:28:47,270
So actually, for a project that
we are releasing for a

643
00:28:47,270 --> 00:28:50,840
client literally Friday, we're
trying to get the last style

644
00:28:50,840 --> 00:28:51,430
changes in.

645
00:28:51,430 --> 00:28:56,240
And we've got this iPad Mini,
and what I ended up doing was

646
00:28:56,240 --> 00:29:01,140
using Dev Tools in Chrome,
having it save as I was making

647
00:29:01,140 --> 00:29:04,390
changes to the local disk, and
then I had LiveReload just

648
00:29:04,390 --> 00:29:05,310
sitting on there.

649
00:29:05,310 --> 00:29:08,770
And the UX guy was sat next
to me with the iPad.

650
00:29:08,770 --> 00:29:11,540
And he was like, OK, just
tweak this color.

651
00:29:11,540 --> 00:29:13,290
I'd tweak it on my desktop.

652
00:29:13,290 --> 00:29:15,730
And in the inspector, I'm
changing the color and

653
00:29:15,730 --> 00:29:21,580
releasing, and it's immediately
on the iPad Mini.

654
00:29:21,580 --> 00:29:30,250
Which for me, getting away
from coding, saving,

655
00:29:30,250 --> 00:29:32,970
switching, hitting Refresh,
going to the device, hitting

656
00:29:32,970 --> 00:29:35,280
Refresh, that's where I
live at the moment.

657
00:29:35,280 --> 00:29:37,970
And the closer I get to actually
using the browser as

658
00:29:37,970 --> 00:29:41,550
my development--

659
00:29:41,550 --> 00:29:43,722
an IDE by IDE--

660
00:29:43,722 --> 00:29:44,890
the happier I get.

661
00:29:44,890 --> 00:29:48,110
And I'm really impatient.

662
00:29:48,110 --> 00:29:49,380
I want that feedback.

663
00:29:49,380 --> 00:29:50,280
I want to know now.

664
00:29:50,280 --> 00:29:54,210
And I want it all reloading
live, and my workflow is

665
00:29:54,210 --> 00:29:56,502
getting really, really
close to that.

666
00:29:56,502 --> 00:29:59,393
And I see some of my guys
working, using--

667
00:29:59,393 --> 00:30:02,795
in JS Bin, we've got a remote
rendering feature in it so you

668
00:30:02,795 --> 00:30:05,400
can code away, and it will just
automatically update on

669
00:30:05,400 --> 00:30:05,870
the device.

670
00:30:05,870 --> 00:30:07,440
And I see them actually using
that as well, which is really

671
00:30:07,440 --> 00:30:10,150
cool for me.

672
00:30:10,150 --> 00:30:12,370
But yeah, basically, immediacy,
that's what

673
00:30:12,370 --> 00:30:13,275
[INAUDIBLE].

674
00:30:13,275 --> 00:30:16,420
IVAN ZUZAK: So there's this
question from Addy again.

675
00:30:16,420 --> 00:30:20,290
And he says, seeing browser
developer tools flourish into

676
00:30:20,290 --> 00:30:23,160
fully blown editors
is very exciting.

677
00:30:23,160 --> 00:30:26,990
And at what point should we stop
pushing the envelope and

678
00:30:26,990 --> 00:30:28,820
suggest developers use
their own tools?

679
00:30:28,820 --> 00:30:32,800
So do you think that will
happen, or will we push the

680
00:30:32,800 --> 00:30:36,730
envelope far and beyond and
use browser dev tools for

681
00:30:36,730 --> 00:30:38,760
everything?

682
00:30:38,760 --> 00:30:42,200
REMY SHARP: For me, personally,
I'm much more

683
00:30:42,200 --> 00:30:46,110
towards the end of using the
browser as close as--

684
00:30:46,110 --> 00:30:49,980
I want to get the output, the
rendered page, and what I'm

685
00:30:49,980 --> 00:30:52,240
typing as close as possible.

686
00:30:52,240 --> 00:30:55,180
I'm typing, I want to see
the output immediately.

687
00:30:55,180 --> 00:30:58,420
If it lives inside of the
IDE itself, then fine.

688
00:30:58,420 --> 00:30:58,890
But at the moment.

689
00:30:58,890 --> 00:31:02,586
Dev Tools is kind of ticking
that box for me.

690
00:31:02,586 --> 00:31:05,010
IVAN ZUZAK: So are there any
key parts that are missing

691
00:31:05,010 --> 00:31:11,520
from dev tools currently for
any browser for you?

692
00:31:11,520 --> 00:31:13,160
REMY SHARP: The testing,
for me.

693
00:31:13,160 --> 00:31:16,560

694
00:31:16,560 --> 00:31:17,210
Event proxying--

695
00:31:17,210 --> 00:31:19,080
that's something I mentioned.

696
00:31:19,080 --> 00:31:20,743
SIMON STEWART: That's
in WebDriver.

697
00:31:20,743 --> 00:31:21,670
REMY SHARP: What's that?

698
00:31:21,670 --> 00:31:24,482
SIMON STEWART: WebDriver's
got that.

699
00:31:24,482 --> 00:31:26,310
REMY SHARP: I haven't
seen WebDriver.

700
00:31:26,310 --> 00:31:29,481
SIMON STEWART: It's being
standardized.

701
00:31:29,481 --> 00:31:33,270
REMY SHARP: So one thing that's
missing for me is I

702
00:31:33,270 --> 00:31:35,570
don't want to type in a lat-long
to be able to emulate

703
00:31:35,570 --> 00:31:36,220
geolocation.

704
00:31:36,220 --> 00:31:38,020
I want my phone to
give it to me.

705
00:31:38,020 --> 00:31:39,450
The accelerometer, I
want that to feed

706
00:31:39,450 --> 00:31:42,176
straight into the desktop.

707
00:31:42,176 --> 00:31:46,395
I know Paul and Addy
have hinted at, or

708
00:31:46,395 --> 00:31:49,376
might mention something.

709
00:31:49,376 --> 00:31:53,270
PAUL IRISH: There's likely going
to be some more stuff

710
00:31:53,270 --> 00:31:56,180
that would make Remy happy, as
far as developing in the

711
00:31:56,180 --> 00:31:57,430
browser more.

712
00:31:57,430 --> 00:31:59,920

713
00:31:59,920 --> 00:32:04,740
And actually, to add on to a
little bit of the mobile tools

714
00:32:04,740 --> 00:32:09,640
and workflows, we talked a lot
about what are the ways to

715
00:32:09,640 --> 00:32:11,050
work with these devices.

716
00:32:11,050 --> 00:32:13,300
But the other thing is that a
lot of times, you can end up

717
00:32:13,300 --> 00:32:16,230
doing a lot of development just
on desktop, straight up.

718
00:32:16,230 --> 00:32:19,620
Firefox has a fantastic,
responsive design tool built

719
00:32:19,620 --> 00:32:20,980
into their dev tools now.

720
00:32:20,980 --> 00:32:22,700
Inside Chrome, there's
device metrics.

721
00:32:22,700 --> 00:32:25,580
And there's, like, 50
different sites and

722
00:32:25,580 --> 00:32:28,760
bookmarklets to get various
different iframes so they can

723
00:32:28,760 --> 00:32:32,050
test your viewport
for any site.

724
00:32:32,050 --> 00:32:34,830
But things like emulating touch
events, emulating and

725
00:32:34,830 --> 00:32:37,980
spoofing geolocation,
these are all in the

726
00:32:37,980 --> 00:32:38,850
browser now, too.

727
00:32:38,850 --> 00:32:42,190
So there's a good amount that
you can get away with on

728
00:32:42,190 --> 00:32:45,210
desktop before you go to the
device to make sure that your

729
00:32:45,210 --> 00:32:46,590
performance goals are
being met, too.

730
00:32:46,590 --> 00:32:47,890
So I'd add that in.

731
00:32:47,890 --> 00:32:49,005
SIMON STEWART: Right.

732
00:32:49,005 --> 00:32:51,230
So I think one of the things
we're missing here are the

733
00:32:51,230 --> 00:32:53,790
audiences for testing, right?

734
00:32:53,790 --> 00:32:56,070
Your workflow sounds very
developer-centric, like you

735
00:32:56,070 --> 00:32:59,930
want to make sure that the CSS
and the UX is perfect.

736
00:32:59,930 --> 00:33:02,130
The people that tend to use
WebDriver tend to be more

737
00:33:02,130 --> 00:33:04,450
interested in the end-to-end
testing and the functionality

738
00:33:04,450 --> 00:33:07,857
of the application, particularly
as a workflow or

739
00:33:07,857 --> 00:33:10,860
a walkthrough goes.

740
00:33:10,860 --> 00:33:15,160
So I probably wouldn't recommend
end-to-end testers

741
00:33:15,160 --> 00:33:18,800
use dev tools, because it's
not the right hammer to be

742
00:33:18,800 --> 00:33:22,680
hitting this particular
nail with.

743
00:33:22,680 --> 00:33:25,870
And it's got to be like take
a look at what people are

744
00:33:25,870 --> 00:33:29,330
actually attempting to do and
their relative skill levels

745
00:33:29,330 --> 00:33:32,590
and try and figure out what
the best approach is.

746
00:33:32,590 --> 00:33:35,070
For a handful of people, being
in the dev tools and being

747
00:33:35,070 --> 00:33:37,790
highly technical and getting
all the metrics out of the

748
00:33:37,790 --> 00:33:39,760
browser is entirely the
right thing to do.

749
00:33:39,760 --> 00:33:42,700
And that's a fantastic option
for those people.

750
00:33:42,700 --> 00:33:46,880
But for hundreds of people, for
a majority of developers,

751
00:33:46,880 --> 00:33:48,520
actually, it's enough to be
able to throw something

752
00:33:48,520 --> 00:33:50,880
together with a bit of Python
or a small amount of

753
00:33:50,880 --> 00:33:54,460
JavaScript and use that to
verify that the application is

754
00:33:54,460 --> 00:33:56,950
doing what it's meant
to be doing.

755
00:33:56,950 --> 00:34:00,630
So yeah, think about the
audience of who's going to be

756
00:34:00,630 --> 00:34:03,200
using this and how they're going
to be using it and how

757
00:34:03,200 --> 00:34:05,160
they're going to be integrating
with the team.

758
00:34:05,160 --> 00:34:07,860
And it may turn out that
actually, not being in the

759
00:34:07,860 --> 00:34:10,070
browser is a better way
of going about it.

760
00:34:10,070 --> 00:34:11,820
And sometimes, it's
going to be better

761
00:34:11,820 --> 00:34:13,780
to do things manually.

762
00:34:13,780 --> 00:34:16,870
"Does this feel right" is a
really hard question for

763
00:34:16,870 --> 00:34:19,159
machine to answer but a
really easy question

764
00:34:19,159 --> 00:34:20,483
for a person to answer.

765
00:34:20,483 --> 00:34:23,850
REMY SHARP: Can I just tack
on to the end of that?

766
00:34:23,850 --> 00:34:25,880
I can't remember who the
conversations were with, but

767
00:34:25,880 --> 00:34:30,120
I've got a feeling it might
be Paul, like a year ago.

768
00:34:30,120 --> 00:34:34,139
Web developers don't jump on
to the command line as

769
00:34:34,139 --> 00:34:38,870
frequently as a Python developer
or a Ruby developer.

770
00:34:38,870 --> 00:34:40,440
I'm comfortable with
the command line.

771
00:34:40,440 --> 00:34:45,850
But out of the web developers
here, you probably do

772
00:34:45,850 --> 00:34:46,710
server-side coding, anyway.

773
00:34:46,710 --> 00:34:49,429
But hands up who's pretty
comfortable using the command

774
00:34:49,429 --> 00:34:51,602
line or coding up--

775
00:34:51,602 --> 00:34:53,240
actually, this is a bit
of a [INAUDIBLE]

776
00:34:53,240 --> 00:34:53,685
[LAUGHTER]

777
00:34:53,685 --> 00:34:57,350
REMY SHARP: It's a technical
audience in the first place.

778
00:34:57,350 --> 00:34:59,310
Loaded question, bias,
so on and so forth.

779
00:34:59,310 --> 00:35:02,621
But there's that question
as well.

780
00:35:02,621 --> 00:35:06,070
IVAN ZUZAK: So it seems like
having a huge number of mobile

781
00:35:06,070 --> 00:35:08,850
devices is the only way to
reliably test on Android and

782
00:35:08,850 --> 00:35:09,720
BlackBerry.

783
00:35:09,720 --> 00:35:12,820
Is there any hope of having
accurate, reliable emulators

784
00:35:12,820 --> 00:35:16,390
for platforms other than iOS?

785
00:35:16,390 --> 00:35:19,010
REMY SHARP: I would add iOS
to that list as well.

786
00:35:19,010 --> 00:35:20,930
IVAN ZUZAK: Yeah?

787
00:35:20,930 --> 00:35:22,540
Anyone?

788
00:35:22,540 --> 00:35:24,590
So is there any hope for having

789
00:35:24,590 --> 00:35:26,680
really reliable emulators?

790
00:35:26,680 --> 00:35:27,730
SIMON STEWART: No.

791
00:35:27,730 --> 00:35:28,995
IVAN ZUZAK: Excellent.

792
00:35:28,995 --> 00:35:31,180
REMY SHARP: Just to
give Opera props,

793
00:35:31,180 --> 00:35:34,050
isn't the Opera emulator--

794
00:35:34,050 --> 00:35:34,940
isn't it supposed to
be exactly the

795
00:35:34,940 --> 00:35:36,570
same as Opera Mobile?

796
00:35:36,570 --> 00:35:38,318
AUDIENCE: [INAUDIBLE]

797
00:35:38,318 --> 00:35:38,804
backed up.

798
00:35:38,804 --> 00:35:41,720
But it obviously doesn't have
the same [INAUDIBLE]

799
00:35:41,720 --> 00:35:43,178
device.

800
00:35:43,178 --> 00:35:45,122
AUDIENCE: WebOS is
pretty good.

801
00:35:45,122 --> 00:35:46,094
IVAN ZUZAK: Hmm?

802
00:35:46,094 --> 00:35:47,225
AUDIENCE: WebOS is
pretty good.

803
00:35:47,225 --> 00:35:48,380
PAUL IRISH: WebOS.

804
00:35:48,380 --> 00:35:53,070
Yeah, I think you could say
that there is hope that

805
00:35:53,070 --> 00:35:54,580
they'll get better.

806
00:35:54,580 --> 00:35:57,850
I would expect those
vendors to put

807
00:35:57,850 --> 00:35:59,405
support into those tools.

808
00:35:59,405 --> 00:36:00,150
So yeah.

809
00:36:00,150 --> 00:36:00,770
SIMON STEWART: Great.

810
00:36:00,770 --> 00:36:02,800
More optimistically than
just a flat no.

811
00:36:02,800 --> 00:36:05,090
I think the Pareto principle
is going to kick in here--

812
00:36:05,090 --> 00:36:07,550
the 80-20 rule.

813
00:36:07,550 --> 00:36:10,910
Testing on a simulator and
emulator is going to be fairly

814
00:36:10,910 --> 00:36:14,510
close, and in the common case,
actually enough for our

815
00:36:14,510 --> 00:36:15,140
testing needs.

816
00:36:15,140 --> 00:36:17,230
But there's always going to
be some weird quirk in the

817
00:36:17,230 --> 00:36:21,850
hardware that we're going
to need the devices for.

818
00:36:21,850 --> 00:36:24,315
So are the emulators going to
get enough where it'll move

819
00:36:24,315 --> 00:36:28,610
away from the 80-20
to 90-10 or 95-5?

820
00:36:28,610 --> 00:36:29,815
I don't know.

821
00:36:29,815 --> 00:36:33,170
But having seen the progress of
the Android emulator, which

822
00:36:33,170 --> 00:36:35,930
has gone from being quite
painful to use to actually

823
00:36:35,930 --> 00:36:39,270
being good enough to do a
majority of my testing on,

824
00:36:39,270 --> 00:36:43,810
particularly with the Intel
version that's available now,

825
00:36:43,810 --> 00:36:47,250
yeah, I'm actually relatively
hopeful about hitting the

826
00:36:47,250 --> 00:36:47,770
90-10 point.

827
00:36:47,770 --> 00:36:49,901
IVAN ZUZAK: Excellent.

828
00:36:49,901 --> 00:36:52,056
REMY SHARP: There's a
question over back.

829
00:36:52,056 --> 00:36:53,400
AUDIENCE: I just want to
give a shout out to

830
00:36:53,400 --> 00:36:57,570
opendevicelab.com, which is
actually opening device labs

831
00:36:57,570 --> 00:36:58,760
all over the world right now.

832
00:36:58,760 --> 00:36:59,880
They've got 40 locations.

833
00:36:59,880 --> 00:37:01,280
One of them is a
Mozilla office.

834
00:37:01,280 --> 00:37:02,980
Google is thinking about it.

835
00:37:02,980 --> 00:37:05,880
So if you've got hardware you
don't use, you can donate it

836
00:37:05,880 --> 00:37:08,300
to one of them, and every
developer can go there and try

837
00:37:08,300 --> 00:37:10,570
on real devices to play
with their things.

838
00:37:10,570 --> 00:37:13,060
Because we can make emulators
as much as we want.

839
00:37:13,060 --> 00:37:15,420
Most of the errors come through
touching and playing

840
00:37:15,420 --> 00:37:18,610
with the thing on the
real hardware.

841
00:37:18,610 --> 00:37:23,820
When I put Firefox OS on SIIs,
three devices, same device,

842
00:37:23,820 --> 00:37:25,050
completely different results.

843
00:37:25,050 --> 00:37:27,510
So it's not that easy.

844
00:37:27,510 --> 00:37:30,440
But OpenDeviceLab is a really,
really good idea for people

845
00:37:30,440 --> 00:37:33,050
that can't afford all these
phones to actually play with

846
00:37:33,050 --> 00:37:35,320
them in an office that
is a sharing space.

847
00:37:35,320 --> 00:37:36,880
And there's lots and lots
of them worldwide.

848
00:37:36,880 --> 00:37:38,375
So just wanted to
mention that.

849
00:37:38,375 --> 00:37:41,590
PAUL IRISH: They also have a lot
of information for people

850
00:37:41,590 --> 00:37:44,980
that want to set up their own
device labs, too, and

851
00:37:44,980 --> 00:37:46,355
community support for that.

852
00:37:46,355 --> 00:37:50,025
DAVID BLOOMAN: I also, if I'm
passing a phone shop, I'll

853
00:37:50,025 --> 00:37:52,860
just go in and have a play,
see what's going on.

854
00:37:52,860 --> 00:37:56,395
And I recommend you do, too,
because the important thing to

855
00:37:56,395 --> 00:37:58,310
know is what's in a shop
is what somebody could

856
00:37:58,310 --> 00:38:00,640
potentially be using to
access your site.

857
00:38:00,640 --> 00:38:03,630
So that's a great idea
of what exactly is

858
00:38:03,630 --> 00:38:04,950
going on in the market.

859
00:38:04,950 --> 00:38:07,700
And obviously, it's going to be
market specific, but you'd

860
00:38:07,700 --> 00:38:10,010
be surprised at some of the
travesties that are in phone

861
00:38:10,010 --> 00:38:11,470
shops nowadays.

862
00:38:11,470 --> 00:38:13,498
So yeah.

863
00:38:13,498 --> 00:38:15,940
AUDIENCE: Really quick, it's
worth pointing out that most

864
00:38:15,940 --> 00:38:19,690
of the emulator execution is
somewhere else in the stack.

865
00:38:19,690 --> 00:38:21,165
There's a great company
called [INAUDIBLE]

866
00:38:21,165 --> 00:38:24,580
Incorporated, which has proven
that they can run ARM code on

867
00:38:24,580 --> 00:38:27,050
x86 faster than ARM
executes on ARM.

868
00:38:27,050 --> 00:38:29,652
So obviously, the problem isn't
with the ARM device or

869
00:38:29,652 --> 00:38:30,350
the instruction set.

870
00:38:30,350 --> 00:38:31,710
It's somewhere in the
stack to get these

871
00:38:31,710 --> 00:38:32,900
emulators up and running.

872
00:38:32,900 --> 00:38:35,040
Most of the time, it's a balance
between the teams

873
00:38:35,040 --> 00:38:36,670
trying to get their products
out the door

874
00:38:36,670 --> 00:38:38,340
versus actually caring--

875
00:38:38,340 --> 00:38:40,530
or to put it in correct
terminology, since we're about

876
00:38:40,530 --> 00:38:43,240
to have beers-- giving enough
shits about getting their

877
00:38:43,240 --> 00:38:44,170
emulators up and running.

878
00:38:44,170 --> 00:38:46,380
So if this is something that
matters to web dev as a whole,

879
00:38:46,380 --> 00:38:49,660
you should definitely be putting
more pressure on these

880
00:38:49,660 --> 00:38:51,310
manufacturers to get
their emulators up

881
00:38:51,310 --> 00:38:52,955
to speed to do things.

882
00:38:52,955 --> 00:38:54,455
IVAN ZUZAK: Excellent.

883
00:38:54,455 --> 00:38:54,840
Great.

884
00:38:54,840 --> 00:38:58,060
So let's switch gears a bit.

885
00:38:58,060 --> 00:38:59,500
Here's one of my questions.

886
00:38:59,500 --> 00:39:02,680
Will we get a solution for
package management and module

887
00:39:02,680 --> 00:39:03,510
loading soon?

888
00:39:03,510 --> 00:39:06,490
There have been several tools
that have shown that it could

889
00:39:06,490 --> 00:39:09,140
be done, but there's
no real consensus.

890
00:39:09,140 --> 00:39:12,470
And will ECMAScript 6
modules solve this?

891
00:39:12,470 --> 00:39:13,510
And Addy corrected me.

892
00:39:13,510 --> 00:39:16,360
So these are actually two
questions in one.

893
00:39:16,360 --> 00:39:18,980
And package management
is somewhat

894
00:39:18,980 --> 00:39:20,280
separate from module loading.

895
00:39:20,280 --> 00:39:24,180
So this is a real problem
for a lot of developers.

896
00:39:24,180 --> 00:39:26,955
And Paul, perhaps you
can start this.

897
00:39:26,955 --> 00:39:29,670
PAUL IRISH: Sure.

898
00:39:29,670 --> 00:39:32,260
So right now in client-side
package management, there's a

899
00:39:32,260 --> 00:39:34,930
few possibilities.

900
00:39:34,930 --> 00:39:38,730
A while ago, there was a project
called Ender, and the

901
00:39:38,730 --> 00:39:40,820
people who made Ender decided
that it didn't really work

902
00:39:40,820 --> 00:39:43,040
out, so that's mostly dead.

903
00:39:43,040 --> 00:39:47,370
There's also volo, made by
James Burke, who created

904
00:39:47,370 --> 00:39:49,690
Require.js, which
is pretty cool.

905
00:39:49,690 --> 00:39:54,190
Bower, originally released by
Twitter, and there's also a

906
00:39:54,190 --> 00:39:58,360
lot of folks using NPM, sending
it through Browserify,

907
00:39:58,360 --> 00:40:00,600
and getting it to work there.

908
00:40:00,600 --> 00:40:04,200
And these are all kind of
using different registry

909
00:40:04,200 --> 00:40:09,010
approaches, different ideas on,
should we start an entire

910
00:40:09,010 --> 00:40:12,880
new JavaScript library ecosystem
from scratch or use

911
00:40:12,880 --> 00:40:15,240
one that's already available?

912
00:40:15,240 --> 00:40:18,390
Do we just accept that we can
use node packages inside the

913
00:40:18,390 --> 00:40:20,720
browser and make that work?

914
00:40:20,720 --> 00:40:23,370

915
00:40:23,370 --> 00:40:27,710
And it's kind of messy
right now.

916
00:40:27,710 --> 00:40:29,820
I mean, I'm most excited about
what's happening with the

917
00:40:29,820 --> 00:40:31,220
Bower project.

918
00:40:31,220 --> 00:40:34,820
It has about 900 packages
in it, all working.

919
00:40:34,820 --> 00:40:36,710
Dependency resolution
works fantastic.

920
00:40:36,710 --> 00:40:41,980
You actually get updated inside
the UI when JavaScript

921
00:40:41,980 --> 00:40:43,250
library ships a new version.

922
00:40:43,250 --> 00:40:44,790
So it kind of keeps
you up to date.

923
00:40:44,790 --> 00:40:48,030

924
00:40:48,030 --> 00:40:51,240
But there's a lot of challenges,
because package

925
00:40:51,240 --> 00:40:54,810
management for client side is
something where it's useful

926
00:40:54,810 --> 00:40:56,520
when it hits a critical mass.

927
00:40:56,520 --> 00:40:58,530
And I don't think
we're there yet.

928
00:40:58,530 --> 00:41:02,320
So I'm looking forward to seeing
what we can do, either

929
00:41:02,320 --> 00:41:04,870
inside this tool or another
tool, to kind of get there.

930
00:41:04,870 --> 00:41:09,530
Because without package
management client side,

931
00:41:09,530 --> 00:41:12,180
everyone's going to be afraid of
calling jQuery dependency.

932
00:41:12,180 --> 00:41:15,940
And jQuery is already too big.

933
00:41:15,940 --> 00:41:19,350
So it could have been smaller
had we had proper package

934
00:41:19,350 --> 00:41:21,450
management.

935
00:41:21,450 --> 00:41:24,160
And I think it would really open
up a lot of progress and

936
00:41:24,160 --> 00:41:26,340
forward momentum in what we're
able to get away with on the

937
00:41:26,340 --> 00:41:29,290
front end when we can actually
create reasonable

938
00:41:29,290 --> 00:41:31,260
dependencies.

939
00:41:31,260 --> 00:41:34,900
IVAN ZUZAK: So there's this
point where at one point,

940
00:41:34,900 --> 00:41:36,620
standardization should
come in?

941
00:41:36,620 --> 00:41:39,742

942
00:41:39,742 --> 00:41:40,992
PAUL IRISH: Alex?

943
00:41:40,992 --> 00:41:42,900

944
00:41:42,900 --> 00:41:43,990
You want to talk about
ESX modules?

945
00:41:43,990 --> 00:41:46,920
ALEX RUSSELL: Sure.

946
00:41:46,920 --> 00:41:51,280
So I'm Alex Russell, Google, one
of our representatives on

947
00:41:51,280 --> 00:41:54,040
TC39, the standards body
for JavaScript.

948
00:41:54,040 --> 00:41:58,720
So there is a module system
coming in the next version of

949
00:41:58,720 --> 00:41:59,440
JavaScript.

950
00:41:59,440 --> 00:42:01,450
Will you be able to use it on
all the devices that are

951
00:42:01,450 --> 00:42:02,220
deployed today?

952
00:42:02,220 --> 00:42:03,500
Well, that depends on whether
or not you're

953
00:42:03,500 --> 00:42:04,730
targeting new browsers.

954
00:42:04,730 --> 00:42:06,250
So the answer is no.

955
00:42:06,250 --> 00:42:08,190
At least no in the short term.

956
00:42:08,190 --> 00:42:10,070
In the long term--

957
00:42:10,070 --> 00:42:13,310
well, in the intermediary time,
you'll be able to use

958
00:42:13,310 --> 00:42:16,490
tools like Tracer and
other transpilers--

959
00:42:16,490 --> 00:42:18,540
JavaScript to JavaScript
compilers--

960
00:42:18,540 --> 00:42:22,160
that will allow you to sort of
program in the source language

961
00:42:22,160 --> 00:42:24,400
and then convert to the other
one, based on a standard

962
00:42:24,400 --> 00:42:28,490
syntax, which sort of sets you
up for living in the wonderful

963
00:42:28,490 --> 00:42:30,190
future that will eventually
arrive.

964
00:42:30,190 --> 00:42:32,220
So that's a strategy that
you can use today.

965
00:42:32,220 --> 00:42:34,810
There's a little bit of tension
right now in the

966
00:42:34,810 --> 00:42:37,150
committee about what's going to
happen with the particulars

967
00:42:37,150 --> 00:42:39,370
of the syntax and some
of the semantics.

968
00:42:39,370 --> 00:42:40,780
And we're ironing
those out now.

969
00:42:40,780 --> 00:42:44,710
But the goal for us is to have a
version of the language that

970
00:42:44,710 --> 00:42:47,890
has this done, more or less
feature complete, by the end

971
00:42:47,890 --> 00:42:48,750
of the year.

972
00:42:48,750 --> 00:42:50,420
So wish us luck.

973
00:42:50,420 --> 00:42:55,020
And I guess if you'd like to
start using what is likely to

974
00:42:55,020 --> 00:42:58,620
become the module system for the
next version of ECMAScript

975
00:42:58,620 --> 00:43:00,210
today, it's not a
package manager.

976
00:43:00,210 --> 00:43:01,120
It's just a module system.

977
00:43:01,120 --> 00:43:03,310
But you can check out Tracer
and a couple of other

978
00:43:03,310 --> 00:43:05,632
transpilers that are starting
to support it.

979
00:43:05,632 --> 00:43:06,100
IVAN ZUZAK: Good.

980
00:43:06,100 --> 00:43:08,250
So while you have the
mic, I want to

981
00:43:08,250 --> 00:43:10,430
ask you another question.

982
00:43:10,430 --> 00:43:13,390
So what should be the role
of standardization in web

983
00:43:13,390 --> 00:43:16,730
development during testing, and
what are some of the areas

984
00:43:16,730 --> 00:43:19,265
that would benefit from
standardization right now?

985
00:43:19,265 --> 00:43:25,790
ALEX RUSSELL: OK, so with my
non-Google hat on, with my W3C

986
00:43:25,790 --> 00:43:28,240
TAG member hat on, let me answer
the question in terms

987
00:43:28,240 --> 00:43:30,800
of, what's the role of
a standards body.

988
00:43:30,800 --> 00:43:33,030
My view is that the role of a
standards body-- and this is

989
00:43:33,030 --> 00:43:36,430
not the TAG's view, but it's my
personal view-- is that the

990
00:43:36,430 --> 00:43:40,230
role of a standards body is to
hold the coats while everybody

991
00:43:40,230 --> 00:43:43,220
gets yelled at to go have a
fight inside of a ring, right?

992
00:43:43,220 --> 00:43:45,340
They set the rules, and they
hold the coats while people

993
00:43:45,340 --> 00:43:50,740
duke it out inside some
preordained boxing ring.

994
00:43:50,740 --> 00:43:54,930
And they aren't let out again
until users have one answer.

995
00:43:54,930 --> 00:43:58,270
The goal here is to get users
to say, holy cow, you guys

996
00:43:58,270 --> 00:43:59,120
have made this really hard.

997
00:43:59,120 --> 00:44:01,350
You might all have some answer,
but we need one

998
00:44:01,350 --> 00:44:02,420
standard answer.

999
00:44:02,420 --> 00:44:05,300
And that usually only happens
when A, everybody understands

1000
00:44:05,300 --> 00:44:06,170
the problem.

1001
00:44:06,170 --> 00:44:08,220
So until everybody understands
the problem, if there's some

1002
00:44:08,220 --> 00:44:09,900
vocal minority that says,
look, there's this giant

1003
00:44:09,900 --> 00:44:12,220
problem, well, that's probably
not enough to get a standards

1004
00:44:12,220 --> 00:44:14,130
effort to a successful
conclusion.

1005
00:44:14,130 --> 00:44:16,120
So if everyone understands the
problem, and there are

1006
00:44:16,120 --> 00:44:19,350
competing answers, that's sort
of the predicate for a

1007
00:44:19,350 --> 00:44:21,590
successful standards scrum.

1008
00:44:21,590 --> 00:44:24,840
You can't really start the
game until those set of

1009
00:44:24,840 --> 00:44:26,200
conditions have been met.

1010
00:44:26,200 --> 00:44:29,560
So it's good for browser vendors
to innovate, to start

1011
00:44:29,560 --> 00:44:31,760
working together to
collaboratively look at what's

1012
00:44:31,760 --> 00:44:33,280
happening inside the world.

1013
00:44:33,280 --> 00:44:34,500
What are the libraries doing?

1014
00:44:34,500 --> 00:44:36,140
What are the compilers doing?

1015
00:44:36,140 --> 00:44:37,850
Where are we falling
down on the job?

1016
00:44:37,850 --> 00:44:40,080
Where are users yelling
at us most loudly?

1017
00:44:40,080 --> 00:44:43,360
And once that happens, go to
the standards body and say,

1018
00:44:43,360 --> 00:44:45,730
OK, well, this is the subset of
what we clearly understand

1019
00:44:45,730 --> 00:44:47,630
is a relatively good answer.

1020
00:44:47,630 --> 00:44:48,770
Let's standardize that.

1021
00:44:48,770 --> 00:44:51,900
And then to hopefully integrate
more of what is then

1022
00:44:51,900 --> 00:44:54,580
collectively understood to be
the right problem or the right

1023
00:44:54,580 --> 00:44:56,200
answer as time passes.

1024
00:44:56,200 --> 00:44:56,900
IVAN ZUZAK: OK, thanks.

1025
00:44:56,900 --> 00:44:58,830
Simon.

1026
00:44:58,830 --> 00:45:02,810
What's your experience from
being on W3C group for testing

1027
00:45:02,810 --> 00:45:03,510
and tooling?

1028
00:45:03,510 --> 00:45:06,910
SIMON STEWART: Yeah, so
WebDriver is in a really

1029
00:45:06,910 --> 00:45:09,820
interesting space in that it's a
de facto standard that we're

1030
00:45:09,820 --> 00:45:12,866
turning into a de
jure standard.

1031
00:45:12,866 --> 00:45:17,290
A lot of the tools that Paul
was talking about earlier,

1032
00:45:17,290 --> 00:45:19,220
anything that connects to
Sauce Labs is using the

1033
00:45:19,220 --> 00:45:20,470
WebDriver APIs.

1034
00:45:20,470 --> 00:45:23,260

1035
00:45:23,260 --> 00:45:28,120
Michael Tamm's Fighting Layout
Bugs, that uses WebDriver.

1036
00:45:28,120 --> 00:45:30,990
It keeps on cropping up in these
sort of unusual places.

1037
00:45:30,990 --> 00:45:32,860
The Appium stuff, that
uses the wire

1038
00:45:32,860 --> 00:45:35,280
protocol from WebDriver.

1039
00:45:35,280 --> 00:45:38,650
And so yeah, what we're
attempting to do right now is

1040
00:45:38,650 --> 00:45:41,600
go, what we need is--

1041
00:45:41,600 --> 00:45:44,480
that work is currently being
done by a relatively small

1042
00:45:44,480 --> 00:45:46,640
open source team.

1043
00:45:46,640 --> 00:45:47,840
And they're brilliant.

1044
00:45:47,840 --> 00:45:50,000
They are an amazing team.

1045
00:45:50,000 --> 00:45:52,350
But we're now at the point,
and we're past the point,

1046
00:45:52,350 --> 00:45:56,040
where in order to make the
things that people want to be

1047
00:45:56,040 --> 00:45:59,820
able to test work properly, we
need the aid and help of the

1048
00:45:59,820 --> 00:46:00,850
people writing the browsers.

1049
00:46:00,850 --> 00:46:03,010
We need to be baked
into the browsers.

1050
00:46:03,010 --> 00:46:05,940
Opera were the first people that
stepped up to the plate

1051
00:46:05,940 --> 00:46:07,200
and went, you know what?

1052
00:46:07,200 --> 00:46:08,680
We could actually do this.

1053
00:46:08,680 --> 00:46:12,880
And the Opera driver was a
fantastic step forward and was

1054
00:46:12,880 --> 00:46:15,080
incredibly fast and
incredibly stable.

1055
00:46:15,080 --> 00:46:18,350
Chrome followed relatively
swiftly after that.

1056
00:46:18,350 --> 00:46:22,540
And we went from having a fairly
buggy, painful to use

1057
00:46:22,540 --> 00:46:26,110
Chrome driver to something
that was amazing.

1058
00:46:26,110 --> 00:46:29,830
Mozilla, we talk about
M-Day on the project.

1059
00:46:29,830 --> 00:46:31,980
Mozilla have a project called
Marionette, which is their

1060
00:46:31,980 --> 00:46:35,800
implementation of the
WebDriver APIs.

1061
00:46:35,800 --> 00:46:38,300
So my experience has been
actually really, really

1062
00:46:38,300 --> 00:46:40,980
positive, like everybody sees
the need for these things.

1063
00:46:40,980 --> 00:46:43,260
Everyone is pulling together,
and we're all just trying to

1064
00:46:43,260 --> 00:46:46,410
figure out the nicest way of
standardizing these things.

1065
00:46:46,410 --> 00:46:49,226
REMY SHARP: Is Microsoft
on that list?

1066
00:46:49,226 --> 00:46:53,380
SIMON STEWART: So yes,
Microsoft, Apple.

1067
00:46:53,380 --> 00:46:58,740
There are now representatives
from Microsoft on the working

1068
00:46:58,740 --> 00:47:01,130
group mailing list, and I think
they're planning on

1069
00:47:01,130 --> 00:47:06,320
showing up to the next
face-to-face session.

1070
00:47:06,320 --> 00:47:09,750
There were Microsoft
representatives at TPAC last

1071
00:47:09,750 --> 00:47:14,160
year, in 2012, as well, who
attended a full day of

1072
00:47:14,160 --> 00:47:15,620
discussion.

1073
00:47:15,620 --> 00:47:19,460
So actually, Microsoft,
obviously they don't tell us

1074
00:47:19,460 --> 00:47:19,880
everything.

1075
00:47:19,880 --> 00:47:22,060
But they are taking
it seriously.

1076
00:47:22,060 --> 00:47:24,890
Apple are Apple, and nobody
knows quite what's going to

1077
00:47:24,890 --> 00:47:26,140
happen there.

1078
00:47:26,140 --> 00:47:28,140

1079
00:47:28,140 --> 00:47:30,170
But I think it's inevitable.

1080
00:47:30,170 --> 00:47:32,920
I really hope it's inevitable,
because everyone

1081
00:47:32,920 --> 00:47:33,700
else is doing it.

1082
00:47:33,700 --> 00:47:35,040
We're turning it into
a standard.

1083
00:47:35,040 --> 00:47:37,840
And there are people who
implement it because it's good

1084
00:47:37,840 --> 00:47:39,080
for the users.

1085
00:47:39,080 --> 00:47:40,890
And there are people who
implement it because they like

1086
00:47:40,890 --> 00:47:43,630
to be seen as conforming
to standards.

1087
00:47:43,630 --> 00:47:46,750
And the more pressure we apply
by allowing more of these

1088
00:47:46,750 --> 00:47:48,130
check boxes to be applied,
the better.

1089
00:47:48,130 --> 00:47:50,920
IVAN ZUZAK: So are there any
other tools that are going to

1090
00:47:50,920 --> 00:47:51,790
get standardized?

1091
00:47:51,790 --> 00:47:55,570
I saw the charter, and you
have Console API from

1092
00:47:55,570 --> 00:47:57,226
Developer Tools.

1093
00:47:57,226 --> 00:47:59,000
Is that going to happen soon?

1094
00:47:59,000 --> 00:48:03,880
PAUL IRISH: So there's
a Java spec for

1095
00:48:03,880 --> 00:48:06,760
standardizing Console API.

1096
00:48:06,760 --> 00:48:09,490
Mostly, it just needs
more work.

1097
00:48:09,490 --> 00:48:13,000
But right now, actually, Console
API is extremely

1098
00:48:13,000 --> 00:48:14,250
consistent across browsers.

1099
00:48:14,250 --> 00:48:17,260

1100
00:48:17,260 --> 00:48:19,730
There's a bunch of different
features in console.log that

1101
00:48:19,730 --> 00:48:22,800
most people don't know about
that are actually implemented

1102
00:48:22,800 --> 00:48:24,290
across browsers.

1103
00:48:24,290 --> 00:48:30,320
Just last summer, we changed the
definition of the dollar

1104
00:48:30,320 --> 00:48:33,320
sign symbol in the command
line API in the console.

1105
00:48:33,320 --> 00:48:37,850
And while it's not in any
standard, we just talked to

1106
00:48:37,850 --> 00:48:40,020
the guys who make Firebug, the
Firefox developer tools, the

1107
00:48:40,020 --> 00:48:43,030
Opera guys, and we all just
changed it at once.

1108
00:48:43,030 --> 00:48:48,000
So these things stay in sync
pretty well without the

1109
00:48:48,000 --> 00:48:50,260
standard being published.

1110
00:48:50,260 --> 00:48:50,930
Yeah.

1111
00:48:50,930 --> 00:48:53,680
SIMON STEWART: There is a
Browser Tools and Testing

1112
00:48:53,680 --> 00:48:54,500
Working Group.

1113
00:48:54,500 --> 00:48:56,410
If anyone's interested, they
should think about

1114
00:48:56,410 --> 00:48:59,430
joining at the W3C.

1115
00:48:59,430 --> 00:49:02,630
And I think there's some efforts
to actually kick start

1116
00:49:02,630 --> 00:49:04,650
that and give it some
shape and form.

1117
00:49:04,650 --> 00:49:07,060
You may know a bit more about
that, Paul, than I do.

1118
00:49:07,060 --> 00:49:09,310
Yeah, OK.

1119
00:49:09,310 --> 00:49:12,130
There's an effort, and I'm not
quite sure how far it's gone.

1120
00:49:12,130 --> 00:49:12,690
But it'll happen.

1121
00:49:12,690 --> 00:49:15,800
REMY SHARP: The debugger
protocol, is that part of the

1122
00:49:15,800 --> 00:49:19,130
standard, or is it just that
it's been written and looks

1123
00:49:19,130 --> 00:49:20,380
like a standard?

1124
00:49:20,380 --> 00:49:22,999

1125
00:49:22,999 --> 00:49:23,880
PAUL IRISH: The debugger
protocol--

1126
00:49:23,880 --> 00:49:25,810
IVAN ZUZAK: We're talking
about which protocol?

1127
00:49:25,810 --> 00:49:27,810
SIMON STEWART: Whose debugger
protocol is that?

1128
00:49:27,810 --> 00:49:30,620
Scope or the Firefox one
or the WebKit one?

1129
00:49:30,620 --> 00:49:33,505
REMY SHARP: The one that came
out of WebKit that--

1130
00:49:33,505 --> 00:49:36,490
like I said, it looked like
a standard Scope.

1131
00:49:36,490 --> 00:49:38,890
Looked like it came
from Opera.

1132
00:49:38,890 --> 00:49:43,020
The debugger protocol looked
like Chrome and Safari were

1133
00:49:43,020 --> 00:49:44,280
kind of adhering to it.

1134
00:49:44,280 --> 00:49:44,570
And--

1135
00:49:44,570 --> 00:49:44,880
[INTERPOSING VOICES]

1136
00:49:44,880 --> 00:49:45,760
PAUL IRISH: Yeah,
so both are--

1137
00:49:45,760 --> 00:49:46,780
REMY SHARP: [INAUDIBLE].

1138
00:49:46,780 --> 00:49:50,950
PAUL IRISH: Both are published
open specifications and both

1139
00:49:50,950 --> 00:49:56,270
designed for use in a
generalized fashion.

1140
00:49:56,270 --> 00:49:59,060
I think Firefox was the
last one to add

1141
00:49:59,060 --> 00:50:01,650
support for remote debugging.

1142
00:50:01,650 --> 00:50:05,930
And they didn't use either
of these two protocols.

1143
00:50:05,930 --> 00:50:10,870
So I don't expect to see
standardization along these

1144
00:50:10,870 --> 00:50:14,200
lines, which is a bummer,
but it's just how it is.

1145
00:50:14,200 --> 00:50:14,540
SIMON STEWART: Not yet.

1146
00:50:14,540 --> 00:50:16,895
PAUL IRISH: Not yet.

1147
00:50:16,895 --> 00:50:20,310
IVAN ZUZAK: So we have time
for a few questions.

1148
00:50:20,310 --> 00:50:21,560
Andrew?

1149
00:50:21,560 --> 00:50:23,740

1150
00:50:23,740 --> 00:50:26,050
So let's get one in.

1151
00:50:26,050 --> 00:50:28,410
What's the best way to test
against varying network

1152
00:50:28,410 --> 00:50:29,760
conditions in real life?

1153
00:50:29,760 --> 00:50:33,850
We have devices that are
constantly changing, network

1154
00:50:33,850 --> 00:50:35,930
switching between
speeds and such.

1155
00:50:35,930 --> 00:50:37,570
So how do you test this?

1156
00:50:37,570 --> 00:50:41,620
PAUL IRISH: There's two ways,
the two best ways I know.

1157
00:50:41,620 --> 00:50:44,380
There's Charles Proxy.

1158
00:50:44,380 --> 00:50:46,170
It runs on all platforms.

1159
00:50:46,170 --> 00:50:48,970
Can simulate a lot of different
network conditions,

1160
00:50:48,970 --> 00:50:51,780
including packet loss and
throttled bandwidth.

1161
00:50:51,780 --> 00:50:58,310
And anyone on Lion or better on
OSX, if they install Xcode,

1162
00:50:58,310 --> 00:51:01,560
they can get this thing called
Link Conditioner, which is

1163
00:51:01,560 --> 00:51:02,760
just in System Preferences.

1164
00:51:02,760 --> 00:51:07,750
And it has a few presets for
packet loss percentage and

1165
00:51:07,750 --> 00:51:09,350
bandwidth throughput.

1166
00:51:09,350 --> 00:51:11,725
But you can mimic a few
different common profiles,

1167
00:51:11,725 --> 00:51:13,710
which are pretty cool.

1168
00:51:13,710 --> 00:51:15,810
REMY SHARP: Can I also
add something there?

1169
00:51:15,810 --> 00:51:19,380
Something I've noticed is that
the iPhone behaves differently

1170
00:51:19,380 --> 00:51:21,780
when it has a Wi-Fi connection,
regardless of

1171
00:51:21,780 --> 00:51:26,950
whether or not it's on 3G, as
in tethered, to when it

1172
00:51:26,950 --> 00:51:27,910
doesn't have a Wi-Fi.

1173
00:51:27,910 --> 00:51:29,300
It does different things.

1174
00:51:29,300 --> 00:51:35,140

1175
00:51:35,140 --> 00:51:38,640
IOS 6 has the Network
Conditioner thing on the

1176
00:51:38,640 --> 00:51:41,080
actual device, as well, so you
can play around with that.

1177
00:51:41,080 --> 00:51:43,030
But seeing real network
traffic when

1178
00:51:43,030 --> 00:51:44,700
you're not on Wi-Fi--

1179
00:51:44,700 --> 00:51:46,910
the phone acts differently when
it's on Wi-Fi to when

1180
00:51:46,910 --> 00:51:49,160
it's not on Wi-Fi.

1181
00:51:49,160 --> 00:51:51,450
When it's on Wi-Fi, it
sends shitloads of

1182
00:51:51,450 --> 00:51:52,370
data over the wire.

1183
00:51:52,370 --> 00:51:56,600
And I found an article this
morning and tweeted the link

1184
00:51:56,600 --> 00:52:02,170
to show you how to sniff traffic
whilst it's on 3G,

1185
00:52:02,170 --> 00:52:04,025
connecting through a USB.

1186
00:52:04,025 --> 00:52:07,746
But it's something to be
wary of, basically.

1187
00:52:07,746 --> 00:52:09,440
IVAN ZUZAK: Great.

1188
00:52:09,440 --> 00:52:11,930
So can we get native support
for proxy events?

1189
00:52:11,930 --> 00:52:13,880
So--

1190
00:52:13,880 --> 00:52:14,490
oh, sorry.

1191
00:52:14,490 --> 00:52:16,800
AUDIENCE: Just one additional
question, then.

1192
00:52:16,800 --> 00:52:20,540
Testing things like app cache
and simulating offline whilst

1193
00:52:20,540 --> 00:52:22,290
remote debugging.

1194
00:52:22,290 --> 00:52:22,900
Is it possible?

1195
00:52:22,900 --> 00:52:26,665
We try blacklisting domains in
Charles, and that kind of half

1196
00:52:26,665 --> 00:52:29,754
simulates it but not totally.

1197
00:52:29,754 --> 00:52:31,780
PAUL IRISH: Not yet.

1198
00:52:31,780 --> 00:52:34,140
SIMON STEWART: Yeah, in
lots of the WebDriver

1199
00:52:34,140 --> 00:52:36,990
implementations, there's an
expectation there's a working

1200
00:52:36,990 --> 00:52:38,450
network stack.

1201
00:52:38,450 --> 00:52:41,150
And if you go offline,
that disappears.

1202
00:52:41,150 --> 00:52:42,400
D'oh.

1203
00:52:42,400 --> 00:52:44,506

1204
00:52:44,506 --> 00:52:48,160
AUDIENCE: Offline, we shut
down the server.

1205
00:52:48,160 --> 00:52:49,500
That's how we--

1206
00:52:49,500 --> 00:52:50,820
I mean, we're not
emulating it.

1207
00:52:50,820 --> 00:52:51,980
We're just killing the
server that it's

1208
00:52:51,980 --> 00:52:52,390
trying to connect to.

1209
00:52:52,390 --> 00:52:55,442
So it kind of fakes it.

1210
00:52:55,442 --> 00:52:57,350
IVAN ZUZAK: So here's
one for Remy.

1211
00:52:57,350 --> 00:53:00,500
Can we get native support for
proxy events in Dev Tools

1212
00:53:00,500 --> 00:53:03,260
injecting geolocation based
on Google Maps inputs?

1213
00:53:03,260 --> 00:53:05,270
REMY SHARP: We kind of touched
on that earlier, didn't we?

1214
00:53:05,270 --> 00:53:06,170
IVAN ZUZAK: OK.

1215
00:53:06,170 --> 00:53:09,343
REMY SHARP: I mean, you can
answer, Paul, if you want to.

1216
00:53:09,343 --> 00:53:13,056

1217
00:53:13,056 --> 00:53:14,720
IVAN ZUZAK: So here's
one for you, Remy.

1218
00:53:14,720 --> 00:53:18,710
You had a recent blog post
that touched upon CORS.

1219
00:53:18,710 --> 00:53:23,150
So the headers views to get
across the main [INAUDIBLE]

1220
00:53:23,150 --> 00:53:25,020
requests.

1221
00:53:25,020 --> 00:53:27,800
And there was a lengthy
discussion after that post.

1222
00:53:27,800 --> 00:53:31,476
And can you explain what the
discussion was about?

1223
00:53:31,476 --> 00:53:34,650
REMY SHARP: The discussion on
Google+ or the discussion on

1224
00:53:34,650 --> 00:53:35,646
the comments?

1225
00:53:35,646 --> 00:53:38,300
IVAN ZUZAK: The discussion that
touched upon that we're

1226
00:53:38,300 --> 00:53:42,270
not sure, actually, how to
use CORS headers on which

1227
00:53:42,270 --> 00:53:43,255
[INAUDIBLE].

1228
00:53:43,255 --> 00:53:44,850
REMY SHARP: Who asked
the question?

1229
00:53:44,850 --> 00:53:47,176
Because you might be able
to clarify it for me.

1230
00:53:47,176 --> 00:53:49,445
IVAN ZUZAK: So it was actually
my question.

1231
00:53:49,445 --> 00:53:50,610
REMY SHARP: That was
your question.

1232
00:53:50,610 --> 00:53:51,060
All right.

1233
00:53:51,060 --> 00:53:52,410
[LAUGHTER]

1234
00:53:52,410 --> 00:53:54,210
IVAN ZUZAK: Your
last blog post.

1235
00:53:54,210 --> 00:53:58,370
So it started quite a discussion
about when to use

1236
00:53:58,370 --> 00:53:59,485
CORS on images.

1237
00:53:59,485 --> 00:54:02,090
REMY SHARP: Oh yeah, I
basically said, just

1238
00:54:02,090 --> 00:54:04,370
turn that shit on.

1239
00:54:04,370 --> 00:54:06,152
And I linked to--

1240
00:54:06,152 --> 00:54:09,082
I'm going to butcher
his name--

1241
00:54:09,082 --> 00:54:10,332
Anne van Kesteren.

1242
00:54:10,332 --> 00:54:12,660

1243
00:54:12,660 --> 00:54:17,140
So he's got a blog post that
says turn CORS on for XHR, for

1244
00:54:17,140 --> 00:54:18,450
basically Ajax.

1245
00:54:18,450 --> 00:54:22,210
And I'm suggesting if you're
a Flickr or Instagram or

1246
00:54:22,210 --> 00:54:24,850
something with images, and I
think, actually, there's some

1247
00:54:24,850 --> 00:54:27,890
other asset types, you should
turn on CORS support for that.

1248
00:54:27,890 --> 00:54:30,570
So send, access origin, star.

1249
00:54:30,570 --> 00:54:33,720
There's a link at the bottom of
the blog post that opens a

1250
00:54:33,720 --> 00:54:40,740
discussion about the security
implications if

1251
00:54:40,740 --> 00:54:42,010
you add a star rule.

1252
00:54:42,010 --> 00:54:46,270
And there's a back and
forth between Anne

1253
00:54:46,270 --> 00:54:51,500
and Malte from Google.

1254
00:54:51,500 --> 00:54:54,130

1255
00:54:54,130 --> 00:54:56,700
I don't really know how it
ended, but I want to see

1256
00:54:56,700 --> 00:54:59,840
these, particularly image
services, giving us

1257
00:54:59,840 --> 00:55:02,490
cross-origin rules to allow us
to import that data into

1258
00:55:02,490 --> 00:55:06,000
things like Canvas and have full
access to that data so we

1259
00:55:06,000 --> 00:55:11,466
can remix the image data and
produce new content.

1260
00:55:11,466 --> 00:55:13,640
I can't remember-- there's
something else you can put it

1261
00:55:13,640 --> 00:55:14,520
on as well.

1262
00:55:14,520 --> 00:55:18,600
PAUL IRISH: If you're really
lazy, just add the Apache

1263
00:55:18,600 --> 00:55:21,320
config that's in HTML5
boilerplate, because it

1264
00:55:21,320 --> 00:55:25,262
enables this CORS for images
automatically.

1265
00:55:25,262 --> 00:55:28,430
IVAN ZUZAK: So do you think that
it's a place where tools

1266
00:55:28,430 --> 00:55:32,710
can improve to give you more
information on how you should

1267
00:55:32,710 --> 00:55:34,660
use a mechanism or an API?

1268
00:55:34,660 --> 00:55:37,760
Because there was a lot of
misunderstanding on, should

1269
00:55:37,760 --> 00:55:38,390
you be doing this?

1270
00:55:38,390 --> 00:55:39,110
Is it secure?

1271
00:55:39,110 --> 00:55:40,050
Is it not secure?

1272
00:55:40,050 --> 00:55:42,270
Are we doing [INAUDIBLE]
requests or not?

1273
00:55:42,270 --> 00:55:45,700
So like when you're writing
code, should you get a warning

1274
00:55:45,700 --> 00:55:48,830
from your IDE and say, hey look,
this is something you

1275
00:55:48,830 --> 00:55:51,790
probably are not an expert in.

1276
00:55:51,790 --> 00:55:56,050
Check these sections in the
standard, or check this--

1277
00:55:56,050 --> 00:55:58,870
PAUL IRISH: Yeah, I think
there's a lot of opportunity

1278
00:55:58,870 --> 00:56:02,900
for providing them a bit more
context of what you're seeing.

1279
00:56:02,900 --> 00:56:06,850
If you're looking at the
headers, and you're misusing

1280
00:56:06,850 --> 00:56:09,340
one of the new security headers,
the tool should be

1281
00:56:09,340 --> 00:56:11,420
able to let you know and tell
you where you can find more

1282
00:56:11,420 --> 00:56:13,580
documentation on how to
use it correctly.

1283
00:56:13,580 --> 00:56:16,930
Same situation on performance,
when you're getting back a lot

1284
00:56:16,930 --> 00:56:19,860
of information, it can give
you some guidance and some

1285
00:56:19,860 --> 00:56:21,975
resources to learn better
about what this means.

1286
00:56:21,975 --> 00:56:24,310
IVAN ZUZAK: Yeah.

1287
00:56:24,310 --> 00:56:25,920
OK, that's it.

1288
00:56:25,920 --> 00:56:26,630
Thanks, everyone.

1289
00:56:26,630 --> 00:56:29,630
[APPLAUSE]

1290
00:56:29,630 --> 00:56:34,200

